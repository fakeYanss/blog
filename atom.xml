<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yet Another Possibility</title>
  <icon>https://www.gravatar.com/avatar/02af3036e86cee458f48e977dc781ee4</icon>
  <subtitle>有约如铁</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://foreti.me/"/>
  <updated>2019-07-27T02:14:09.300Z</updated>
  <id>https://foreti.me/</id>
  
  <author>
    <name>fakeyanss</name>
    <email>yanshisangc@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简单实现依赖 MySQL 的分布式锁</title>
    <link href="https://foreti.me/2019/05/27/simple-mysql-distributed-locks/"/>
    <id>https://foreti.me/2019/05/27/simple-mysql-distributed-locks/</id>
    <published>2019-05-27T11:37:16.000Z</published>
    <updated>2019-07-27T02:14:09.300Z</updated>
    
    <content type="html"><![CDATA[<p>201905W21 Share</p><a id="more"></a><hr><p>又遇到一个使用分布式锁的情况， 但是没有用 Redis 或者 Zookeeper， 而是直接依赖 MySQL 给实现了。</p><p>其实用 MySQL 做分布式锁不是很适合， 但是在原理上非常容易理解。</p><p>我们只需要在数据库里创建一张表， 然后对这个表写数据， 多个实例中， 成功写入的那一个， 便拿到了锁， 可以进行下一步逻辑。</p><p>这里我们不考虑任何的可重入性、 超时、 阻塞等， 仅仅区满足分布式锁的互斥性， 其他的特性我们可以在下一次来实现。</p><p>下面开始我们的实现， 使用 SpringBoot 和 MySQL。</p><ol><li>首先， 需要在 maven 引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建 Event 的 model 和 dao</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"event"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date startTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date finishTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Event <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Event <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getStartTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> startTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Event <span class="title">setStartTime</span><span class="params">(Date startTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.startTime = startTime;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getFinishTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> finishTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Event <span class="title">setFinishTime</span><span class="params">(Date finishTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.finishTime = finishTime;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> indi.yanss.dls.model.Event;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EventRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Event</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Event <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建锁的获取和释放方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> indi.yanss.dls.model.Event;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EventRepository eventRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Event <span class="title">acquire</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Event event = eventRepository.findByName(name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (event == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 没有事件，注册</span></span><br><span class="line">            event = <span class="keyword">new</span> Event().setName(name).setStartTime(<span class="keyword">new</span> Date());</span><br><span class="line">            eventRepository.save(event);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getFinishTime() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 事件在运行</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Lock has been acquired."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getFinishTime().before(<span class="keyword">new</span> Date())) &#123;</span><br><span class="line">            <span class="comment">// 上一个事件已经完成，开始新事件</span></span><br><span class="line">            <span class="keyword">int</span> id = event.getId();</span><br><span class="line">            event = <span class="keyword">new</span> Event().setId(id).setName(name).setStartTime(<span class="keyword">new</span> Date());</span><br><span class="line">            eventRepository.save(event);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> event;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Event event)</span> </span>&#123;</span><br><span class="line">        eventRepository.save(event.setFinishTime(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>创建 Schedule 任务</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> indi.yanss.dls.model.Event;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EventRepository eventRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Event <span class="title">acquire</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Event event = eventRepository.findByName(name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (event == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 没有事件，注册</span></span><br><span class="line">            event = <span class="keyword">new</span> Event().setName(name).setStartTime(<span class="keyword">new</span> Date());</span><br><span class="line">            eventRepository.save(event);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getFinishTime() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 事件在运行</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Lock has been acquired."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getFinishTime().before(<span class="keyword">new</span> Date())) &#123;</span><br><span class="line">            <span class="comment">// 上一个事件已经完成，开始新事件</span></span><br><span class="line">            <span class="keyword">int</span> id = event.getId();</span><br><span class="line">            event = <span class="keyword">new</span> Event().setId(id).setName(name).setStartTime(<span class="keyword">new</span> Date());</span><br><span class="line">            eventRepository.save(event);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> event;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Event event)</span> </span>&#123;</span><br><span class="line">        eventRepository.save(event.setFinishTime(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>启动 MySQL， 配置连接。 这里不用手动创建表， JPA 会在实例启动时自动帮我们创建和 Event model 对应的表。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 需要启动mysql， 创建数据库demo</span><br><span class="line">spring.datasource.url = jdbc:mysql://localhost:3306/demo</span><br><span class="line">    spring.datasource.username = root</span><br><span class="line">spring.datasource.password = 123456</span><br></pre></td></tr></table></figure><ol start="6"><li>启动多个实例， 用不同端口即可。</li></ol><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/image.4orwrpw8u3o.png" alt="多实例配置"></p><ol start="7"><li>Done！ 观察控制台输出吧。</li></ol><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i><br></p><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;201905W21 Share&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TODO with Mac Menubar</title>
    <link href="https://foreti.me/2019/05/17/bitbar-with-todo/"/>
    <id>https://foreti.me/2019/05/17/bitbar-with-todo/</id>
    <published>2019-05-17T12:18:43.000Z</published>
    <updated>2019-07-27T02:14:09.285Z</updated>
    
    <content type="html"><![CDATA[<p>BitBar 使我工作更快乐！</p><a id="more"></a><hr><p>最近觉得每天的计划总是完不成，明明也不多，但是很容易被其他事情干扰。我一直不喜欢用日程表来排每天的事情，但我很喜欢给自己制定一个 TODO 列表，这个列表包含了短期内要做的事情，但不限于某一天或者某一个小时，不至于太细致，让自己经常不能按时完成，获得过多的挫败感。</p><p>我希望的展现形式是在电脑桌面上时刻可以看到的，这样的话，就不能用各种流行的 GTD 工具。像 OmniFocus、Microsoft To-Do等，都需要先打开再确认的过程。</p><p>像桌面便签也不太好，因为平时是打开了不同的应用铺满了桌面。</p><p>于是想到了菜单栏上可以做点事情。</p><p>找了一圈，Mac平台上的 TODO in menubar 的应用还不少，最合心意的是 <a href="https://www.mactodo.app/?ref=producthunt" target="_blank" rel="noopener">TODO Menubar</a>。<br><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190517153927.png" alt="TODO Menubar"><br>但是它收费…</p><p>还有一个<a href="https://itunes.apple.com/us/app/doo-get-things-done/id1066322956?mt=8" target="_blank" rel="noopener">Doo</a>，也收费，而且太花哨了，好看但不直观。<br><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190517160402.png" alt></p><p>在 Github 上也搜到了一个<a href="https://github.com/Praseetha-KR/postit-todo" target="_blank" rel="noopener">postit-todo</a>，不错但是用起来太卡，而且关闭后重新打开加载数据很慢。<br><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190517160158.png" alt></p><p>最后，在 AppSo 的一篇推 TODO Menubar 的文章评论里看到了 <a href="https://getbitbar.com/" target="_blank" rel="noopener">BitBar</a>。</p><p>BitBar 是一个可以编写脚本，将你能想到的任何信息，放到 menubar 里显示。</p><p>我下载 BitBar，并且在它的插件市场里找了一个 TODO 的<a href="https://raw.githubusercontent.com/matryer/bitbar-plugins/master/Tools/todolist.2m.sh" target="_blank" rel="noopener">脚本</a>。这个脚本实现的是在 Mac 的原生 Reminder 应用里指定一个提醒列表，将这个列表里的提醒事项放到菜单栏显示，并且只显示第一个，在菜单栏点击这个提醒事项，可以将它在 Reminder 里标记为完成。觉得这个脚本功能有点弱，还差点我要的东西。</p><p>顺着这个脚本的思路，边查 AppleScript 的语法边修改，最后改成了我要的样子，和 TODO Menubar 有点像。菜单栏显示完成情况，子菜单显示具体的 TODO，点击 TODO 可以标记为完成。</p><p>脚本如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">reminder=$(osascript -e <span class="string">'tell application "Reminders"</span></span><br><span class="line"><span class="string">set activeReminders to (reminders of list "测试" whose completed is true)</span></span><br><span class="line"><span class="string">set numOfActiveReminders to (count of activeReminders)</span></span><br><span class="line"><span class="string">set allReminders to (reminders of list "测试")</span></span><br><span class="line"><span class="string">set numOfAllReminders to (count of allReminders)</span></span><br><span class="line"><span class="string">set result to ((numOfActiveReminders as string) &amp; "/" &amp; numOfAllReminders as string)</span></span><br><span class="line"><span class="string">return result</span></span><br><span class="line"><span class="string">end tell'</span>)</span><br><span class="line"></span><br><span class="line">todolist=$(osascript -e <span class="string">'tell application "Reminders"</span></span><br><span class="line"><span class="string">set todos to (reminders of list "测试" whose completed is false)</span></span><br><span class="line"><span class="string">set newlist to &#123;&#125;</span></span><br><span class="line"><span class="string">repeat with todo in todos</span></span><br><span class="line"><span class="string">copy (name of todo as text) to the end of the newlist</span></span><br><span class="line"><span class="string">end repeat</span></span><br><span class="line"><span class="string">return newlist</span></span><br><span class="line"><span class="string">end tell'</span>)</span><br><span class="line">todolist=<span class="variable">$&#123;todolist// /&#125;</span> <span class="comment"># 删除空格</span></span><br><span class="line">todolist=<span class="variable">$&#123;todolist//,/ &#125;</span> <span class="comment"># 转换 AppleScript 的 list 为 shell 的 list 格式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">"done"</span> ]; <span class="keyword">then</span></span><br><span class="line">osascript -e <span class="string">"tell application \"Reminders\"</span></span><br><span class="line"><span class="string">set activeReminders to (reminders of list \"测试\" whose completed is false)</span></span><br><span class="line"><span class="string">repeat with todo in activeReminders</span></span><br><span class="line"><span class="string">if (name of todo as text) is equal to \"<span class="variable">$2</span>\" then</span></span><br><span class="line"><span class="string">tell todo</span></span><br><span class="line"><span class="string">set completed to true</span></span><br><span class="line"><span class="string">end tell</span></span><br><span class="line"><span class="string">end if</span></span><br><span class="line"><span class="string">end repeat</span></span><br><span class="line"><span class="string">end tell"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">"open"</span> ]; <span class="keyword">then</span></span><br><span class="line">osascript -e <span class="string">'tell application "Reminders" to activate'</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"✔︎ <span class="variable">$reminder</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Open Reminder| bash='<span class="variable">$0</span>' param1='open' terminal=false"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---"</span></span><br><span class="line"><span class="keyword">for</span> loop <span class="keyword">in</span> <span class="variable">$todolist</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;loop%*,&#125;</span> | bash='<span class="variable">$0</span>' param1='done' param2='<span class="variable">$&#123;loop%*,&#125;</span>' terminal=false refresh=true"</span></span><br><span class="line"><span class="keyword">done</span> | sort</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"↻ Refresh| terminal=false refresh=true"</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://foreti.me/imgplace/2019/20190523204949.png" alt></p><p>对应在 Reminder 中的任务列表</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190523150457.png" alt></p><p>如果你细心点，可以发现第 3 条 todo，<code>提交 commit</code> 在菜单栏中变成了 <code>提交commit</code>，这是由于 shell 中的数组元素以空格区分，为了避免1 个 todo 显示在两行，我将每个 todo 中的空格都去掉了。</p><p>这样，每天只用维护自己的 Reminder 的任务列表就行了。如果很多天过去，任务总数太多，可以再创建一个 Archive 提醒列表，将过去完成的任务都移动到里面。</p><p>快乐的写 TODO 吧！</p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i><br></p><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BitBar 使我工作更快乐！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tool" scheme="https://foreti.me/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>倾斜人生 - 1</title>
    <link href="https://foreti.me/2019/05/15/tip1/"/>
    <id>https://foreti.me/2019/05/15/tip1/</id>
    <published>2019-05-15T14:15:05.000Z</published>
    <updated>2019-07-27T02:14:09.300Z</updated>
    
    <content type="html"><![CDATA[<p>201905W20 Tip</p><a id="more"></a><hr><h2 id="Hexo-tag-shortcut-in-hollow"><a href="#Hexo-tag-shortcut-in-hollow" class="headerlink" title="Hexo tag shortcut in hollow"></a>Hexo tag shortcut in hollow</h2><p>验证 Hexo 的内置标签在 hollow 中可使用的部分。</p><h3 id="Block-Quote"><a href="#Block-Quote" class="headerlink" title="Block Quote"></a>Block Quote</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class="line">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote><h3 id="Code-Block"><a href="#Code-Block" class="headerlink" title="Code Block"></a>Code Block</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock _.compact http://underscorejs.org/#compact Underscore.js %&#125;</span><br><span class="line">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</span><br><span class="line">=&gt; [1, 2, 3]</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>_.compact</span><a href="http://underscorejs.org/#compact" target="_blank" rel="noopener">Underscore.js</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</span><br><span class="line">=&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure><h3 id="YouTube"><a href="#YouTube" class="headerlink" title="YouTube"></a>YouTube</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% youtube video_id %&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Mysql-命令"><a href="#Mysql-命令" class="headerlink" title="Mysql 命令"></a>Mysql 命令</h2><p>查询数据库编码方式：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'character%'</span>;</span><br></pre></td></tr></table></figure></p><p>将查询语句结果输出到文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h127.0.0.1 -P3306 -uroot -Ddatabases -p -e <span class="string">"select * from table"</span> &gt; file</span><br></pre></td></tr></table></figure></p><hr><h2 id="将-bash-换成-zsh-amp-oh-my-zsh"><a href="#将-bash-换成-zsh-amp-oh-my-zsh" class="headerlink" title="将 bash 换成 zsh &amp; oh my zsh"></a>将 bash 换成 zsh &amp; oh my zsh</h2><p>一旦你使用了 zsh 和 oh my zsh，你就很难换回 bash 了。</p><p>如何在服务器上使用 zsh 和 oh my zsh？</p><p><strong>第一步：</strong></p><p>以 Ubuntu 为例，首先安装 zsh。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install zsh</span><br></pre></td></tr></table></figure></p><p>然后将默认 Shell 设置为 zsh，有可能路径是 <code>/bin/zsh</code><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /usr/bin/zsh</span><br></pre></td></tr></table></figure></p><p>检查。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure></p><p>第二步：</p><p>安装 oh my zsh。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure></p><p>第三步：</p><p>配置插件，命令提示和高亮<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure></p><p>修改 <code>vim .zshrc</code>，找到 <code>plugins=(git)</code> 改为 <code>plugins=(git zsh-autosuggestions zsh-syntax-highlighting)</code></p><p>并修改主题为 <code>ZSH_THEME=&quot;agnoster&quot;</code>。</p><p>然后退出保存。</p><p>这个主题的路径前缀太长，编辑<code>~/.oh-my-zsh/themes/agnoster.zsh-theme</code>，将 <code>build_prompt</code> 下的 <code>prompt_context</code> 注释掉。</p><p>最后<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .zshrc</span><br></pre></td></tr></table></figure></p><p>如果这时候发现显示有些乱码，可以换一下字体，如果没有可用的字体，可以安装powerline的字体。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/powerline/fonts.git</span><br><span class="line">cd fonts</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure></p><p>重连一下服务器，打开新世界。</p><hr><h2 id="印象笔记-Markdown-支持什么快捷键？"><a href="#印象笔记-Markdown-支持什么快捷键？" class="headerlink" title="印象笔记 Markdown 支持什么快捷键？"></a>印象笔记 Markdown 支持什么快捷键？</h2><p><strong>Mac 端</strong></p><table><thead><tr><th>Command</th><th>Shortcut</th></tr></thead><tbody><tr><td>新建 Markdown 笔记</td><td>CMD+D</td></tr><tr><td>粗体</td><td>CMD+B</td></tr><tr><td>斜体</td><td>CMD+I</td></tr><tr><td>删除线</td><td>CMD+S</td></tr><tr><td>分隔线</td><td>CMD+L</td></tr><tr><td>编号列表</td><td>CMD+Shift+O</td></tr><tr><td>项目符号列表</td><td>CMD+Shift+U</td></tr><tr><td>插入待办事项</td><td>CMD+Shift+T</td></tr><tr><td>代码块</td><td>CMD+Shift+P</td></tr><tr><td>撤销</td><td>CMD+Z</td></tr><tr><td>在笔记内搜索</td><td>CMD+F</td></tr></tbody></table><p><strong>Windows 端</strong></p><table><thead><tr><th>Command</th><th>Shortcut</th></tr></thead><tbody><tr><td>新建 Markdown 笔记</td><td>Ctrl+Alt+D</td></tr><tr><td>粗体</td><td>Ctrl+B</td></tr><tr><td>斜体</td><td>Ctrl+I</td></tr><tr><td>删除线</td><td>Ctrl+T</td></tr><tr><td>下划线</td><td>Ctrl+U</td></tr><tr><td>分隔线</td><td>Ctrl + Shift + -</td></tr><tr><td>编号列表</td><td>Ctrl + Shift + O</td></tr><tr><td>项目符号列表</td><td>Ctrl + Shift + W</td></tr><tr><td>插入待办事项</td><td>Ctrl + Shift + C</td></tr><tr><td>代码块</td><td>Ctrl+Shift+L</td></tr><tr><td>插入日期和时间</td><td>Alt + Shift + D</td></tr><tr><td>撤销</td><td>Ctrl+Z</td></tr><tr><td>在笔记内搜索</td><td>Ctrl+F</td></tr></tbody></table><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;201905W20 Tip&lt;/p&gt;
    
    </summary>
    
    
      <category term="tip" scheme="https://foreti.me/tags/tip/"/>
    
  </entry>
  
  <entry>
    <title>倾斜人生 - 0</title>
    <link href="https://foreti.me/2019/05/06/tip0/"/>
    <id>https://foreti.me/2019/05/06/tip0/</id>
    <published>2019-05-06T16:15:05.000Z</published>
    <updated>2019-07-27T02:14:09.300Z</updated>
    
    <content type="html"><![CDATA[<p>201905W19 Tip</p><a id="more"></a><hr><p>在 ARTS 系列中，除了 Algorithm外，Tip 似乎也不大好作为博客的形式来展现。但是 Leetcode 题解还能发到 Github repo 中作为记录，Tip 该怎么办？<br>于是想把所有的 Tip 作为一个系列发出，名 「倾斜人生」，取自 “tip” 的「倾斜」之意。</p><hr><h2 id="下载服务器文件"><a href="#下载服务器文件" class="headerlink" title="下载服务器文件"></a>下载服务器文件</h2><p>一般在自己服务器上传下载文件，直接用 <code>rz</code> <code>sz</code> 比较方便，但是文件较大时，速度较慢而且容易失败。这时可以使用 Python 启动简单的文件服务：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python2</span></span><br><span class="line">python -m SimpleHTTPServer 8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># python3</span></span><br><span class="line">python3 -m http.server 8080</span><br></pre></td></tr></table></figure></p><p>而且 SimpleHTTPServer 服务有个好处是可以用在暂时需要给其他人一个文件下载，但又不想给出登录权限的场景。</p><p>如果需要上传文件，可以下载运行这个 <a href="https://gist.githubusercontent.com/fakeYanss/22ab76030c0633835440e86b5b37b572/raw/8765e34ffe1a981b7d7911bdc17380bb85356f39/SimpleHTTPServerWithUpload.py" target="_blank" rel="noopener">Python 文件</a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https://gist.githubusercontent.com/fakeYanss/22ab76030c0633835440e86b5b37b572/raw/8765e34ffe1a981b7d7911bdc17380bb85356f39/SimpleHTTPServerWithUpload.py -O</span><br><span class="line">python SimpleHTTPServerWithUpload.py 8080</span><br></pre></td></tr></table></figure></p><hr><h2 id="Linux-文件内容查询统计"><a href="#Linux-文件内容查询统计" class="headerlink" title="Linux 文件内容查询统计"></a>Linux 文件内容查询统计</h2><p>最近遇到的一个事儿，需要在一堆日志文件中统计出包含指定字符串的行内容。首先日志文件是按天存储的，每天的日志文件会按 50MB 大小进行分割，这样分下来，一天的日志文件有 2000 至 3000 个，总共 100+GB。</p><p>debug 级别的日志存放路径在 <code>/home/user/project/log/debug/</code> 下，我们先进入这个路径下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/user/project/<span class="built_in">log</span>/debug/peoject-name.debug.log-2019-05-05</span><br></pre></td></tr></table></figure></p><p>下面是 2000+ 个日志文件，查看一下 <code>ls</code> ：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019-05-05.1000.debug.log  2019-05-05.2000.debug.log  2019-05-05.3000.debug.log</span><br><span class="line">2019-05-05.1001.debug.log  2019-05-05.2001.debug.log  2019-05-05.3001.debug.log</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p><p>需要找到这一天的日志里，关于 <code>[aaaa]bbbb</code> 相关的内容，于是在当前目录输入：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -name <span class="string">'*.log'</span> | xargs grep <span class="string">'\[aaaa\]bbbb'</span></span><br></pre></td></tr></table></figure></p><p>由于文件太多，等了一会才有了输出，确认可以查到相关信息，于是将输出信息存到文件里，担心输出的文件太大，将查询命令分批执行：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/user/project/tmp</span><br><span class="line">find -name <span class="string">'2019-05-05.1*'</span> | xargs grep <span class="string">'\[aaaa\]bbbb'</span> &gt; /home/user/project/tmp/res-1.log</span><br><span class="line">find -name <span class="string">'2019-05-05.2*'</span> | xargs grep <span class="string">'\[aaaa\]bbbb'</span> &gt; /home/user/project/tmp/res-2.log</span><br><span class="line">find -name <span class="string">'2019-05-05.3*'</span> | xargs grep <span class="string">'\[aaaa\]bbbb'</span> &gt; /home/user/project/tmp/res-3.log</span><br></pre></td></tr></table></figure></p><p>等待时间较长，最后查看生成的文件，<code>ll /home/user/project/tmp</code>：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-rw-rw-r-- 1 user user 20944335 May  5 14:08 res-1.log</span><br><span class="line">-rw-rw-r-- 1 user work 54233966 May  5 13:25 res-2.log</span><br><span class="line">-rw-rw-r-- 1 user user 70104519 May  5 13:36 res-3.log</span><br></pre></td></tr></table></figure></p><p>提取出需要的日志后，可以再按内容进行下一步的操作，比如统计或排错等。</p><hr><h2 id="Mockito-使用"><a href="#Mockito-使用" class="headerlink" title="Mockito 使用"></a>Mockito 使用</h2><p><a href="https://segmentfault.com/a/1190000006746409" target="_blank" rel="noopener">Mockito</a>。</p><p>Mockito 多在 Java 项目单测中使用，可以说 Junit + Mockito 是单元测试的利器。Mockito 可以方便的 mock 对象，避免外部依赖对单测的影响。</p><hr><h2 id="私人网盘-FileBrowser"><a href="#私人网盘-FileBrowser" class="headerlink" title="私人网盘 - FileBrowser"></a>私人网盘 - FileBrowser</h2><p><a href="https://github.com/filebrowser/filebrowser" target="_blank" rel="noopener">FileBrowser</a></p><p>利用 FileBrowser 可以在服务器上搭建私人网盘，提供了基础的文件服务，以及用户权限管理。开发者提供了自动搭建脚本，搭建的流程十分快捷。</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/filebrowser-case.gif" alt></p><hr><h2 id="MySQL技巧"><a href="#MySQL技巧" class="headerlink" title="MySQL技巧"></a>MySQL技巧</h2><p>查询指定数据库每个表的行数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  table_name,</span><br><span class="line">  table_rows</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  INFORMATION_SCHEMA.TABLES</span><br><span class="line"><span class="keyword">WHERE</span> TABLE_SCHEMA = <span class="string">'database_name'</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="两个网页头部背景图"><a href="#两个网页头部背景图" class="headerlink" title="两个网页头部背景图"></a>两个网页头部背景图</h2><p>OverWatch 的 Mercy 和 D.va，都是我喜欢的角色，可以作为网站的头部背景使用。<br><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/headback.jpg" alt><br><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/headback2.jpg" alt></p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;201905W19 Tip&lt;/p&gt;
    
    </summary>
    
    
      <category term="tip" scheme="https://foreti.me/tags/tip/"/>
    
  </entry>
  
  <entry>
    <title>2019年04月度总结</title>
    <link href="https://foreti.me/2019/04/30/2019-04-review/"/>
    <id>https://foreti.me/2019/04/30/2019-04-review/</id>
    <published>2019-04-30T12:59:17.000Z</published>
    <updated>2019-07-27T02:14:09.285Z</updated>
    
    <content type="html"><![CDATA[<p>后脚跟轻轻一提，只踏出校门的最后一步，从此便是江湖再见。</p><a id="more"></a><hr><iframe src="https://open.spotify.com/embed/track/0V6mWe5eWcVk6C0Y5ZQBt5" width="300" height="80" frameborder="0" allowtransparency="true" allow="encrypted-media"></iframe><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>以往做过的项目，前后端往往是对应的，在前端能看到的一个功能，往往在后端能找到对应的支撑，我认为这也是遵从一种所见即所得的理念。但是现在的着手的项目，后端的东西似乎比前端要重的多。整个后端代码，除了前端可见的功能以外，还包括了很多鉴权的配置、内部用户的自定义功能。尤其是使用量上大部分是来自内部用户，这造成整个项目的后端代码多出了很多对内专用的部分，而这一部分在历史开发中是添砖加瓦式的，一段一段的往里加功能方法、条件判断，日积月累的让程序的复杂性无限提升。恰逢此时我的 mentor 就要离职，新加入的成员也和我一样处于万脸懵逼的状态。现有功能的维护都让人头疼，并且还有一些新功能的开发，期间的各个状态需要确认和商讨。</p><p>…</p><p>项目还是难以维护，几个新功能的开发磕磕碰碰，上线困难。好在组内的成员和睦友爱，相互间的鼓励让人觉得不是太难熬。期待这一阵子的功能开发结束后，进入新的阶段。</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>离开学校的时候没有太深的感慨，只觉可以抛弃过往的身份，开始自力更生的全新阶段，只觉这是我人生中值得庆祝的时刻。没想到两个月过去（我毕业前就已离校），越来越想念在学校的生活。尽管宿舍的床那么窄那么硬，洗漱间热水限时开放，一切都不那么方便，但就是想念。想念每个不设闹钟的早晨；想念每个午后的阳台上，近处和远处的不知名老树一棵棵排列着，阳光从满树的叶隙间穿过，投射在地上、门上、鞋架上、木椅子上；想念每个晚上和室友开黑的笑骂声；想念食堂的各式饭菜，也想念小吃街的炸鸡和煎饼。</p><p>后脚跟轻轻一提，只踏出校门的最后一步，从此便是江湖再见。</p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>感谢老婆的好运气，我们租到一个很不错的租房，容得下我们的生活和乐趣。从1月来到北京，经过短暂的适应期后，体会到集体供暖的「优越性」，在家是不用穿什么厚衣服的。我在玩游戏的时候，腋下会出汗，不知道是不是个例，总之不用裹上羽绒服或者厚睡衣，会舒服很多。</p><p>房东在离开前留下了几瓶酒，查了一番后才知道是白朗姆、金酒这些基酒，浪费了也不好，总得想办法喝掉吧。于是学了些调酒的基础知识，又添置了一些便宜酒具，摆拍了一些调好的酒的照片后，发现还挺好喝的。就这样，调酒成为我为数不多的爱好之一。准备好冰块，按顺序加好每个材料，再搅拌或摇晃，一杯鸡尾酒酒完成了，也不用上升到人生哲理的高度，只是简单的好喝。</p><p>这个月喝着各式自调鸡尾酒在塞尔达里游晃是我最大的快乐了。</p><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><p>五一回家，大吃大喝。老父亲准备了一大盆田螺养了大半个月，日思夜想。</p><p>期待五月开始新的阶段。</p><!-- more --><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;后脚跟轻轻一提，只踏出校门的最后一步，从此便是江湖再见。&lt;/p&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://foreti.me/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>中文文案排版指北</title>
    <link href="https://foreti.me/2019/04/27/chinese-copywriting-guidelines/"/>
    <id>https://foreti.me/2019/04/27/chinese-copywriting-guidelines/</id>
    <published>2019-04-27T06:38:34.000Z</published>
    <updated>2019-07-27T02:14:09.285Z</updated>
    
    <content type="html"><![CDATA[<p>统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。</p><a id="more"></a><hr><p>在今天之前，我都在刻意地使用半角符号，因为在中文输入的时候，想输入一个 <kbd>`</kbd> 或者 <kbd>/</kbd> 字符，是很麻烦的事情，来回切换输入法让我想立刻停下打字，关掉电脑。</p><p>但是这篇文章确实说的很好，而且按照文档的排版，表现形式看起来非常好，我想记在这里，帮助我刻意练习一下这样的排版方式。</p><p>下面是原文内容，<a href="https://github.com/mzlogin/chinese-copywriting-guidelines" target="_blank" rel="noopener">出自 mzlogin</a>。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><!-- vim-markdown-toc GFM --><ul><li><a href="#目录">目录</a></li><li><a href="#空格">空格</a><ul><li><a href="#中英文之间需要增加空格">中英文之间需要增加空格</a></li><li><a href="#中文与数字之间需要增加空格">中文与数字之间需要增加空格</a></li><li><a href="#数字与单位之间无需增加空格">数字与单位之间无需增加空格</a></li><li><a href="#全角标点与其他字符之间不加空格">全角标点与其他字符之间不加空格</a></li><li><a href="#-ms-text-autospace-to-the-rescue"><code>-ms-text-autospace</code> to the rescue?</a></li></ul></li><li><a href="#标点符号">标点符号</a><ul><li><a href="#不重复使用标点符号">不重复使用标点符号</a></li></ul></li><li><a href="#全角和半角">全角和半角</a><ul><li><a href="#使用全角中文标点">使用全角中文标点</a></li><li><a href="#数字使用半角字符">数字使用半角字符</a></li><li><a href="#遇到完整的英文整句特殊名词其內容使用半角标点">遇到完整的英文整句、特殊名词，其內容使用半角标点</a></li></ul></li><li><a href="#名词">名词</a><ul><li><a href="#专有名词使用正确的大小写">专有名词使用正确的大小写</a></li><li><a href="#不要使用不地道的缩写">不要使用不地道的缩写</a></li></ul></li><li><a href="#争议">争议</a><ul><li><a href="#链接之间增加空格">链接之间增加空格</a></li><li><a href="#简体中文使用直角引号">简体中文使用直角引号</a></li></ul></li><li><a href="#工具">工具</a></li><li><a href="#谁在这样做">谁在这样做？</a></li><li><a href="#参考文献">参考文献</a></li></ul><!-- vim-markdown-toc --><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。</p><p>与大家共勉之。」——<a href="https://github.com/vinta/pangu.js" target="_blank" rel="noopener">vinta/paranoid-auto-spacing</a></p><h3 id="中英文之间需要增加空格"><a href="#中英文之间需要增加空格" class="headerlink" title="中英文之间需要增加空格"></a>中英文之间需要增加空格</h3><p>正确：</p><blockquote><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。</p></blockquote><p>错误：</p><blockquote><p>在LeanCloud上，数据存储是围绕<code>AVObject</code>进行的。</p></blockquote><blockquote><p>在 LeanCloud上，数据存储是围绕<code>AVObject</code> 进行的。</p></blockquote><p>完整的正确用法：</p><blockquote><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。每个 <code>AVObject</code> 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 <code>AVObject</code> 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。</p></blockquote><p>例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。</p><h3 id="中文与数字之间需要增加空格"><a href="#中文与数字之间需要增加空格" class="headerlink" title="中文与数字之间需要增加空格"></a>中文与数字之间需要增加空格</h3><p>正确：</p><blockquote><p>今天出去买菜花了 5000 元。</p></blockquote><p>错误：</p><blockquote><p>今天出去买菜花了 5000元。</p></blockquote><blockquote><p>今天出去买菜花了5000元。</p></blockquote><h3 id="数字与单位之间无需增加空格"><a href="#数字与单位之间无需增加空格" class="headerlink" title="数字与单位之间无需增加空格"></a>数字与单位之间无需增加空格</h3><p>正确：</p><blockquote><p>我家的光纤入户宽带有 10Gbps，SSD 一共有 10TB。</p></blockquote><p>错误：</p><blockquote><p>我家的光纤入户宽带有 10 Gbps，SSD 一共有 20 TB。</p></blockquote><p>另外，度／百分比与数字之间不需要增加空格：</p><p>正确：</p><blockquote><p>今天是 233° 的高温。</p></blockquote><blockquote><p>新 MacBook Pro 有 15% 的 CPU 性能提升。</p></blockquote><p>错误：</p><blockquote><p>今天是 233 ° 的高温。</p></blockquote><blockquote><p>新 MacBook Pro 有 15 % 的 CPU 性能提升。</p></blockquote><h3 id="全角标点与其他字符之间不加空格"><a href="#全角标点与其他字符之间不加空格" class="headerlink" title="全角标点与其他字符之间不加空格"></a>全角标点与其他字符之间不加空格</h3><p>正确：</p><blockquote><p>刚刚买了一部 iPhone，好开心！</p></blockquote><p>错误：</p><blockquote><p>刚刚买了一部 iPhone ，好开心！</p></blockquote><h3 id="ms-text-autospace-to-the-rescue"><a href="#ms-text-autospace-to-the-rescue" class="headerlink" title="-ms-text-autospace to the rescue?"></a><code>-ms-text-autospace</code> to the rescue?</h3><p>Microsoft 有个 <a href="http://msdn.microsoft.com/en-us/library/ie/ms531164(v=vs.85" target="_blank" rel="noopener"><code>-ms-text-autospace</code></a>.aspx) 的 CSS 属性可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如 OS X、iOS 的用户界面目前并不存在这个特性，所以请继续保持随手加空格的习惯。</p><h2 id="标点符号"><a href="#标点符号" class="headerlink" title="标点符号"></a>标点符号</h2><h3 id="不重复使用标点符号"><a href="#不重复使用标点符号" class="headerlink" title="不重复使用标点符号"></a>不重复使用标点符号</h3><p>正确：</p><blockquote><p>德国队竟然战胜了巴西队！</p></blockquote><blockquote><p>她竟然对你说「喵」？！</p></blockquote><p>错误：</p><blockquote><p>德国队竟然战胜了巴西队！！</p></blockquote><blockquote><p>德国队竟然战胜了巴西队！！！！！！！！</p></blockquote><blockquote><p>她竟然对你说「喵」？？！！</p></blockquote><blockquote><p>她竟然对你说「喵」？！？！？？！！</p></blockquote><h2 id="全角和半角"><a href="#全角和半角" class="headerlink" title="全角和半角"></a>全角和半角</h2><p>不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『<a href="http://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2" target="_blank" rel="noopener">全角和半角</a>』。</p><h3 id="使用全角中文标点"><a href="#使用全角中文标点" class="headerlink" title="使用全角中文标点"></a>使用全角中文标点</h3><p>正确：</p><blockquote><p>嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！</p></blockquote><blockquote><p>核磁共振成像（NMRI）是什么原理都不知道？JFGI！</p></blockquote><p>错误：</p><blockquote><p>嗨! 你知道嘛? 今天前台的小妹跟我说 “喵” 了哎!</p></blockquote><blockquote><p>嗨!你知道嘛?今天前台的小妹跟我说”喵”了哎!</p></blockquote><blockquote><p>核磁共振成像 (NMRI) 是什么原理都不知道? JFGI!</p></blockquote><blockquote><p>核磁共振成像(NMRI)是什么原理都不知道?JFGI!</p></blockquote><h3 id="数字使用半角字符"><a href="#数字使用半角字符" class="headerlink" title="数字使用半角字符"></a>数字使用半角字符</h3><p>正确：</p><blockquote><p>这件蛋糕只卖 1000 元。</p></blockquote><p>错误：</p><blockquote><p>这件蛋糕只卖 １０００ 元。</p></blockquote><p>例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全角数字的。</p><h3 id="遇到完整的英文整句、特殊名词，其內容使用半角标点"><a href="#遇到完整的英文整句、特殊名词，其內容使用半角标点" class="headerlink" title="遇到完整的英文整句、特殊名词，其內容使用半角标点"></a>遇到完整的英文整句、特殊名词，其內容使用半角标点</h3><p>正确：</p><blockquote><p>乔布斯那句话是怎么说的？「Stay hungry, stay foolish.」</p></blockquote><blockquote><p>推荐你阅读《Hackers &amp; Painters: Big Ideas from the Computer Age》，非常的有趣。</p></blockquote><p>错误：</p><blockquote><p>乔布斯那句话是怎么说的？「Stay hungry，stay foolish。」</p></blockquote><blockquote><p>推荐你阅读《Hackers＆Painters：Big Ideas from the Computer Age》，非常的有趣。</p></blockquote><h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><h3 id="专有名词使用正确的大小写"><a href="#专有名词使用正确的大小写" class="headerlink" title="专有名词使用正确的大小写"></a>专有名词使用正确的大小写</h3><p>大小写相关用法原属于英文书写范畴，不属于本 wiki 讨论內容，在这里只对部分易错用法进行简述。</p><p>正确：</p><blockquote><p>使用 GitHub 登录</p></blockquote><blockquote><p>我们的客户有 GitHub、Foursquare、Microsoft Corporation、Google、Facebook, Inc.。</p></blockquote><p>错误：</p><blockquote><p>使用 github 登录</p></blockquote><blockquote><p>使用 GITHUB 登录</p></blockquote><blockquote><p>使用 Github 登录</p></blockquote><blockquote><p>使用 gitHub 登录</p></blockquote><blockquote><p>使用 gｲんĤЦ8 登录</p></blockquote><blockquote><p>我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。</p></blockquote><blockquote><p>我们的客户有 GITHUB、FOURSQUARE、MICROSOFT CORPORATION、GOOGLE、FACEBOOK, INC.。</p></blockquote><blockquote><p>我们的客户有 Github、FourSquare、MicroSoft Corporation、Google、FaceBook, Inc.。</p></blockquote><blockquote><p>我们的客户有 gitHub、fourSquare、microSoft Corporation、google、faceBook, Inc.。</p></blockquote><blockquote><p>我们的客户有 gｲんĤЦ8、ｷouЯƧquﾑгє、๓เςг๏ร๏Ŧt ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃëв๏๏к, IПᄃ.。</p></blockquote><p>注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，HTML 中请使用标准的大小写规范进行书写；并通过 <code>text-transform: uppercase;</code>／<code>text-transform: lowercase;</code> 对表现形式进行定义。</p><h3 id="不要使用不地道的缩写"><a href="#不要使用不地道的缩写" class="headerlink" title="不要使用不地道的缩写"></a>不要使用不地道的缩写</h3><p>正确：</p><blockquote><p>我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。</p></blockquote><p>错误：</p><blockquote><p>我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。</p></blockquote><h2 id="争议"><a href="#争议" class="headerlink" title="争议"></a>争议</h2><p>以下用法略带有个人色彩，即：无论是否遵循下述规则，从语法的角度来讲都是<strong>正确</strong>的。</p><h3 id="链接之间增加空格"><a href="#链接之间增加空格" class="headerlink" title="链接之间增加空格"></a>链接之间增加空格</h3><p>用法：</p><blockquote><p>请 <a href="#">提交一个 issue</a> 并分配给相关同事。</p></blockquote><blockquote><p>访问我们网站的最新动态，请 <a href="#">点击这里</a> 进行订阅！</p></blockquote><p>对比用法：</p><blockquote><p>请<a href="#">提交一个 issue</a> 并分配给相关同事。</p></blockquote><blockquote><p>访问我们网站的最新动态，请<a href="#">点击这里</a>进行订阅！</p></blockquote><h3 id="简体中文使用直角引号"><a href="#简体中文使用直角引号" class="headerlink" title="简体中文使用直角引号"></a>简体中文使用直角引号</h3><p>用法：</p><blockquote><p>「老师，『有条不紊』的『紊』是什么意思？」</p></blockquote><p>对比用法：</p><blockquote><p>“老师，‘有条不紊’的‘紊’是什么意思？”</p></blockquote><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><table><thead><tr><th>仓库</th><th>语言</th></tr></thead><tbody><tr><td><a href="https://github.com/vinta/paranoid-auto-spacing" target="_blank" rel="noopener">vinta/paranoid-auto-spacing</a></td><td>JavaScript</td></tr><tr><td><a href="https://github.com/huei90/pangu.node" target="_blank" rel="noopener">huei90/pangu.node</a></td><td>Node.js</td></tr><tr><td><a href="https://github.com/huacnlee/auto-correct" target="_blank" rel="noopener">huacnlee/auto-correct</a></td><td>Ruby</td></tr><tr><td><a href="https://github.com/sparanoid/space-lover" target="_blank" rel="noopener">sparanoid/space-lover</a></td><td>PHP (WordPress)</td></tr><tr><td><a href="https://github.com/NauxLiu/auto-correct" target="_blank" rel="noopener">nauxliu/auto-correct</a></td><td>PHP</td></tr><tr><td><a href="https://github.com/ricoa/copywriting-correct" target="_blank" rel="noopener">ricoa/copywriting-correct</a></td><td>PHP</td></tr><tr><td><a href="https://github.com/hotoo/pangu.vim" target="_blank" rel="noopener">hotoo/pangu.vim</a></td><td>Vim</td></tr><tr><td><a href="https://github.com/sparanoid/grunt-auto-spacing" target="_blank" rel="noopener">sparanoid/grunt-auto-spacing</a></td><td>Node.js (Grunt)</td></tr><tr><td><a href="https://github.com/hjiang/scripts/blob/master/add-space-between-latin-and-cjk" target="_blank" rel="noopener">hjiang/scripts/add-space-between-latin-and-cjk</a></td><td>Python</td></tr></tbody></table><h2 id="谁在这样做？"><a href="#谁在这样做？" class="headerlink" title="谁在这样做？"></a>谁在这样做？</h2><table><thead><tr><th>网站</th><th>文案</th><th>UGC</th></tr></thead><tbody><tr><td><a href="http://www.apple.com/cn/" target="_blank" rel="noopener">Apple 中国</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.apple.com/hk/" target="_blank" rel="noopener">Apple 香港</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.apple.com/tw/" target="_blank" rel="noopener">Apple 台湾</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.microsoft.com/zh-cn/" target="_blank" rel="noopener">Microsoft 中国</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.microsoft.com/zh-hk/" target="_blank" rel="noopener">Microsoft 香港</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.microsoft.com/zh-tw/" target="_blank" rel="noopener">Microsoft 台湾</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="https://www.zhihu.com/" target="_blank" rel="noopener">知乎</a></td><td>Yes</td><td>部分用户达成</td></tr><tr><td><a href="https://www.v2ex.com/" target="_blank" rel="noopener">V2EX</a></td><td>Yes</td><td>Yes</td></tr><tr><td><a href="https://segmentfault.com/" target="_blank" rel="noopener">SegmentFault</a></td><td>Yes</td><td>部分用户达成</td></tr><tr><td><a href="http://apple4us.com/" target="_blank" rel="noopener">Apple4us</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="https://www.wandoujia.com/" target="_blank" rel="noopener">豌豆荚</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="https://ruby-china.org/" target="_blank" rel="noopener">Ruby China</a></td><td>Yes</td><td>标题达成</td></tr><tr><td><a href="https://phphub.org/" target="_blank" rel="noopener">PHPHub</a></td><td>Yes</td><td>标题达成</td></tr><tr><td><a href="http://sspai.com/" target="_blank" rel="noopener">少数派</a></td><td>Yes</td><td>N/A</td></tr></tbody></table><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="http://grammar.about.com/od/punctuationandmechanics/a/Guidelines-For-Using-Capital-Letters.htm" target="_blank" rel="noopener">Guidelines for Using Capital Letters</a></li><li><a href="http://en.wikipedia.org/wiki/Letter_case" target="_blank" rel="noopener">Letter case - Wikipedia</a></li><li><a href="http://www.oxforddictionaries.com/words/punctuation" target="_blank" rel="noopener">Punctuation - Oxford Dictionaries</a></li><li><a href="https://owl.english.purdue.edu/owl/section/1/6/" target="_blank" rel="noopener">Punctuation - The Purdue OWL</a></li><li><a href="http://www.wikihow.com/Use-English-Punctuation-Correctly" target="_blank" rel="noopener">How to Use English Punctuation Corrently - wikiHow</a></li><li><a href="https://zh.opensuse.org/index.php?title=Help:%E6%A0%BC%E5%BC%8F" target="_blank" rel="noopener">格式 - openSUSE</a></li><li><a href="http://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2" target="_blank" rel="noopener">全角和半角 - 维基百科</a></li><li><a href="http://zh.wikipedia.org/wiki/%E5%BC%95%E8%99%9F" target="_blank" rel="noopener">引号 - 维基百科</a></li><li><a href="http://zh.wikipedia.org/wiki/%E7%96%91%E5%95%8F%E9%A9%9A%E5%98%86%E8%99%9F" target="_blank" rel="noopener">疑问惊叹号 - 维基百科</a></li></ul><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你应该知道的10个Git命令</title>
    <link href="https://foreti.me/2019/03/17/10-git-command-you-should-know/"/>
    <id>https://foreti.me/2019/03/17/10-git-command-you-should-know/</id>
    <published>2019-03-17T13:48:24.000Z</published>
    <updated>2019-07-27T02:14:09.285Z</updated>
    
    <content type="html"><![CDATA[<p>201902W11 Review, Git的一些常用且很有用的命令。</p><a id="more"></a><hr><p>原文链接：<a href="https://towardsdatascience.com/10-git-commands-you-should-know-df54bea1595c" target="_blank" rel="noopener">10 Git Commands You Should Know</a></p><p>by Jeff Hale</p><p>在这篇文章，我们将讨论你作为一名开发者、数据科学家或者产品经理应该知道的各种 Git 命令。我们将关注用 Git 进行审查、移除和整理。我们还提供方法去设置 Git 编辑器配置来避免 Vim 和使用 Bash 别名节省时间。</p><p>如果你对基础的 git 命令不熟悉，先读一下我的<a href="https://towardsdatascience.com/learn-enough-git-to-be-useful-281561eef959" target="_blank" rel="noopener">前一篇文章</a>，关于 Git 工作流。</p><p>这里有 10 个要知道的命令和一些公共的标志。每个命令都链接到相关的 Atlassian Bitbucket 指导。</p><h2 id="审查"><a href="#审查" class="headerlink" title="审查"></a>审查</h2><p>让我们先检查变化。</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190430170003.png" alt></p><ul><li><a href="https://www.atlassian.com/git/tutorials/saving-changes/git-diff" target="_blank" rel="noopener">git diff</a> —— 查看本地所有文件的变化。后面加上文件名可以只查看一个文件的变化</li><li><a href="https://www.atlassian.com/git/tutorials/git-log" target="_blank" rel="noopener">git log</a> —— 查看所有的提交历史。也可以用于一个文件，<code>git log -p my_file</code>。输入<code>q</code>退出。</li><li><a href>git balme my_file</a> —— 查看改变了 <em>my_file</em> 的人，以及改变的内容和时间。</li><li><a href="https://www.atlassian.com/git/tutorials/rewriting-history/git-reflog" target="_blank" rel="noopener">git reflog</a> —— 查看变化的日志，直到本地仓库的 HEAD。有利于找到丢失的工作。</li></ul><p>使用 Git 审查事情并不是非常让人困惑。相反的，Git 提供了太多的移除和撤回提交以及文件改动操作。</p><h2 id="撤回"><a href="#撤回" class="headerlink" title="撤回"></a>撤回</h2><p><code>git reset</code>，<code>git checkout</code> 和 <code>git revert</code> 被用于撤回变化对仓库的影响。这些命令可能回难以保持直线。</p><p><code>git reset</code> 和 <code>git checkout</code> 可以被用于提交和单独的文件。<code>git revert</code> 只被用在提交级别。</p><p>如果你正在处理你没有合并到远程多人工作里的本地提交，你可以使用任何这些命令。</p><p>如果你在多人工作里需要消除一个远程分支的提交，<code>git revert</code> 是你的工具。</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190501155041.png" alt="undo"></p><p>每个这些命令都可以加上不同的参数。这里是通用的用法：</p><ul><li><a href="https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting" target="_blank" rel="noopener"><code>git reset --hard HEAD</code></a> —— 丢弃已暂存和为暂存的改变，恢复到最近的一次提交。</li></ul><p>特别指定一个不同的提交代替 <code>HEAD</code> 可以丢弃改变直到该条提交。<code>--hard</code> 特指已暂存和未暂存的改变都被撤除。</p><p>确认你没有从远程分支删除一个你的合作者依赖的提交。</p><ul><li><a href="https://www.atlassian.com/git/tutorials/undoing-changes" target="_blank" rel="noopener"><code>git checkout my_commit</code></a> —— 从 <em>my_commit</em> 后删除为暂存的改变。</li></ul><p><code>HEAD</code> 通常用在 <code>my_commit</code> 来撤销改变，将你本地的工作目录恢复到最近的依次提交状态。</p><p><code>checkout</code> 被最多的用于仅在本地的撤销。它不会从远程分支弄混你的合作者依赖的提交历史！</p><p>如果你使用 <code>checkout</code> 时用一个分支代替提交，<code>HEAD</code> 被切换到指定分支，工作目录也被相应更新。这是是 <code>checkout</code> 更公共的用法。</p><ul><li><a href="https://www.atlassian.com/git/tutorials/undoing-changes/git-revert" target="_blank" rel="noopener"><code>git revert my_commit</code></a> —— 撤销 <em>my_commit</em> 里的改变的影响。<code>revert</code> 撤销改变时，会生成一个新的提交。</li></ul><p><code>revert</code> 对多人合作项目是安全的，因为它不会重写其他用户的分支可能依赖的提交历史。</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190501161219.png" alt></p><div style="text-align: center;">revert is safe</div><p>有时你只想删除你本地目录未被追踪的文件。比如，可能你运行了一些代码去创建大量不同类型的文件，这些文件你并不想加到你的仓库。Oops. 😏 你可以快速地清除它们。</p><ul><li><a href="https://www.atlassian.com/git/tutorials/undoing-changes/git-clean" target="_blank" rel="noopener"><code>git clean -n</code></a> —— 删除本地目录未追踪的文件。</li></ul><p><code>-n</code> 标志 “is for a dry run where nothing is deleted.” ?</p><p>使用 <code>-f</code> 标志去强制移除文件。</p><p>使用 <code>-d</code> 标志去移除未追踪的目录。</p><p>默认的 <em>.gitignore</em> 指定的未追踪文件不会被删除，但是这个行为可以被更改。</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190501162527.png" alt></p><p>现在你了解了 Git 里的撤销事情的工具，让我们看下保持事情有序的两个命令。</p><h2 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h2><ul><li><a href="https://www.atlassian.com/git/tutorials/rewriting-history#git-commit--amend" target="_blank" rel="noopener"><code>git commit --amend</code></a> —— 添加暂存的改变到最近的一条提交里。</li></ul><p>如果没有被暂存的，这个命令就只允许你编辑最近的提交信息。只在这个提交没被整合进远程主分支的时候使用这个命令！</p><ul><li><a href="https://www.atlassian.com/git/tutorials/syncing/git-push" target="_blank" rel="noopener">git push my_remote –tags</a> —— 发送所有的本地标签到远程仓库。有利于版本变化。</li></ul><p>如果你在使用 Python 并在你创建的包里生成改变，<a href="https://pypi.org/project/bump2version/" target="_blank" rel="noopener">bump2version</a> 会自动地为你创建标签。一旦你推送了你的标签，你就可以在发布中使用它们。<a href="https://towardsdatascience.com/build-your-first-open-source-python-project-53471c9942a7?source=friends_link&amp;sk=576540dbd90cf2ee72a3a0e0bfa72ffb" target="_blank" rel="noopener">这是我的指导</a> ，帮你生成你的第一个 OSS Python 包。关注 <a href="https://medium.com/@jeffhale" target="_blank" rel="noopener">我</a> 来确认你没有遗失发版部分！</p><h2 id="求助，我陷在-Vim-里出不来了！"><a href="#求助，我陷在-Vim-里出不来了！" class="headerlink" title="求助，我陷在 Vim 里出不来了！"></a>求助，我陷在 Vim 里出不来了！</h2><p>使用 Git，你可能偶尔发现自己被丢进了一个 Vim 编辑器里。比如，你试图提交，但没写提交消息 —— Vim 将会自动打开。如果你不知道 Vim，一种糟糕的东西（大误） —— 看看 <a href="https://stackoverflow.com/a/11828573/4590385" target="_blank" rel="noopener">这个 4000+ 赞同的 Stack Overflow 回答</a>，了解怎样退出它。</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190501164225.png" alt></p><div style="text-align: center;">Freedom!</div><p>这里是保存文件退出 Vim 的 4 步计划：</p><ol><li>按 <code>i</code> 进入输入模式。</li><li>在第一行输入你的提交信息。</li><li>按退出键 —— <code>Esc</code>。</li><li>输入 <code>:x</code>。不要忘了冒号。</li></ol><p>欢呼，你自由了！ 😄</p><h2 id="改变默认编辑器"><a href="#改变默认编辑器" class="headerlink" title="改变默认编辑器"></a>改变默认编辑器</h2><p>为了完全避免 Vim，你可以在 Git 里改变你的默认编辑器。（这一段我不翻译，Vim 天下第一）</p><h2 id="创建-Git-命令的快捷方式"><a href="#创建-Git-命令的快捷方式" class="headerlink" title="创建 Git 命令的快捷方式"></a>创建 Git 命令的快捷方式</h2><p><img src="https://cdn-images-1.medium.com/max/1600/1*iyvZMHER_5neLUhZaXSCdw.jpeg" alt></p><p>通过添加下面的别名到你的 <em>.bash_profile</em> 来添加 Git 命令的快捷方式。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> gs=<span class="string">'git status '</span></span><br><span class="line"><span class="built_in">alias</span> ga=<span class="string">'git add '</span></span><br><span class="line"><span class="built_in">alias</span> gaa=<span class="string">'git add -A '</span></span><br><span class="line"><span class="built_in">alias</span> gb=<span class="string">'git branch '</span></span><br><span class="line"><span class="built_in">alias</span> gc=<span class="string">'git commit '</span></span><br><span class="line"><span class="built_in">alias</span> gcm=<span class="string">'git commit -m '</span></span><br><span class="line"><span class="built_in">alias</span> go=<span class="string">'git checkout '</span></span><br></pre></td></tr></table></figure><p>你可以调整这些，为你喜欢的 Git 命令添加快捷方式。</p><p>如果你没有一个 <em>.bash_profile</em>，你可以在 macOS 上创建一个：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch ~/.bash_profile</span><br></pre></td></tr></table></figure><p>然后打开它：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open ~/.bash_profile</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/a/30462883/4590385" target="_blank" rel="noopener">在这</a>查看更多有关 <em>.bash_profile</em> 的信息。</p><p>现在当你在终端输入 <code>gs</code> ，就等同于输入 <code>git status</code>。注意你可以在你的快捷方式后输入其他的参数。</p><p>你也可以生成 Git 别名，但是那需要你在你的快捷命令前输入 <code>git</code>。谁需要哪些额外的一下呢？（我，bash_profile的别名太多容易混淆，另外附赠一条更好地查看git log的别名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias glg=&apos;git log --graph --pretty=format:&quot;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset&quot; --abbrev-commit --date=relative&apos;</span><br></pre></td></tr></table></figure></p><p>）</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在这篇文章里你可以看到一些关键的 Git 命令，以及配置环境节省时间。现在理由了 Git 和 Github 的基础了。准备好开始下一步了吗？</p><ul><li>Check out <a href="https://www.atlassian.com/git/tutorials/learn-git-with-bitbucket-cloud" target="_blank" rel="noopener">this Bitbucket Git tutorial</a> to go deeper.</li><li>Explore this <a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">interactive guide</a> to Git branching. Branching can be confusing, so it’s definitely worth a look. 🔎</li><li>Go play, learn, and explain the differences to someone else.</li></ul><p>我希望你发现这个对 Git 和 Github 的介绍是有用的。如果你是的，请在你喜欢的社交媒体频道上分享它，这样其他人也能看见。</p><p>我写关于如何有效和便捷地使用 Python、Docker 和 其他的编程和数据科学工具。如果你有兴趣，在<a href="https://medium.com/@jeffhale" target="_blank" rel="noopener">这里</a>关注我了解更多。</p><p>去使用 Git 吧！</p><p><img src="https://cdn-images-1.medium.com/max/2400/1*jEf16zycWCHBGCn56W-VPA.jpeg" alt></p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;201902W11 Review, Git的一些常用且很有用的命令。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://foreti.me/tags/git/"/>
    
      <category term="Review" scheme="https://foreti.me/tags/Review/"/>
    
  </entry>
  
  <entry>
    <title>Spring @RequestMapping详解</title>
    <link href="https://foreti.me/2019/03/01/spring-requestmapping/"/>
    <id>https://foreti.me/2019/03/01/spring-requestmapping/</id>
    <published>2019-03-01T16:00:00.000Z</published>
    <updated>2019-07-27T02:14:09.300Z</updated>
    
    <content type="html"><![CDATA[<p>201902W9 Review, 一篇关于Spring RequestMapping的译文。</p><a id="more"></a><hr><h1 id="Spring-RequestMapping"><a href="#Spring-RequestMapping" class="headerlink" title="Spring RequestMapping"></a>Spring RequestMapping</h1><p><a href="https://www.baeldung.com/spring-requestmapping" target="_blank" rel="noopener">原文</a><br>by <a href="https://www.baeldung.com/author/eugen/" target="_blank" rel="noopener">Eugen Paraschiv</a></p><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>在这篇文章中，我们将关注于这个Spring MVC中常用的注释 - @RequestMapping。</p><p>简单地说，这个注释用于将网络请求映射到Spring Controller的方法。</p><h2 id="2-RequestMapping基础"><a href="#2-RequestMapping基础" class="headerlink" title="2. @RequestMapping基础"></a>2. <em>@RequestMapping</em>基础</h2><p>让我们从一个简单的例子开始 - 按照一些基本的标准将一个HTTP请求映射到一个方法。</p><h3 id="2-1-RequestMapping-按路径"><a href="#2-1-RequestMapping-按路径" class="headerlink" title="2.1. @RequestMapping - 按路径"></a>2.1. <em>@RequestMapping</em> - 按路径</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/ex/foos"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFoosBySimplePath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get some Foos"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要使用简单的<em>curl</em>命令测试此映射，请运行：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i http://localhost:8080/spring-rest/ex/foos</span><br></pre></td></tr></table></figure></p><h3 id="2-2-RequestMapping-HTTP方法"><a href="#2-2-RequestMapping-HTTP方法" class="headerlink" title="2.2. @RequestMapping - HTTP方法"></a>2.2. <em>@RequestMapping</em> - HTTP方法</h3><p>HTTP方法参数没有默认值 - 因此，如果我们不指定值，它将映射到任何HTTP请求。</p><p>这是一个简单的示例，类似于前一个示例 - 但这次映射到一个HTTP POST请求：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/ex/foos"</span>, method = POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">postFoos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Post some Foos"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>要通过<em>curl</em>命令测试POST ：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X POST http://localhost:8080/spring-rest/ex/foos</span><br></pre></td></tr></table></figure></p><h2 id="3-RequestMapping-和-HTTP-Headers"><a href="#3-RequestMapping-和-HTTP-Headers" class="headerlink" title="3. RequestMapping 和 HTTP Headers"></a>3. RequestMapping 和 HTTP Headers</h2><h3 id="3-1-带有headers-Attribute的-RequestMapping"><a href="#3-1-带有headers-Attribute的-RequestMapping" class="headerlink" title="3.1. 带有headers Attribute的@RequestMapping"></a>3.1. 带有headers Attribute的<em>@RequestMapping</em></h3><p>给请求指定一个header，可以进一步限制映射范围。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/ex/foos"</span>, headers = <span class="string">"key=val"</span>, method = GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFoosWithHeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get some Foos with Header"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了测试运行，我们将使用<em>curl</em>的header参数<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -H <span class="string">"key:val"</span> http://localhost:8080/spring-rest/ex/foos</span><br></pre></td></tr></table></figure></p><p>更进一步，通过 <em>@RequestMapping</em>的 <em>header</em>属性实现多个header<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(</span><br><span class="line">  value = <span class="string">"/ex/foos"</span>, </span><br><span class="line">  headers = &#123; <span class="string">"key1=val1"</span>, <span class="string">"key2=val2"</span> &#125;, method = GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFoosWithHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get some Foos with Header"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以通过命令测试这个方法<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -H <span class="string">"key1:val1"</span> -H <span class="string">"key2:val2"</span> http://localhost:8080/spring-rest/ex/foos</span><br></pre></td></tr></table></figure></p><p>注意，对于<em>curl</em>语法，用冒号分离header的键和值，与HTTP中的规范相同，而在Spring中是用等号。</p><h3 id="3-2-RequestMapping-消费和生产"><a href="#3-2-RequestMapping-消费和生产" class="headerlink" title="3.2. @RequestMapping 消费和生产"></a>3.2. <em>@RequestMapping</em> 消费和生产</h3><p>映射<strong>由Controller产生的媒体类型</strong>的方法特别值得注意 - 我们可以通过上面介绍的 <em>@RequestMapping</em> 的headers属性，基于<em>Accept</em> header映射请求。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(</span><br><span class="line">  value = <span class="string">"/ex/foos"</span>, </span><br><span class="line">  method = GET, </span><br><span class="line">  headers = <span class="string">"Accept=application/json"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFoosAsJsonFromBrowser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get some Foos with Header Old"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>匹配这种定义<em>Accept</em> header的方法是灵活的 - 是用包含而不是等于，所以一个下面这样的请求也能正确地匹配。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Accept:application/json,text/html"</span> http://localhost:8080/spring-rest/ex/foos</span><br></pre></td></tr></table></figure></p><p>从Spring 3.1开始， <strong><em>@RequestMapping</em>注释具有produces和consumes属性</strong>，特别是为了这种：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(</span><br><span class="line">  value = <span class="string">"/ex/foos"</span>, </span><br><span class="line">  method = RequestMethod.GET, </span><br><span class="line">  produces = <span class="string">"application/json"</span></span><br><span class="line">)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFoosAsJsonFromREST</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get some Foos with Header New"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此外，带有<em>headers</em>属性的旧类型的映射将自动转换成Spring 3.1开始的新<em>produces</em>机制，所以结果是相同的。</p><p>同样的方式，通过<em>curl</em>进行consume：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Accept:application/json"</span> http://localhost:8080/spring-rest/ex/foos</span><br></pre></td></tr></table></figure></p><p>另外，<em>produces</em>也支持多值：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(</span><br><span class="line">  value = <span class="string">"/ex/foos"</span>, </span><br><span class="line">  method = GET,</span><br><span class="line">  produces = &#123; <span class="string">"application/json"</span>, <span class="string">"application/xml"</span> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>记住这些 - 指定<em>accept</em> header的旧的方法和新的方法 - 基本上是相同的映射，所以Spring不允许它们一起使用 - 一起用将会导致：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalStateException: Ambiguous mapping found. </span><br><span class="line">Cannot map <span class="string">'fooController'</span> bean method </span><br><span class="line">java.lang.String </span><br><span class="line">org.baeldung.spring.web.controller</span><br><span class="line">  .FooController.getFoosAsJsonFromREST()</span><br><span class="line">to </span><br><span class="line">&#123; [/ex/foos],</span><br><span class="line">  methods=[GET],params=[],headers=[],</span><br><span class="line">  consumes=[],produces=[application/json],custom=[]</span><br><span class="line">&#125;: </span><br><span class="line">There is already <span class="string">'fooController'</span> bean method</span><br><span class="line">java.lang.String </span><br><span class="line">org.baeldung.spring.web.controller</span><br><span class="line">  .FooController.getFoosAsJsonFromBrowser() </span><br><span class="line">mapped.</span><br></pre></td></tr></table></figure></p><p>关于新的<em>produces</em>和<em>consumes</em>机制的最后一点 - 与其他注释表现不同的是 - 当指定类型级别时，方法级别的注释不会补充而会覆盖类型级别的信息。</p><p>这句没理解，原文</p><blockquote><p>when specified at the type level, <strong>the method level annotations do not complement but override</strong> the type level information.</p></blockquote><p>当然，如果你想深入了解用Spring构建REST API - 请看<a href="https://www.baeldung.com/rest-with-spring-course?utm_source=blog&amp;utm_medium=web&amp;utm_content=art1&amp;utm_campaign=rws" target="_blank" rel="noopener">the new REST with Spring course</a>。</p><h2 id="4-RequestMapping使用路径变量"><a href="#4-RequestMapping使用路径变量" class="headerlink" title="4. RequestMapping使用路径变量"></a>4. <em>RequestMapping</em>使用路径变量</h2><p>映射URI的一部分可以通过 <em>@PathVariable</em>注解绑定到变量。</p><h3 id="4-1-单个-PathVariable"><a href="#4-1-单个-PathVariable" class="headerlink" title="4.1 单个 @PathVariable"></a>4.1 单个 <em>@PathVariable</em></h3><p>一个简单的单路径变量例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/ex/foos/&#123;id&#125;"</span>, method = GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFoosBySimplePathWithPathVariable</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  @PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get a specific Foo with id="</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以用<em>curl</em>测试：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:8080/spring-rest/ex/foos/1</span><br></pre></td></tr></table></figure></p><p>如果方法的参数名和路径名相同，可以只用 <em>@PathVariable</em> 而不附加值：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/ex/foos/&#123;id&#125;"</span>, method = GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFoosBySimplePathWithPathVariable</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  @PathVariable String id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get a specific Foo with id="</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意 <em>@PathVariable</em> 受利于自动类型转换，所以我们也可以修饰id为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PathVariable</span> <span class="keyword">long</span> id</span><br></pre></td></tr></table></figure></p><h3 id="4-2-多个-PathVariable"><a href="#4-2-多个-PathVariable" class="headerlink" title="4.2 多个 @PathVariable"></a>4.2 多个 <em>@PathVariable</em></h3><p>更复杂的URI可能需要映射URI的多个部分到多个值：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/ex/foos/&#123;fooid&#125;/bar/&#123;barid&#125;"</span>, method = GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String getFoosBySimplePathWithPathVariables</span><br><span class="line">  (<span class="meta">@PathVariable</span> <span class="keyword">long</span> fooid, <span class="meta">@PathVariable</span> <span class="keyword">long</span> barid) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get a specific Bar with id="</span> + barid + </span><br><span class="line">      <span class="string">" from a Foo with id="</span> + fooid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同样这可以用<em>curl</em>容易的测试：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:8080/spring-rest/ex/foos/1/bar/2</span><br></pre></td></tr></table></figure></p><h3 id="4-3-带正则表达式的-PathVariable"><a href="#4-3-带正则表达式的-PathVariable" class="headerlink" title="4.3 带正则表达式的 @PathVariable"></a>4.3 带正则表达式的 <em>@PathVariable</em></h3><p>正则表达式也能用来映射 <em>@PathVariable</em>；举个例子，我们可以限制映射id只接受数字类型的值：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/ex/bars/&#123;numericId:[\\d]+&#125;"</span>, method = GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBarsBySimplePathWithPathVariable</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  @PathVariable <span class="keyword">long</span> numericId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get a specific Bar with id="</span> + numericId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这将意味着下面的URI可以适配：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/spring-rest/ex/bars/1</span><br></pre></td></tr></table></figure></p><p>但这个不能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/spring-rest/ex/bars/abc</span><br></pre></td></tr></table></figure></p><h2 id="5-RequestMapping使用Request-Parameters"><a href="#5-RequestMapping使用Request-Parameters" class="headerlink" title="5. RequestMapping使用Request Parameters"></a>5. <em>RequestMapping</em>使用Request Parameters</h2><p>@RequestMapping允许方便的使用 <em>@RequestParam</em>注解映射URL参数。</p><p>我们现在映射一个这样的URI请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/spring-rest/ex/bars?id=100</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/ex/bars"</span>, method = GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBarBySimplePathWithRequestParam</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  @RequestParam(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get a specific Bar with id="</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们接着在controller方法中使用 <em>@RequestParam(“id”)</em> 注解取出<em>id</em>参数的值。</p><p>要发送带<em>id</em>参数的请求，我们在<em>curl</em>中使用参数支持：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -d id=100 http://localhost:8080/spring-rest/ex/bars</span><br></pre></td></tr></table></figure></p><p>在这个例子中，参数直接绑定而不先声明。</p><p>对于更进一步的场景， <em>@RequestMapping</em>有可选的参数定义 - 作为又一个限制请求映射的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/ex/bars"</span>, params = <span class="string">"id"</span>, method = GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBarBySimplePathWithExplicitRequestParam</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  @RequestParam(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get a specific Bar with id="</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>甚至可以更灵活的映射 - 可以设置多个<em>params</em>值，并且不是所有都使用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(</span><br><span class="line">  value = <span class="string">"/ex/bars"</span>, </span><br><span class="line">  params = &#123; <span class="string">"id"</span>, <span class="string">"second"</span> &#125;, </span><br><span class="line">  method = GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBarBySimplePathWithExplicitRequestParams</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  @RequestParam(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Narrow Get a specific Bar with id="</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当然，一个像这样的请求URI：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/spring-rest/ex/bars?id=100&amp;second=something</span><br></pre></td></tr></table></figure></p><p>将总会被映射到最好的适配 - 更进一步的适配，同时定义<em>id</em>和<em>second</em>参数。</p><h2 id="6-RequestMapping-Corner-Cases"><a href="#6-RequestMapping-Corner-Cases" class="headerlink" title="6. RequestMapping Corner Cases"></a>6. <em>RequestMapping</em> Corner Cases</h2><h3 id="6-1-RequestMapping-–-多个路径映射到同一Controller方法"><a href="#6-1-RequestMapping-–-多个路径映射到同一Controller方法" class="headerlink" title="6.1. @RequestMapping – 多个路径映射到同一Controller方法"></a>6.1. <em>@RequestMapping</em> – 多个路径映射到同一Controller方法</h3><p>虽然一个单个 <em>@RequestMapping</em>路径值通常用于单个controller方法， 但这只是一种好的用法，而不是强制规则 - 有一些情况下，多个请求到同一方法的可能是必要的。在那种情况下， <strong>@RequestMapping的value属性接收多个映射</strong>，而不是一个映射：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(</span><br><span class="line">  value = &#123; <span class="string">"/ex/advanced/bars"</span>, <span class="string">"/ex/advanced/foos"</span> &#125;, </span><br><span class="line">  method = GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFoosOrBarsByPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Advanced - Get some Foos or Bars"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在，这两个<em>curl</em>命令应该使用相同的方法：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -i http://localhost:8080/spring-rest/ex/advanced/foos</span><br><span class="line">curl -i http://localhost:8080/spring-rest/ex/advanced/bars</span><br></pre></td></tr></table></figure></p><h3 id="6-2-RequestMapping-–-多个HTTP请求方法到同一个controller方法"><a href="#6-2-RequestMapping-–-多个HTTP请求方法到同一个controller方法" class="headerlink" title="6.2. @RequestMapping – 多个HTTP请求方法到同一个controller方法"></a>6.2. <em>@RequestMapping</em> – 多个HTTP请求方法到同一个controller方法</h3><p>用不同HTTP请求方式的多个请求可以被映射到同一个Controller方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(</span><br><span class="line">  value = <span class="string">"/ex/foos/multiple"</span>, </span><br><span class="line">  method = &#123; RequestMethod.PUT, RequestMethod.POST &#125;</span><br><span class="line">)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">putAndPostFoos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Advanced - PUT and POST within single method"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用<em>curl</em>，这些请求都被打到同一个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X POST http:<span class="comment">//localhost:8080/spring-rest/ex/foos/multiple</span></span><br><span class="line">curl -i -X PUT http:<span class="comment">//localhost:8080/spring-rest/ex/foos/multiple</span></span><br></pre></td></tr></table></figure></p><h3 id="6-3-RequestMapping-对所有请求的返回"><a href="#6-3-RequestMapping-对所有请求的返回" class="headerlink" title="6.3. @RequestMapping - 对所有请求的返回"></a>6.3. <em>@RequestMapping</em> - 对所有请求的返回</h3><p>对所有请求实现一个返回，可以使用一个特别的HTTP方法 - 例如，对GET方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"*"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Fallback for GET Requests"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者对所有请求：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(</span><br><span class="line">  value = <span class="string">"*"</span>, </span><br><span class="line">  method = &#123; RequestMethod.GET, RequestMethod.POST ... &#125;)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">allFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Fallback for All Requests"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="6-4-模糊映射错误"><a href="#6-4-模糊映射错误" class="headerlink" title="6.4 模糊映射错误"></a>6.4 模糊映射错误</h3><p>模糊映射错误发生与：当Spring评估两个或多个请求映射对于不同的Controller方法是相同的。当两个请求映射有同样的HTTP方法、URL、参数、头部和媒体类型时，它们就是相同的。例如，这是一个模糊映射：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"foos/duplicate"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">duplicate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Duplicate"</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"foos/duplicate"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">duplicateEx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Duplicate"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>抛出的异常通常在这些行有异常信息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalStateException: Ambiguous mapping.</span><br><span class="line">  Cannot map <span class="string">'fooMappingExamplesController'</span> method </span><br><span class="line">  <span class="keyword">public</span> java.lang.String org.baeldung.web.controller.FooMappingExamplesController.duplicateEx()</span><br><span class="line">  to &#123;[/ex/foos/duplicate],methods=[GET]&#125;:</span><br><span class="line">  There is already <span class="string">'fooMappingExamplesController'</span> bean method</span><br><span class="line">  <span class="keyword">public</span> java.lang.String org.baeldung.web.controller.FooMappingExamplesController.duplicate() mapped.</span><br></pre></td></tr></table></figure></p><p>仔细阅读错误信息，指出Spring不能映射方法<em>org.baeldung.web.controller.FooMappingExamplesController.duplicateEx()</em> ，因为它与一个已经映射的<em>org.baeldung.web.controller.FooMappingExamplesController.duplicate()</em> 有冲突。</p><p>下面这个代码段将不会产生模糊映射错误，因为两个方法返回不同的内容类型：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"foos/duplicate"</span>, produces = MediaType.APPLICATION_XML_VALUE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">duplicate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Duplicate"</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"foos/duplicate"</span>, produces = MediaType.APPLICATION_JSON_VALUE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">duplicateEx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Duplicate"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="7-新的请求映射捷径"><a href="#7-新的请求映射捷径" class="headerlink" title="7. 新的请求映射捷径"></a>7. 新的请求映射捷径</h2><p>Spring Framework 4.3引入了<a href="https://www.baeldung.com/spring-new-requestmapping-shortcuts" target="_blank" rel="noopener">一些新的</a>HTTP映射注释，所有这些都基于 <em>@RequestMapping</em> ：</p><ul><li><strong>@GetMapping</strong></li><li><strong>@PostMapping</strong></li><li><strong>@PutMapping</strong></li><li><strong>@DeleteMapping</strong></li><li><strong>@PatchMapping</strong></li></ul><p>这些新的注解可以提高可读性，减少代码冗长。让我们看看这些新的注解在创建一个支持CRUD操作RESTFUL API的实例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;?&gt; getBazz(<span class="meta">@PathVariable</span> String id)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="keyword">new</span> Bazz(id, <span class="string">"Bazz"</span>+id), HttpStatus.OK);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;?&gt; newBazz(<span class="meta">@RequestParam</span>(<span class="string">"name"</span>) String name)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="keyword">new</span> Bazz(<span class="string">"5"</span>, name), HttpStatus.OK);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@PutMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;?&gt; updateBazz(</span><br><span class="line">  <span class="meta">@PathVariable</span> String id,</span><br><span class="line">  <span class="meta">@RequestParam</span>(<span class="string">"name"</span>) String name) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="keyword">new</span> Bazz(id, name), HttpStatus.OK);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;?&gt; deleteBazz(<span class="meta">@PathVariable</span> String id)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="keyword">new</span> Bazz(id), HttpStatus.OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>深入了解这些可以在<a href="https://www.baeldung.com/spring-new-requestmapping-shortcuts" target="_blank" rel="noopener">这里</a>找到。</p><h2 id="8-Spring配置"><a href="#8-Spring配置" class="headerlink" title="8. Spring配置"></a>8. Spring配置</h2><p>Spring MVC的配置足够简单 - 考虑到我们的<em>FooController</em>被定义在接下来的包里:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.baeldung.spring.web.controller;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooController</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure></p><p>我们只用一个 <em>@Configuration</em> 去启用完整的MVC支持并为控制器配置类路径扫描：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(&#123; <span class="string">"org.baeldung.spring.web.controller"</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="9-结论"><a href="#9-结论" class="headerlink" title="9. 结论"></a>9. 结论</h2><p>这篇文章专注于<strong>Spring的 <em>@RequestMapping</em> 注解</strong> - 讨论一个简单的用例, HTTP头的映射, <em>@PathVariable</em> 绑定URI部分, 使用URL参数工作, 和使用 <em>@RequestParam</em> 注解.</p><p>如果你想学习如何使用另一个Spring MVC的核心注解, 你可以<a href="https://www.baeldung.com/spring-mvc-and-the-modelattribute-annotation" target="_blank" rel="noopener">在这浏览 <em>@ModelAttribu</em> 注解</a>.</p><p>这篇文章的全部代码在<a href="https://github.com/eugenp/tutorials/tree/master/spring-rest-simple" target="_blank" rel="noopener">Github</a>可见. 这是一个Maven项目, 所以它可以很容易被导入和运行.</p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;201902W9 Review, 一篇关于Spring RequestMapping的译文。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Review" scheme="https://foreti.me/tags/Review/"/>
    
      <category term="Spring" scheme="https://foreti.me/tags/Spring/"/>
    
      <category term="RequestMapping" scheme="https://foreti.me/tags/RequestMapping/"/>
    
  </entry>
  
  <entry>
    <title>我的steam账号被盗经历</title>
    <link href="https://foreti.me/2019/02/28/steam-account-stolen/"/>
    <id>https://foreti.me/2019/02/28/steam-account-stolen/</id>
    <published>2019-02-28T16:06:37.000Z</published>
    <updated>2019-07-27T02:14:09.300Z</updated>
    
    <content type="html"><![CDATA[<p>来自一个程序员的心理自陈。</p><a id="more"></a><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190429231202.png" alt></p><p>最近在玩LOL的无限火力，毕竟不停敲击技能键让人无穷无尽的爽快感。然而就在那天晚上LOL的服务器更新，我只好玩了几把Apex，这是前些天火起来的游戏，守望+堡垒，都是我不擅长的类型。玩吃鸡类型的游戏还是叫朋友一起才有趣。我自己的游戏机上习惯是steam开机启动的，打完几把没意思切了出来，突然收到steam聊天消息提醒，这让我有些意外和惊喜。惊喜的是，好久没有朋友在steam中与我发聊天消息，以往在一起玩PUBG的时光恍如昨日浮现在眼前。</p><p>随后我点开了聊天窗口，是一个陌生人的好友邀请。这是谁呢，陌生的头像，我同意了。嗯，这个人不在线上。</p><p>没管他是谁，我继续了下一把Apex，依然没有吃鸡，该结束今日的战斗了，我想。</p><p>咦，这个人又给我发了消息，嗯，我忘了截图，大致这个意思：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hey，bro，恭喜你。</span><br><span class="line">我获得了一个cs go的枪械皮肤，我分享给你了，你也可以领一个。</span><br><span class="line">这个是领取链接http://xxxxxxxxx</span><br><span class="line"></span><br><span class="line">这个是我领取的皮肤http://xxxxxxxxx</span><br></pre></td></tr></table></figure></p><p>领皮肤啊，虽然我不玩cs go，但是我可以领了卖出去吗嘛，打开看看。</p><p>嗯，都是些什么枪，也不知道值不值钱，算了捡垃圾吧，嗯，sign in with steam。</p><p>弹出了一个小窗，嗯，域名<code>steamcommunity.com/xxxxx</code>，没错，是steam的。</p><p>我输入了账号，咦，我的lastpass怎么不提示填充密码，可能网不好吧。嗯，输入密码，登录，还要手机令牌，没错了。</p><p>哎，我输了手机令牌怎么不对，换一个，还不对，怎么回事。</p><p>1分钟后，<br>叮~<br>叮~<br>“你的steam账号已被移除绑定手机号”<br>“你的steam账号已被移除绑定邮箱”<br>“你的steam账号已被移除手机令牌”<br><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190429231247.png" alt></p><p>我号没了！！！</p><p>这个steamcommuty弹窗是假的，钓鱼！！！难怪我的lastpass不提示密码！！！</p><p>我他吗想起来了，这个steamcommunity可能是俄文西里尔文之类的其他西文字母，不是英文字母啊我曹！！！（可以看一篇<a href="https://www.leiphone.com/news/201704/NyHGnviIh1lMKUCX.html" target="_blank" rel="noopener">介绍文章</a>）</p><p>以后不要只看域名识别官网！！！</p><p>妈耶赶紧申请恢复啊我曹，盗号的效率怎么这么高，我没任何提示怎么移除了我的手机号和邮箱，还改了我的密码！！！</p><p>算了，先申诉恢复账号吧。</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190429231327.png" alt></p><p>想起来ofo退押金假装外国人，客服的服务效率可能高一下，乱扯了一通英文，第二天催了一下。</p><p>嗯，有回复了，谢谢客服小姐姐。</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190429231357.png" alt></p><p>这事还没完，我的steam邮箱和账号，和很多网站的账号密码都一样，只好花时间改了lastpass里的所有账号的密码。</p><p>lastpass是个好东西，可惜我错过了它的提示。</p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自一个程序员的心理自陈。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Steam" scheme="https://foreti.me/tags/Steam/"/>
    
  </entry>
  
  <entry>
    <title>Mac上非常方便的一些工具和命令</title>
    <link href="https://foreti.me/2019/02/25/easy-command-tool-mac/"/>
    <id>https://foreti.me/2019/02/25/easy-command-tool-mac/</id>
    <published>2019-02-25T14:51:35.000Z</published>
    <updated>2019-07-27T02:14:09.285Z</updated>
    
    <content type="html"><![CDATA[<p>这是我日常使用mac os的一些常用app和命令。</p><a id="more"></a><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190224235353.png" alt></p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>以下工具皆开源免费。</p><h3 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><h3 id="使用Homebrew升级git版本"><a href="#使用Homebrew升级git版本" class="headerlink" title="使用Homebrew升级git版本"></a>使用Homebrew升级git版本</h3><p>Mac系统虽然预装git，但一般是较老的版本，如果希望更新到新的版本，最方便的是用Homebrew更新。</p><p>安装git：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure></p><p>替换系统预装git：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew link git</span><br></pre></td></tr></table></figure></p><p>以后更新git：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade git</span><br></pre></td></tr></table></figure></p><h3 id="窗口管理应用"><a href="#窗口管理应用" class="headerlink" title="窗口管理应用"></a>窗口管理应用</h3><p><a href="https://github.com/eczarny/spectacle" target="_blank" rel="noopener">Spectacle</a>，免费开源，关联的快捷键太多，可以取消一些窗口操作的keymap。<br>抛去价格不谈，Spectacle&gt;Moom，而slate太麻烦。</p><h3 id="Shadowsocks科学上网"><a href="#Shadowsocks科学上网" class="headerlink" title="Shadowsocks科学上网"></a>Shadowsocks科学上网</h3><p>服务端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class="line">chmod +x shadowsocks.sh</span><br><span class="line">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/shadowsocks/shadowsocks-windows" target="_blank" rel="noopener">Windows</a><br><a href="https://github.com/shadowsocks/ShadowsocksX-NG" target="_blank" rel="noopener">Mac</a><br><a href="https://github.com/shadowsocks/shadowsocks-android" target="_blank" rel="noopener">Android</a></p><h3 id="图床上传工具"><a href="#图床上传工具" class="headerlink" title="图床上传工具"></a>图床上传工具</h3><p><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">Picgo</a><br><a href="https://github.com/willnewii/qiniuClient" target="_blank" rel="noopener">云存储管理客户端</a></p><h3 id="菜单栏Menubar隐藏部分图标"><a href="#菜单栏Menubar隐藏部分图标" class="headerlink" title="菜单栏Menubar隐藏部分图标"></a>菜单栏Menubar隐藏部分图标</h3><p><a href="https://github.com/DozerMapper/dozer" target="_blank" rel="noopener">Dozer</a></p><h3 id="轻量日历工具"><a href="#轻量日历工具" class="headerlink" title="轻量日历工具"></a>轻量日历工具</h3><p><a href="https://github.com/sfsam/Itsycal" target="_blank" rel="noopener">Istycal</a></p><h3 id="剪贴板工具"><a href="#剪贴板工具" class="headerlink" title="剪贴板工具"></a>剪贴板工具</h3><p><a href="https://github.com/Clipy/Clipy" target="_blank" rel="noopener">Clipy</a></p><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><h3 id="调整Dock栏的隐藏速度"><a href="#调整Dock栏的隐藏速度" class="headerlink" title="调整Dock栏的隐藏速度"></a>调整Dock栏的隐藏速度</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.dock autohide-delay -int 0 <span class="comment">#时间设为最短</span></span><br><span class="line">defaults write com.apple.dock autohide-delay -int 0.5 <span class="comment">#时间设为 0.5s</span></span><br><span class="line">killall dock</span><br></pre></td></tr></table></figure><h3 id="安全与隐私，打开允许“任何来源”"><a href="#安全与隐私，打开允许“任何来源”" class="headerlink" title="安全与隐私，打开允许“任何来源”"></a>安全与隐私，打开允许“任何来源”</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sudo spctl --master-disable</span><br></pre></td></tr></table></figure><h3 id="设置Launchpad的列数和行数"><a href="#设置Launchpad的列数和行数" class="headerlink" title="设置Launchpad的列数和行数"></a>设置Launchpad的列数和行数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.dock springboard-columns -int 列数</span><br><span class="line">defaults write com.apple.dock springboard-rows -int 行数</span><br><span class="line">defaults write com.apple.dock ResetLaunchPad -bool TRUE</span><br><span class="line">killall Dock</span><br></pre></td></tr></table></figure><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我日常使用mac os的一些常用app和命令。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mac" scheme="https://foreti.me/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>chrome强制重定向到https的问题</title>
    <link href="https://foreti.me/2019/02/24/chrome-https/"/>
    <id>https://foreti.me/2019/02/24/chrome-https/</id>
    <published>2019-02-24T15:08:26.000Z</published>
    <updated>2019-07-27T02:14:09.285Z</updated>
    
    <content type="html"><![CDATA[<p>有些场景下，在chrome中打开的http网页会自动重定向到https</p><a id="more"></a>，这样可能会造成一些第三方的图片资源或脚本无法正常加载，如果不想这么做的话，可以在chrome地址栏输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome://net-internals/#hsts</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190224231418.png" alt><br>在红色区域中输入不想自动重定向到https的域名，点击delete即可。</p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有些场景下，在chrome中打开的http网页会自动重定向到https&lt;/p&gt;
    
    </summary>
    
    
      <category term="chrome" scheme="https://foreti.me/tags/chrome/"/>
    
      <category term="https" scheme="https://foreti.me/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>基于ZooKeeper的分布式锁实现</title>
    <link href="https://foreti.me/2019/02/24/zookeeper-distributed-locks/"/>
    <id>https://foreti.me/2019/02/24/zookeeper-distributed-locks/</id>
    <published>2019-02-24T07:46:58.000Z</published>
    <updated>2019-07-27T02:14:09.316Z</updated>
    
    <content type="html"><![CDATA[<p>201902W9 Share</p><a id="more"></a><hr><p>分布式锁的实现方式有很多种，可以依赖数据库、Redis、ZooKeeper等实现，当然不同的方式各有其优缺点。本文仅探讨基于ZooKeeper实现分布式锁的方法。</p><blockquote><p>此部分分布式锁介绍摘自<a href="https://blog.didiyun.com/index.php/2018/11/20/zookeeper/" target="_blank" rel="noopener">https://blog.didiyun.com/index.php/2018/11/20/zookeeper/</a></p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>在单进程应用内，我们经常使用锁来保障多个线程并发访问同一资源的互斥性。在多进程、分布式场景下，如果多个系统或者单个系统的多个节点并发访问同一资源，为了保障对资源读写的互斥性，就需要用到分布式锁。</p><h2 id="为什么用Zookeeper来实现分布式锁？"><a href="#为什么用Zookeeper来实现分布式锁？" class="headerlink" title="为什么用Zookeeper来实现分布式锁？"></a>为什么用Zookeeper来实现分布式锁？</h2><p><code>Zookeeper</code> 能够保障分布式场景下数据的一致性、有序性、原子性及可靠性，它的所有写入动作会在 Leader 节点持久化，并在集群过半数节点写入成功才会返回；它也能够支持节点的崩溃恢复以及客户端的最终一致性视图。对于分布式锁场景来说，数据一致性的保障、以及锁服务的容灾保障至关重要。</p><p>另外，<code>Zookeeper</code> 还提供了三种在分布式锁场景下非常有用的特性（以下的<code>节点</code>指的是<code>Zookeeper</code>内部存储的<code>znode</code>节点）：</p><ol><li>临时节点<br>客户端可以指定 zk 创建一个临时节点，此节点将在这个客户端与服务端建立的 <a href="https://link.juejin.im/?target=https%3A%2F%2Fzookeeper.apache.org%2Fdoc%2Fr3.3.6%2FzookeeperProgrammers.html%23ch_zkSessions" target="_blank" rel="noopener">session</a> 到期时自动删除，这个特性可以保障客户端创建的分布式锁节点在客户端宕机或者网络通讯中断一段时间后自动释放该临时节点，从而避免分布式锁由于客户端或网络原因导致的死锁问题。</li><li>有序节点<br>客户端可以指定 zk 创建一个有序节点，此节点将自动在客户端指定的节点名后面添加一个单调递增序号来确保多个客户端同时创建相同的节点名时能够创建成功，并且保障越早创建的节点的序号越小。利用该特性可以实现锁的互斥性和公平性，即同一时刻只有一个客户端能够成功获取到锁（序号最小的一个获取到锁），获取锁失败的节点可以按照创建顺序进行锁等待。</li><li>watcher 机制<br>可以对一个节点的读操作注册一个 watcher监听器，当节点有变化时（例如节点被删除或更新）zk 服务端将主动通知注册了监听的客户端。这样对于正在等待锁的客户端可以及时得知锁被释放的事件从而重新进行抢锁动作。</li></ol><p>以上三种特性可以结合使用，比如创建一个临时 + 有序节点，再注册一个其它序号节点的watcher监听来感知其他节点的变化。我们可以利用 <code>Zookeeper</code> 原生提供的这些特性实现各种可靠、安全的分布式锁。</p><h2 id="常用的分布式锁类型"><a href="#常用的分布式锁类型" class="headerlink" title="常用的分布式锁类型"></a>常用的分布式锁类型</h2><ul><li>排它锁（MutexLock）<br>任意时刻只有一个线程能够获取到锁，其他线程等待持有这把锁的线程释放锁后才能尝试获取锁。</li><li>信号量（Semaphore）<br>允许多个线程持有一定数量的租约（Lease）。在当前租约数量小于最大租约数时，允许新的请求获取到租约，一旦当前租约数等于最大租约数，则新的请求将等待已获取到租约的线程释放租约后才能尝试获取。一般用来控制访问一个资源池的最大并发度。</li><li>读写锁（ReadWriteLock）<br>写锁作为排它锁，任意时刻只有一个线程能获取到写锁。读锁作为共享锁，当没有写锁被持有的前提下，允许有多个线程同时获取到读锁。</li><li>联锁（MultiLock）<br>保障多个不同资源的锁获取或释放的原子性的一种组合锁。多个锁资源被封装成一个联锁后，要么全部获取成功，要么全部获取失败，联锁保障不会出现部分获取成功的情况。</li></ul><p>注意：以上提到的”线程”可能属于同一进程内，也可能属于不同进程。<code>Zookeeper</code> 能够保障在跨进程场景下数据的一致性。</p><h2 id="分布式锁的通用特性"><a href="#分布式锁的通用特性" class="headerlink" title="分布式锁的通用特性"></a>分布式锁的通用特性</h2><p>除了 <code>Zookeeper</code> 提供的一致性保障之外，分布式锁一般还需要提供如下的通用特性：</p><ul><li>公平性<br>在多个客户端抢锁的过程中，需要保障获取锁的公平性，先到达 <code>Zookeeper</code> 抢锁的请求能够先获取到锁（可以基于 <code>Zookeeper</code> 的有序节点特性来实现）。</li><li>等待超时<br>为了避免死锁，一般在获取锁时都需要传递一个超时时间，超时请求则获取锁失败。</li><li>可重入性<br>在一个线程内，如果已经持有一把锁，则在这把锁被释放前可以多次重复获取锁，其获取次数和释放次数需要保障一致。</li></ul><h2 id="分布式锁的实现库"><a href="#分布式锁的实现库" class="headerlink" title="分布式锁的实现库"></a>分布式锁的实现库</h2><p>推荐使用 Apache Curator库来实现分布式锁，它不仅封装了分布式锁的所有实现细节，还提供友好易用的 API。以下是 <code>Curator</code> 已经实现的分布式锁相关功能：</p><ul><li>可重入锁：<code>InterProcessMutex</code> 实现了可重入的排它锁，支持锁等待超时、保证获取锁的公平性。</li><li>不可重入锁：<code>InterProcessSemaphoreMutex</code> 实现了不可重入的排它锁，支持锁等待超时、保证获取锁的公平性。可以在多个线程间传递和释放锁，从而满足异步调用场景下的锁需求。</li><li>信号量：<code>InterProcessSemaphoreV2</code> 实现了信号量，支持信号量等待超时、保证获取信号量的公平性。客户端每次获取信号量成功都会返回一个租约（Lease）对象，建议客户端在 finally 代码块 close 这个租约对象以释放租约。注意在线程重入时，每次获取信号量成功也会占用一个租约。另外，在多进程场景下，可以通过 <code>SharedCountReader</code> 来保障最大租约数的一致性，避免不同的进程设置不同的最大租约数。</li><li>读写锁：<code>InterProcessReadWriteLock</code> 实现了可重入读写锁，支持锁等待超时、保证获取锁的公平性。并且支持写锁降级（持有写锁的线程可以同时获取到读锁），不支持读锁升级（持有读锁的线程不能同时获取到写锁）。</li><li>联锁：<code>InterProcessMultiLock</code> 实现了联锁，它使用装饰器模式实现多把锁的组合，与可重入锁、不可重入锁实现相同的接口，使得可以像使用单锁一样使用联锁。联锁获取成功代表它拥有的所有内部锁都获取成功，联锁获取失败则会自动释放所有内部已经获取成功的部分锁，从而保证联锁的原子性语义。</li></ul></blockquote><h2 id="安装ZooKeeper环境"><a href="#安装ZooKeeper环境" class="headerlink" title="安装ZooKeeper环境"></a>安装ZooKeeper环境</h2><p>首先在本地安装ZooKeeper环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zookeeper</span><br></pre></td></tr></table></figure><p>安装完成后，启动服务，默认配置文件不用修改，即/usr/local/etc/zookeeper/zoo.cfg<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zkServer  -h</span><br><span class="line">zkServer  start</span><br><span class="line">zkServer  status</span><br></pre></td></tr></table></figure></p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><h3 id="maven导入curator"><a href="#maven导入curator" class="headerlink" title="maven导入curator"></a>maven导入curator</h3><p>curator是比ZooKeeper的源生API更好用的包，使用的人也较多。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ZKLock-java"><a href="#ZKLock-java" class="headerlink" title="ZKLock.java"></a>ZKLock.java</h3><p>ZKLock.java我自己对curator的接口的封装，将基本的方法封装便于调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yanss.zk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.curator.RetryPolicy;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFramework;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFrameworkFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.retry.ExponentialBackoffRetry;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = Logger.getLogger(ZKLock.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHILD_NODE_PATH = <span class="string">"temp"</span>;</span><br><span class="line">    <span class="keyword">private</span> String baseLockPath;</span><br><span class="line">    <span class="keyword">private</span> String finalLockId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> needInterrupt = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> connected = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> acquireLock = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String host = <span class="string">"127.0.0.1:2181"</span>;</span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zooKeeper;</span><br><span class="line">    <span class="keyword">private</span> FatherNodeWatcher fatherNodeWatcher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ZKLock</span><span class="params">(String lock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.baseLockPath = <span class="string">"/"</span> + lock;</span><br><span class="line">        <span class="keyword">this</span>.fatherNodeWatcher = <span class="keyword">new</span> FatherNodeWatcher(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZKLock <span class="title">create</span><span class="params">(String lock)</span> </span>&#123;</span><br><span class="line">        ZKLock zkLock = <span class="keyword">new</span> ZKLock(lock);</span><br><span class="line">        zkLock.connectZooKeeper();</span><br><span class="line">        <span class="keyword">return</span> zkLock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!connected) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!needInterrupt) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LOG.warn(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (acquireLock) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i++ &gt; <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">releaseLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (zooKeeper != <span class="keyword">null</span> &amp;&amp; connected) &#123;</span><br><span class="line">                zooKeeper.delete(finalLockId, -<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.warn(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> disconnectZooKeeper();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">disconnectZooKeeper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (zooKeeper == <span class="keyword">null</span> &amp;&amp; !connected) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connected = <span class="keyword">false</span>;</span><br><span class="line">            acquireLock = <span class="keyword">false</span>;</span><br><span class="line">            zooKeeper.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.warn(String.format(<span class="string">"ZK disconnect failed. [%s]"</span>, e.getMessage()), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">connectZooKeeper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>);</span><br><span class="line">            CuratorFramework client = CuratorFrameworkFactory.newClient(host, <span class="number">5000</span>, <span class="number">3000</span>, retryPolicy);</span><br><span class="line"></span><br><span class="line">            zooKeeper = <span class="keyword">new</span> ZooKeeper(host, <span class="number">60000</span>, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (event.getState() == Watcher.Event.KeeperState.AuthFailed) &#123;</span><br><span class="line">                        needInterrupt = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getState() == Watcher.Event.KeeperState.Disconnected) &#123;</span><br><span class="line">                        needInterrupt = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getState() == Watcher.Event.KeeperState.Expired) &#123;</span><br><span class="line">                        needInterrupt = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (event.getType() == Watcher.Event.EventType.None) &#123;</span><br><span class="line">                            connected = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (!connected) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">100</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Thread.sleep(<span class="number">300</span>);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (connected) &#123;</span><br><span class="line">                <span class="keyword">if</span> (zooKeeper.exists(baseLockPath, <span class="keyword">true</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    zooKeeper.create(baseLockPath, <span class="string">""</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                finalLockId = zooKeeper.create(baseLockPath + <span class="string">"/"</span> + CHILD_NODE_PATH, <span class="string">""</span>.getBytes(),</span><br><span class="line">                        ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line"></span><br><span class="line">                checkAcquire();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                needInterrupt = <span class="keyword">true</span>;</span><br><span class="line">                LOG.warn(<span class="string">"Connect zookeeper failed. Time consumes 30 s"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.warn(e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkAcquire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!connected) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;String&gt; childrenList = zooKeeper.getChildren(baseLockPath, fatherNodeWatcher);</span><br><span class="line">            <span class="keyword">if</span> (judgePathNumMin(childrenList)) &#123;</span><br><span class="line">                acquireLock = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.warn(e.getMessage(), e);</span><br><span class="line">            disconnectZooKeeper();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">judgePathNumMin</span><span class="params">(List&lt;String&gt; paths)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (paths.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (paths.size() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            Collections.sort(paths, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String str1, String str2)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> num1;</span><br><span class="line">                    <span class="keyword">int</span> num2;</span><br><span class="line">                    String string1 = str1.substring(CHILD_NODE_PATH.length(), str1.length());</span><br><span class="line">                    String string2 = str2.substring(CHILD_NODE_PATH.length(), str2.length());</span><br><span class="line">                    num1 = Integer.parseInt(string1);</span><br><span class="line">                    num2 = Integer.parseInt(string2);</span><br><span class="line">                    <span class="keyword">if</span> (num1 &gt; num2) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num1 &lt; num2) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String minId = paths.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> finalLockId.equals(baseLockPath + <span class="string">"/"</span> + minId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">FatherNodeWatcher</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> ZKLock context;</span><br><span class="line"></span><br><span class="line">        FatherNodeWatcher(ZKLock context) &#123;</span><br><span class="line">            <span class="keyword">this</span>.context = context;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (event.getState() == Watcher.Event.KeeperState.AuthFailed) &#123;</span><br><span class="line">                context.needInterrupt = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getState() == Watcher.Event.KeeperState.Disconnected) &#123;</span><br><span class="line">                context.needInterrupt = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getState() == Watcher.Event.KeeperState.Expired) &#123;</span><br><span class="line">                context.needInterrupt = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (event.getType() == Event.EventType.NodeChildrenChanged) &#123;</span><br><span class="line">                    context.checkAcquire();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TestZKLockThread-java"><a href="#TestZKLockThread-java" class="headerlink" title="TestZKLockThread.java"></a>TestZKLockThread.java</h3><p>为了测试ZooKeeper的分布式锁是非有用，在本地开启多线程，同时段去请求锁，然后查看锁的竞争情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yanss.zk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestZKLockThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = Logger.getLogger(TestZKLockThread.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lockPath;</span><br><span class="line">    <span class="keyword">private</span> String num;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> threadNum 线程编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestZKLockThread</span><span class="params">(String lockPath, String threadNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lockPath = lockPath;</span><br><span class="line">        <span class="keyword">this</span>.num = threadNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ZKLock zkLock = ZKLock.create(lockPath);</span><br><span class="line">        <span class="keyword">if</span> (zkLock.getLock()) &#123;</span><br><span class="line">            LOG.error(String.format(<span class="string">"线程:[%s]获取到任务锁,并开始执行任务"</span>, num));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            LOG.error(String.format(<span class="string">"线程:[%s]已完成任务"</span>, num));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LOG.error(String.format(<span class="string">"线程:[%s]没有获取到任务锁,放弃执行任务"</span>, num));</span><br><span class="line">        &#125;</span><br><span class="line">        zkLock.releaseLock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TestZKLockWithMultiThread-java"><a href="#TestZKLockWithMultiThread-java" class="headerlink" title="TestZKLockWithMultiThread.java"></a>TestZKLockWithMultiThread.java</h3><p>运行测试方法<code>TestZKLockWithMultiThread.java</code>，查看控制台输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yanss.zk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.BasicConfigurator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestZKLockWithMultiThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BasicConfigurator.configure();</span><br><span class="line">        <span class="keyword">int</span> threadCount = <span class="number">5</span>;</span><br><span class="line">        List&lt;TestZKLockThread&gt; testZKLockThreads = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">            testZKLockThreads.add(<span class="keyword">new</span> TestZKLockThread(<span class="string">"lockpath"</span>, <span class="string">"Thread"</span> + i ));</span><br><span class="line">        &#125;</span><br><span class="line">        testZKLockThreads.forEach(tmp -&gt; tmp.start());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><ol><li><p>设置每个线程获取锁的等待时间为无限长（或者较长的时间比如60s），在<code>ZKLock.java</code>的第58行可修改时间，将</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i++ &gt; <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释掉，每个线程取得锁权限后处理逻辑时间为2s，运行<code>TestZKLockWithMultiThread.java</code>，控制台输出（已删去ZooKeeper的输出日志）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0 [Thread-0] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread0]获取到任务锁,并开始执行任务</span><br><span class="line">2011 [Thread-0] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread0]已完成任务</span><br><span class="line">3018 [Thread-1] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread1]获取到任务锁,并开始执行任务</span><br><span class="line">5022 [Thread-1] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread1]已完成任务</span><br><span class="line">5027 [Thread-4] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread4]获取到任务锁,并开始执行任务</span><br><span class="line">7030 [Thread-4] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread4]已完成任务</span><br><span class="line">7035 [Thread-2] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread2]获取到任务锁,并开始执行任务</span><br><span class="line">9036 [Thread-2] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread2]已完成任务</span><br><span class="line">9041 [Thread-3] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread3]获取到任务锁,并开始执行任务</span><br><span class="line">11048 [Thread-3] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread3]已完成任务</span><br></pre></td></tr></table></figure></li><li><p>设置每个线程获取锁的时间为5s，将第一步中注释掉的代码还原，同时将<code>TestZKLockThread.java</code>中32行的<code>zkLock.releaseLock();</code>注释掉，即获取锁完成任务后不再释放锁，控制台输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0 [Thread-4] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread4]获取到任务锁,并开始执行任务</span><br><span class="line">2002 [Thread-4] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread4]已完成任务</span><br><span class="line">6024 [Thread-2] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread2]没有获取到任务锁,放弃执行任务</span><br><span class="line">6024 [Thread-3] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread3]没有获取到任务锁,放弃执行任务</span><br><span class="line">6024 [Thread-0] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread0]没有获取到任务锁,放弃执行任务</span><br><span class="line">6024 [Thread-1] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread1]没有获取到任务锁,放弃执行任务</span><br></pre></td></tr></table></figure></li></ol><p>通过这两个测试用例，可以发现我在我的Mac上安装的ZooKeeper服务启动后，通过用本地5个线程进行获取锁和释放锁的操作，在ZooKeeper服务的调度下，可以达到预期的分布式锁的效果。更详细的服务性能不好测试，留待未来实际应用中再记录。</p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;201902W9 Share&lt;/p&gt;
    
    </summary>
    
    
      <category term="ZooKeeper" scheme="https://foreti.me/tags/ZooKeeper/"/>
    
      <category term="分布式锁" scheme="https://foreti.me/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
      <category term="Share" scheme="https://foreti.me/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Lombok让Java变得再次酷炫</title>
    <link href="https://foreti.me/2019/02/15/lombok-make-java-cool-again/"/>
    <id>https://foreti.me/2019/02/15/lombok-make-java-cool-again/</id>
    <published>2019-02-15T05:18:04.000Z</published>
    <updated>2019-07-27T02:14:09.300Z</updated>
    
    <content type="html"><![CDATA[<p>201902W5 Review, 这是一篇关于Spring开发插件Lombok的译文。</p><a id="more"></a><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190202144529.png" alt></p><p><a href="https://bytes.grubhub.com/lombok-makes-java-cool-again-171102bdcc52" target="_blank" rel="noopener">原文</a></p><p>在Grauhub，我们在大多数后端编程中都是用Java。Java是一门经过20多年实战考验的语言，已经证明了它的速度和可靠性。虽然我们已经使用Java很多年了，最近，它开始展现了它的老旧的特性。</p><p>尽管Java是最受欢迎的JVM语言之一，但它不是唯一的。在过去几年里，它面临着一些挑战者，比如Scala，Clojure和Kotlin，它们提供了新的功能和高效的语言特性。简而言之，它们让你用更少的代码做更多的事。<br>是的·<br>JVM生态系统中的这一创新令人兴奋。更多的竞争意味着Java被迫改变以保持竞争力。从Java 8（Valhalla，Local-Variable Type Inference，Loom）以来，新的六个月发布计划和几个JEP（JDK 增强提议）证明了Java在未来几年将继续保持竞争力。</p><p>但是，Java语言的大小和规模意味着开发进度比我们想要的要慢，更不用说Java不惜一切代价保持向后兼容性的强烈意愿。通过任何软件工程工作，功能都需要优先考虑，因此如果完全使用Java的话，我们想要的功能可能需要很长时间。与此同时，现在Grubhub利用Lombok项目获得简化和改进的Java。Lombok是一个编译器插件，它为Java添加了新的“关键字”，并将注释转换为Java代码，减少了繁杂的工程工作，并提供了一些额外的功能。</p><h2 id="设置Lombok"><a href="#设置Lombok" class="headerlink" title="设置Lombok"></a>设置Lombok</h2><p>Grubhub一直在寻求改进我们的软件生命周期，但每个新工具和流程都需要在采用之前考虑成本。幸运的是，添加Lombok就像在gradle文件中添加几行一样简单。</p><p>Lombok是一个编译器插件，因为它在编译器处理它们之前将源代码中的注释转换为Java语句–在运行时不需要提供lombok依赖项，因此添加Lombok不会增加构建工件的大小。因此，您需要下载Lombok并将其添加到您的构建工具中。要<a href="https://projectlombok.org/setup/gradle" target="_blank" rel="noopener">使用Gradle设置Lombok</a>（它也适用于<a href="https://projectlombok.org/setup/maven" target="_blank" rel="noopener">Maven</a>），请将此块添加到build.gradle文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &amp;apos;io.franzbecker.gradle-lombok&amp;apos; version &amp;apos;1.14&amp;apos;</span><br><span class="line">    id &amp;apos;java&amp;apos;</span><br><span class="line">&#125;</span><br><span class="line">repositories &#123;</span><br><span class="line">    jcenter() // or Maven central, required for Lombok dependency</span><br><span class="line">&#125;</span><br><span class="line">lombok &#123;</span><br><span class="line">    version = &amp;apos;1.18.4&amp;apos;</span><br><span class="line">    sha256 = &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于Lombok是一个编译器插件，我们为它编写的源代码实际上并不是有效的Java。因此，您还需要为正在使用的IDE安装插件。幸运的是，Lombok支持所有主要的Java IDE。没有插件，IDE不知道如何解析代码。IDE集成是无缝的。诸如“show usages”和“go to implementation”等功能继续按预期工作，带您进入相关字段/类。</p><h2 id="Lombok使用"><a href="#Lombok使用" class="headerlink" title="Lombok使用"></a>Lombok使用</h2><p>了解Lombok的最佳方式是看它的使用方法。让我们深入研究一些如何将Lombok应用于Java应用程序的常见方面的示例。</p><h3 id="为POJO增添趣味"><a href="#为POJO增添趣味" class="headerlink" title="为POJO增添趣味"></a>为POJO增添趣味</h3><p>我们使用普通的旧Java对象（POJO）将数据与处理分开，使我们的代码更易于阅读并简化网络有效负载。一个简单的POJO有一些私有字段和相应的getter和setter。它们只在写了很多样板代码之后可以完成了工作。</p><p>Lombok有助于使POJO更有用，更灵活，更有结构，而无需编写更多其他代码。使用Lombok，我们可以使用@Data注释简化最基本的POJO ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> UUID userId;</span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该@Data注释实际上是包含多个Lombok注释的便利结合。</p><ul><li><p><a href="https://projectlombok.org/features/ToString" target="_blank" rel="noopener">@ToString</a>生成该toString()方法的实现，该实现由包含类名和每个字段及其值的对象的“漂亮打印”版本组成。</p></li><li><p><a href="https://projectlombok.org/features/EqualsAndHashCode" target="_blank" rel="noopener">@EqualsAndHashCode</a>生成equals和hashCode方法的实现，默认情况下，它们使用所有非静态，非transient字段，但是可配置。</p></li><li><p><a href="https://projectlombok.org/features/GetterSetter" target="_blank" rel="noopener">@Getter/@Setter</a>为私有字段生成getter和setter方法。</p></li><li><p><a href="https://projectlombok.org/features/constructor" target="_blank" rel="noopener">@RequiredArgsConstructor</a>生成带参数的构造函数，其中需要参数是常量字段和带@NonNull注释的字段（稍后将详细介绍）。</p></li></ul><p>这一个注释简单而优雅地涵盖了许多常见用例，但POJO并不总是足够的。一个注释@Data的类是完全可变的，它一旦被滥用，可能在应用程序增加复杂性和限制并发量，这两点都有害于应用程序的持久性。</p><p>Lombok刚刚修复。让我们重新审视我们的User类，使其不可变，并添加一些其他有用的Lombok注释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="meta">@Builder</span>(toBuilder = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="meta">@NonNull</span> </span><br><span class="line">  UUID userId;</span><br><span class="line">  <span class="meta">@NonNull</span> </span><br><span class="line">  String email;</span><br><span class="line">  <span class="meta">@Singular</span></span><br><span class="line">  Set&lt;String&gt; favoriteFoods;</span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@Builder</span>.Default</span><br><span class="line">  String avatar = “<span class="keyword">default</span>.png”;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所需要的只是@Value注释。@Value类似于@Data，除了所有字段都默认为private和final，并且不生成setter。这些特点使注释@Value的对象有效地不变。由于字段都是常量的，因此没有无参数构造函数。相反，Lombok用@AllArgsConstructor生成所有参数构造函数，这产生了一个功能完备，有效不可变的对象。</p><p>但是，如果只能使用all args构造函数创建对象，那么不可变是不太有用的。Joshua Bloch在《Effective Java》解释，当面临着许多构造函数参数时应该使用建造者。这就是Lombok的@Builder的作用，自动生成构建器内部类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User user = User.builder()</span><br><span class="line">  .userId(UUID.random())</span><br><span class="line">  .email(“grubhub<span class="meta">@grubhub</span>.com”)</span><br><span class="line">  .favoriteFood(“burritos”)</span><br><span class="line">  .favoriteFood(“dosas”)</span><br><span class="line">  .build()</span><br></pre></td></tr></table></figure><p>使用Lombok生成的构建器可以轻松创建具有多个参数的对象，并在将来添加新字段。静态构建器方法返回构建器实例以设置对象的所有属性。设置后，在构建器上调用build()方法返回实例。</p><p>该@NonNull注释可被用来在对象被实例化时，断言这些字段不为空，在空时抛出一个NullPointerException。请注意头像字段是如何注释@NonNull但未设置的。这是因为@Builder.Default注释表示默认使用“default.png”。（Grubhub是一个美国外卖公司，这里的头像指用户头像。）</p><p>还要注意构建器使用<code>favoriteFood</code>，即对象上属性的单数名称。当@Singular注释放在集合属性上时，Lombok会创建特殊的构建器方法来单独向该集合添加项目，而不是一次添加整个集合。这对于测试来说特别好，因为在Java中创建小型集合并不简洁。</p><p>最后，<code>toBuilder = true</code>设置添加了一个实例方法toBuilder()，该方法创建一个使用该实例的所有值填充的构建器对象。这样可以轻松创建一个预先填充原始实例中所有值的新实例，并仅更改所需的字段。这对于@Value类特别有用，因为字段是不可变的。</p><p>通过一些注释，你可以进一步配置专门的setter功能。@Wither为每个接受值的属性创建“withX”方法，并返回实例的克隆，并更新一个字段值。@Accessors允许您配置自动创建的setter。默认情况下，它允许将setter链接起来，就像构建器一样，返回而不是void。它还有一个参数，<code>fluent=true</code>，它删除了getter和setter上的“get”和“set”前缀约定。如果用例需要更多自定义，这对于@Builder可能是一个有用的替代品。</p><p>如果Lombok实现不适合您的用例（并且您已经查看了注释的修饰符），那么您始终可以手动编写自己的实现。例如，如果您有一个@Data类但是一个getter需要自定义逻辑，那么只需实现该getter。Lombok将看到已经提供了一个实现，并且不会使用自动生成的实现重写它。</p><p>只需几个简单的注释，最初的User POJO已经获得了许多丰富的功能，使其更易于使用，而不会给我们的工程师带来太多负担或增加开发的时间或成本。</p><h3 id="删除组件样板代码"><a href="#删除组件样板代码" class="headerlink" title="删除组件样板代码"></a>删除组件样板代码</h3><p>Lombok不仅在POJO中有用 - 它可以应用于应用程序的任何层。Lombok的以下用法在应用程序的组件类中特别有用，例如Controller，Service和DAO（数据访问对象）。</p><p>日志是每个软件的基准需求，作为关键的调查工具。任何正在做有意义的工作的类都应该记录日志信息。由于日志记录是一个贯穿各领域的问题，因此在每个类中声明一个<code>private static final logger</code>成为即时模板。Lombok将此样板简化为一个注释，该注释自动定义并实例化具有正确类名的记录器。根据您使用的日志记录框架，有一些不同的注释。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j <span class="comment">// also: @CommonsLog @Flogger @JBossLog @Log @Log4j @Log4j2 @XSlf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  <span class="comment">// created automatically</span></span><br><span class="line">  <span class="comment">// private static final org.slf4j.Logger log = </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在声明了logger之后，接下来让我们添加我们的依赖项：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@FieldDefaults</span>(makeFinal=<span class="keyword">true</span>, level=AccessLevel.PRIVATE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  <span class="meta">@NonNull</span> UserDao userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该@FieldDefaults注释增加了final和private修饰符的所有字段。在@RequiredArgsConstructor创建构造器接受并设置一个UserDao实例。该@NonNull注释在构造函数中增加了一个检查，如果UserDao实例为null抛出一个NullPointerException。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>有很多方法可以使用Lombok。以上两节主要针对特定用例，但Lombok可以在许多方面使开发更容易。以下是一些小例子，展示了如何更有效地利用Lombok。</p><p>尽管Java 9引入了var关键字，var仍可以重新分配。Lombok提供了一个val关键字，它可以在var不支持的地方生效，提供本地常量推断变量。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// final Map map = new HashMap&lt;Integer, String&gt;();</span></span><br><span class="line">val map = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br></pre></td></tr></table></figure></p><p>有些类只具有纯静态函数，而且从不打算初始化。声明抛出异常的私有构造函数是阻止它实例化的一种方法。Lombok在其@UtilityClass注释中编写了该模式，该注释创建了一个私有构造函数，它抛出异常，使类成为final，并使所有方法都是静态的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UtilityClass</span></span><br><span class="line"><span class="comment">// will be made final</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilityClass</span> </span>&#123;</span><br><span class="line">  <span class="comment">// will be made static</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> GRUBHUB = “ GRUBHUB”;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// autogenerated by Lombok</span></span><br><span class="line">  <span class="comment">// private UtilityClass() &#123;</span></span><br><span class="line">  <span class="comment">//   throw new java.lang.UnsupportedOperationException("This is a utility class and cannot be instantiated");</span></span><br><span class="line">  <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// will be made static</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">append</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> input + GRUBHUB;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对Java的常见批评是创建通过抛出已检查的异常的冗长。Lombok有一个注释，可以删除那些讨厌的关键词：@SneakyThrows。正如您所料，实现非常狡猾（sneaky）。它不会吞下甚至将异常包装成一个RuntimeException。相反，它依赖于以下事实：在运行时，JVM不会检查已检查异常的一致性。只有javac这样做。因此，Lombok使用字节码转换在编译时选择退出此检查。这导致代码顺利运行。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SneakyThrows</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sneakyThrow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="并排比较"><a href="#并排比较" class="headerlink" title="并排比较"></a>并排比较</h2><p>没什么能比做并排比较更清楚看到Lombok节省的代码。IDE插件提供了一个“de-lombok”函数，可将大多数Lombok注释转换为近似的本机Java代码（@NonNull注释不转换）。安装了Lombok插件的任何IDE都允许你将大多数注释转换为本机Java代码（并再次返回）。让我们从上面回到我们的User类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="meta">@Builder</span>(toBuilder = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="meta">@NonNull</span> </span><br><span class="line">  UUID userId;</span><br><span class="line">  <span class="meta">@NonNull</span> </span><br><span class="line">  String email;</span><br><span class="line">  <span class="meta">@Singular</span></span><br><span class="line">  Set&lt;String&gt; favoriteFoods;</span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@Builder</span>.Default</span><br><span class="line">  String avatar = “<span class="keyword">default</span>.png”;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Lombok类只有13条简单易读的描述性代码行。但是在运行de-lombok之后，这个课程变成了一百多行的样板，没有人愿意看到，但每个人都想要！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@NonNull</span></span><br><span class="line">   UUID userId;</span><br><span class="line">   <span class="meta">@NonNull</span></span><br><span class="line">   String email;</span><br><span class="line">   Set&lt;String&gt; favoriteFoods;</span><br><span class="line">   <span class="meta">@NonNull</span></span><br><span class="line">   <span class="meta">@Builder</span>.Default</span><br><span class="line">   String avatar = <span class="string">"default.png"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@java</span>.beans.ConstructorProperties(&#123;<span class="string">"userId"</span>, <span class="string">"email"</span>, <span class="string">"favoriteFoods"</span>, <span class="string">"avatar"</span>&#125;)</span><br><span class="line">   User(UUID userId, String email, Set&lt;String&gt; favoriteFoods, String avatar) &#123;</span><br><span class="line">       <span class="keyword">this</span>.userId = userId;</span><br><span class="line">       <span class="keyword">this</span>.email = email;</span><br><span class="line">       <span class="keyword">this</span>.favoriteFoods = favoriteFoods;</span><br><span class="line">       <span class="keyword">this</span>.avatar = avatar;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserBuilder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> UserBuilder();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@NonNull</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> UUID <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.userId;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@NonNull</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.email;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getFavoriteFoods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.favoriteFoods;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@NonNull</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getAvatar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.avatar;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (o == <span class="keyword">this</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> User)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">final</span> User other = (User) o;</span><br><span class="line">       <span class="keyword">final</span> Object <span class="keyword">this</span>$userId = <span class="keyword">this</span>.getUserId();</span><br><span class="line">       <span class="keyword">final</span> Object other$userId = other.getUserId();</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>$userId == <span class="keyword">null</span> ? other$userId != <span class="keyword">null</span> : !<span class="keyword">this</span>$userId.equals(other$userId)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">final</span> Object <span class="keyword">this</span>$email = <span class="keyword">this</span>.getEmail();</span><br><span class="line">       <span class="keyword">final</span> Object other$email = other.getEmail();</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>$email == <span class="keyword">null</span> ? other$email != <span class="keyword">null</span> : !<span class="keyword">this</span>$email.equals(other$email)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">final</span> Object <span class="keyword">this</span>$favoriteFoods = <span class="keyword">this</span>.getFavoriteFoods();</span><br><span class="line">       <span class="keyword">final</span> Object other$favoriteFoods = other.getFavoriteFoods();</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>$favoriteFoods == <span class="keyword">null</span> ? other$favoriteFoods != <span class="keyword">null</span> : !<span class="keyword">this</span>$favoriteFoods.equals(other$favoriteFoods))</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">final</span> Object <span class="keyword">this</span>$avatar = <span class="keyword">this</span>.getAvatar();</span><br><span class="line">       <span class="keyword">final</span> Object other$avatar = other.getAvatar();</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>$avatar == <span class="keyword">null</span> ? other$avatar != <span class="keyword">null</span> : !<span class="keyword">this</span>$avatar.equals(other$avatar)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">int</span> PRIME = <span class="number">59</span>;</span><br><span class="line">       <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">final</span> Object $userId = <span class="keyword">this</span>.getUserId();</span><br><span class="line">       result = result * PRIME + ($userId == <span class="keyword">null</span> ? <span class="number">43</span> : $userId.hashCode());</span><br><span class="line">       <span class="keyword">final</span> Object $email = <span class="keyword">this</span>.getEmail();</span><br><span class="line">       result = result * PRIME + ($email == <span class="keyword">null</span> ? <span class="number">43</span> : $email.hashCode());</span><br><span class="line">       <span class="keyword">final</span> Object $favoriteFoods = <span class="keyword">this</span>.getFavoriteFoods();</span><br><span class="line">       result = result * PRIME + ($favoriteFoods == <span class="keyword">null</span> ? <span class="number">43</span> : $favoriteFoods.hashCode());</span><br><span class="line">       <span class="keyword">final</span> Object $avatar = <span class="keyword">this</span>.getAvatar();</span><br><span class="line">       result = result * PRIME + ($avatar == <span class="keyword">null</span> ? <span class="number">43</span> : $avatar.hashCode());</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"User(userId="</span> + <span class="keyword">this</span>.getUserId() + <span class="string">", email="</span> + <span class="keyword">this</span>.getEmail() + <span class="string">", favoriteFoods="</span> + <span class="keyword">this</span>.getFavoriteFoods() + <span class="string">", avatar="</span> + <span class="keyword">this</span>.getAvatar() + <span class="string">")"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> UserBuilder <span class="title">toBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> UserBuilder().userId(<span class="keyword">this</span>.userId).email(<span class="keyword">this</span>.email).favoriteFoods(<span class="keyword">this</span>.favoriteFoods).avatar(<span class="keyword">this</span>.avatar);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBuilder</span> </span>&#123;</span><br><span class="line">       <span class="keyword">private</span> UUID userId;</span><br><span class="line">       <span class="keyword">private</span> String email;</span><br><span class="line">       <span class="keyword">private</span> ArrayList&lt;String&gt; favoriteFoods;</span><br><span class="line">       <span class="keyword">private</span> String avatar;</span><br><span class="line"></span><br><span class="line">       UserBuilder() &#123;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> User.<span class="function">UserBuilder <span class="title">userId</span><span class="params">(UUID userId)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.userId = userId;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> User.<span class="function">UserBuilder <span class="title">email</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.email = email;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> User.<span class="function">UserBuilder <span class="title">favoriteFood</span><span class="params">(String favoriteFood)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.favoriteFoods == <span class="keyword">null</span>) <span class="keyword">this</span>.favoriteFoods = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">           <span class="keyword">this</span>.favoriteFoods.add(favoriteFood);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> User.<span class="function">UserBuilder <span class="title">favoriteFoods</span><span class="params">(Collection&lt;? extends String&gt; favoriteFoods)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.favoriteFoods == <span class="keyword">null</span>) <span class="keyword">this</span>.favoriteFoods = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">           <span class="keyword">this</span>.favoriteFoods.addAll(favoriteFoods);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> User.<span class="function">UserBuilder <span class="title">clearFavoriteFoods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.favoriteFoods != <span class="keyword">null</span>)</span><br><span class="line">               <span class="keyword">this</span>.favoriteFoods.clear();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> User.<span class="function">UserBuilder <span class="title">avatar</span><span class="params">(String avatar)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.avatar = avatar;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> User <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           Set&lt;String&gt; favoriteFoods;</span><br><span class="line">           <span class="keyword">switch</span> (<span class="keyword">this</span>.favoriteFoods == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.favoriteFoods.size()) &#123;</span><br><span class="line">               <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                   favoriteFoods = java.util.Collections.emptySet();</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                   favoriteFoods = java.util.Collections.singleton(<span class="keyword">this</span>.favoriteFoods.get(<span class="number">0</span>));</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">default</span>:</span><br><span class="line">                   favoriteFoods = <span class="keyword">new</span> java.util.LinkedHashSet&lt;String&gt;(<span class="keyword">this</span>.favoriteFoods.size() &lt; <span class="number">1073741824</span> ? <span class="number">1</span> + <span class="keyword">this</span>.favoriteFoods.size() + (<span class="keyword">this</span>.favoriteFoods.size() - <span class="number">3</span>) / <span class="number">3</span> : Integer.MAX_VALUE);</span><br><span class="line">                   favoriteFoods.addAll(<span class="keyword">this</span>.favoriteFoods);</span><br><span class="line">                   favoriteFoods = java.util.Collections.unmodifiableSet(favoriteFoods);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> User(userId, email, favoriteFoods, avatar);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"User.UserBuilder(userId="</span> + <span class="keyword">this</span>.userId + <span class="string">", email="</span> + <span class="keyword">this</span>.email + <span class="string">", favoriteFoods="</span> + <span class="keyword">this</span>.favoriteFoods + <span class="string">", avatar="</span> + <span class="keyword">this</span>.avatar + <span class="string">")"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以从上面为UserService类做同样的事情。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@FieldDefaults</span>(makeFinal=<span class="keyword">true</span>, level=AccessLevel.PRIVATE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  <span class="meta">@NonNull</span> UserDao userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将导致大约这个Java代码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(UserService.class);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> UserDao userDao;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@java</span>.beans.ConstructorProperties(&#123;<span class="string">"userDao"</span>&#125;)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (userDao == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"userDao is marked @NonNull but is null"</span>)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h2 id="衡量影响"><a href="#衡量影响" class="headerlink" title="衡量影响"></a>衡量影响</h2><p>Grubhub有超过一百种服务来满足业务需求。我们采用了其中一种服务并运行了Lombok IntelliJ插件的“de-lombok”功能，以查看使用Lombok节省了多少行代码。结果是大约180个文件的更改，导致大约18,000个额外的代码行和800个Lombok使用的删除。这是18,000行自动生成，标准化和经过实战考验的代码行！平均而言，每行Lombok代码都节省了23行Java代码。有了这样的影响，很难想象没有Lombok就使用Java。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Lombok是一种很好的方式，可以激发工程师的新语言功能，而无需在整个组织内付出太多努力。将插件应用于项目当然比使用现有代码训练所有工程师使用新语言和端口更容易。Lombok可能没有一切，但它确实提供了足够的开箱即用，对工程经验产生了明显的影响。</p><p>Lombok的另一个好处是它使我们的代码库保持一致。凭借遍布全球的一百多种不同服务和分布式团队，使我们的代码库保持一致，可以更轻松地扩展团队并减少启动新项目时上下文切换的负担。自Java 6以来，Lombok与任何版本的Java都相关，因此我们可以指望它在所有项目中都可用。</p><p>Lombok对Grubhub的意义远远超过了闪亮的新功能。毕竟，Lombok做的任何事情都可以手工编写。如图所示，Lombok简化了代码库的无聊部分，而不会影响业务逻辑。这使我们专注于为Grubhub提供最大价值的工作，并且是我们工程师最感兴趣的工作。编写者，审阅者和维护者让代码库的这么大部分成为单调的样板代码是浪费时间。此外，由于此代码不再手动编写，因此它消除了所有类型的拼写错误。自动生成的好处与强大的功能相结合，@NonNull减少了漏洞的可能性，并使我们的工程专注于为您提供便利！</p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;201902W5 Review, 这是一篇关于Spring开发插件Lombok的译文。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Review" scheme="https://foreti.me/tags/Review/"/>
    
      <category term="Java" scheme="https://foreti.me/tags/Java/"/>
    
      <category term="Lombok" scheme="https://foreti.me/tags/Lombok/"/>
    
  </entry>
  
  <entry>
    <title>MacOS tomcat启动80端口</title>
    <link href="https://foreti.me/2018/07/18/macos-tomcat-80/"/>
    <id>https://foreti.me/2018/07/18/macos-tomcat-80/</id>
    <published>2018-07-18T12:16:02.000Z</published>
    <updated>2019-07-27T02:14:09.300Z</updated>
    
    <content type="html"><![CDATA[<p>Mac OS上非root用户是不允许启动小于1024的端口，所以在mac上使用IDE开发，比如在Eclipse或者Intellij中，启动服务用80端口，会报错Permission Denied。</p><a id="more"></a><hr><p>可以通过修改Tomcat的用户为root来解决，但是更简单的是设置一个端口监听转发，将其他端口比如8080转发到80，这样在浏览器中输入地址就不用写端口号了。</p><p>命令：</p><ol><li><code>sudo vim /etc/pf.conf</code></li><li>在<code>rdr-anchor &quot;com.apple/*&quot;</code>这一行后面添加<code>rdr on lo0 inet proto tcp from any to 127.0.0.1 port 80 -&gt; 127.0.0.1 port 8080</code>，保存退出</li><li><code>sudo pfctl -f /etc/pf.conf</code></li><li><code>sudo pfctl -e</code></li></ol><p>这样就完成了，如果想关闭转发，输入<code>sudo pfctl -d</code>。</p><p>重启后转发需要重新开启生效，即输入3，4命令</p><p>如果要重启后自动生效，首先关闭系统完整性保护机制，需重启到安全模式在终端中执行下述命令关闭文件系统保护<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csrutil enable --without fs</span><br></pre></td></tr></table></figure></p><p>然后<code>sudo vim /System/Library/LaunchDaemons/com.apple.pfctl.plist</code>, 添加一行 <code>&lt;string&gt;-e&lt;/string&gt;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;string&gt;pfctl&lt;/string&gt;</span><br><span class="line">&lt;string&gt;-e&lt;/string&gt;</span><br><span class="line">&lt;string&gt;-f&lt;/string&gt;</span><br><span class="line">&lt;string&gt;/etc/pf.conf&lt;/string&gt;</span><br></pre></td></tr></table></figure></p><p>保存退出。</p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac OS上非root用户是不允许启动小于1024的端口，所以在mac上使用IDE开发，比如在Eclipse或者Intellij中，启动服务用80端口，会报错Permission Denied。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mac" scheme="https://foreti.me/tags/mac/"/>
    
      <category term="tomcat" scheme="https://foreti.me/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>spring自动注入静态属性</title>
    <link href="https://foreti.me/2018/07/17/spring-autowired-static/"/>
    <id>https://foreti.me/2018/07/17/spring-autowired-static/</id>
    <published>2018-07-17T11:59:35.000Z</published>
    <updated>2019-07-27T02:14:09.300Z</updated>
    
    <content type="html"><![CDATA[<p>stackoverflow问题 Can you use @Autowired with static fields?</p><a id="more"></a><hr><p><a href="https://stackoverflow.com/questions/1018797/can-you-use-autowired-with-static-fields" target="_blank" rel="noopener">链接</a><br>Spring中有时需要在静态方法中使用自动注入的属性，例如Service或者Mapper，而@autiwored是不能注解静态属性的，这是因为静态属性是类的属性，而spring注入是对象层面的依赖注入，所以spring是不支持注入静态属性的，这时候如果非得用，就要曲线救国了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Component(&quot;NewClass&quot;)</span><br><span class="line">public class NewClass&#123;</span><br><span class="line">    private static SomeThing someThing;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    public void setSomeThing(SomeThing someThing)&#123;</span><br><span class="line">        NewClass.someThing = someThing;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;stackoverflow问题 Can you use @Autowired with static fields?&lt;/p&gt;
    
    </summary>
    
    
      <category term="spring" scheme="https://foreti.me/tags/spring/"/>
    
      <category term="autowired" scheme="https://foreti.me/tags/autowired/"/>
    
  </entry>
  
  <entry>
    <title>centos搭建Jupyter Notebook</title>
    <link href="https://foreti.me/2018/07/06/centos-jupyter-notebook/"/>
    <id>https://foreti.me/2018/07/06/centos-jupyter-notebook/</id>
    <published>2018-07-06T12:56:58.000Z</published>
    <updated>2019-07-27T02:14:09.285Z</updated>
    
    <content type="html"><![CDATA[<p>centos搭建Jupyter Notebook, 添加多语言支持(R,Ruby,Octave,JS,Java,C++).</p><a id="more"></a><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/centos-jn-overview.png" alt></p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>主要熟悉常用命令，<br><code>wget [url]</code>下载，</p><p><code>tar -xvf</code>解压<code>.tar.gz</code>，</p><p>使用yum包管理工具<code>yum search xx</code>搜索, <code>yum install xx</code>下载。</p><p><code>whereis</code>，<code>which</code>查找文件， <code>find [path] -name xxx</code>查找指定目录下的文件</p><p><code>ps -ef | grep jupyter</code> 查看jupyter运行的pid</p><h1 id="安装jupyter"><a href="#安装jupyter" class="headerlink" title="安装jupyter"></a>安装jupyter</h1><ol><li><p>下载Anaconda最新版本，省事。在官网找到下载链接，python3.6版本，然后</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.anaconda.com/archive/Anaconda3-5.2.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p> 然后运行脚本</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash Anaconda3-3-5.2.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p> 中间需要确定时确定即可，等待安装完成，会自动写入环境变量。</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda --version</span><br><span class="line">jupyter --version</span><br></pre></td></tr></table></figure></li><li><p>然后按照官网步骤，设置config</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br><span class="line"><span class="comment"># 会生成config文件为 .jupyter/jupyter_notebook_config.py</span></span><br></pre></td></tr></table></figure><p> 设置密码</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from notebook.auth import passwd</span><br><span class="line">passwd()</span><br><span class="line"># 会生成类似 sha1:xxxxxxxxxxxxxxxxxxx， 需要记一下</span><br></pre></td></tr></table></figure><p> 然后编辑 config文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure><p> 修改这些行，去掉注释，填相应值。其他选项也可以自己设置</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.password = &apos;sha1:xxxxxxxxxxxxxxxxxxx&apos;</span><br><span class="line">c.NotebookApp.ip = &apos;*&apos;</span><br><span class="line">c.NotebookApp.open_browser = False</span><br><span class="line">c.NotebookApp.port = 8888</span><br></pre></td></tr></table></figure></li><li><p>开放和重启防火墙<br> centos7：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8888/tcp --permanent # 永久开放8888端口</span><br><span class="line">firewall-cmd --reload # 重启firewall</span><br><span class="line">firewall-cmd --list-ports # 查看开放端口</span><br></pre></td></tr></table></figure><p> centos6：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport 8888 -j ACCEPT # 开放8888端口</span><br><span class="line">/etc/rc.d/init.d/iptables save # 保存</span><br><span class="line">service iptables status # 查看防火墙状态</span><br></pre></td></tr></table></figure></li><li><p>启动server，<code>jupyter notebook</code>。如果需要后台启动，运行<br><code>nohup jupyter notebook &gt; jupyter.log 2&gt;&amp;1 &amp;</code></p></li></ol><h1 id="安装其他kernel"><a href="#安装其他kernel" class="headerlink" title="安装其他kernel"></a>安装其他kernel</h1><p>主要根据 [Jupyter kernels wiki](<a href="https://github.com/jupyter/jupyter/wiki/Jupyter-kernels）" target="_blank" rel="noopener">https://github.com/jupyter/jupyter/wiki/Jupyter-kernels）</a></p><h2 id="py2-7"><a href="#py2-7" class="headerlink" title="py2.7"></a>py2.7</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n ipykernel_py2 python=2 ipykernel</span><br><span class="line">source activate ipykernel_py2</span><br><span class="line">python -m ipykernel install --user</span><br></pre></td></tr></table></figure><h2 id="ruby"><a href="#ruby" class="headerlink" title="ruby"></a>ruby</h2><p><a href="https://github.com/SciRuby/iruby" target="_blank" rel="noopener">iruby</a>, ruby需要版本大于2.1</p><ol><li><p>准备工作，安装环境。<br>yum 下载的可能不是最新的ruby，所以用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y git-core ruby-devel ruby zlib zlib-devel gcc-c++ patch readline readline-devel libyaml-devel libffi-devel openssl-devel make</span><br></pre></td></tr></table></figure></li><li><p>ruby kernel需要ZeroMQ</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install zeromq-devel zeromq czmq</span><br><span class="line">gem install cztop rbczmq ffi_rzmq</span><br></pre></td></tr></table></figure></li><li><p>安装iruby kernel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gem install cztop iruby</span><br><span class="line">iruby register --force</span><br></pre></td></tr></table></figure></li></ol><h2 id="R"><a href="#R" class="headerlink" title="R"></a>R</h2><p>按照<a href="https://irkernel.github.io/" target="_blank" rel="noopener">irkernel</a>的安装步骤，<br>或者直接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c r r-essentials</span><br></pre></td></tr></table></figure></p><h2 id="octave"><a href="#octave" class="headerlink" title="octave"></a>octave</h2><p>pip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install octave_kernel</span><br></pre></td></tr></table></figure><p>或者conda</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels conda-forge</span><br><span class="line">conda install octave_kernel</span><br></pre></td></tr></table></figure><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><p>首先安装nodejs和npm，然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g ijavascript</span><br><span class="line">ijsinstall</span><br></pre></td></tr></table></figure><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><p><a href="https://github.com/SpencerPark/IJava" target="_blank" rel="noopener">IJava</a> ,需要安装java 9或10，设置好环境变量，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk-10.0.1/</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/SpencerPark/IJava.git --depth 1</span><br><span class="line">cd IJava/</span><br><span class="line">chmod u+x gradlew</span><br><span class="line">./gradlew installKernel</span><br></pre></td></tr></table></figure><h2 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h2><p><a href="https://github.com/QuantStack/xeus-cling" target="_blank" rel="noopener">xues-cling</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n cling</span><br><span class="line">source activate cling</span><br><span class="line">conda install xeus-cling notebook -c QuantStack -c conda-forge</span><br></pre></td></tr></table></figure><p>有个问题是需要切换到cling环境启动jupyter才会有c++的kernel，找了一下cling 的kernel文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find anaconda3/envs/cling -name kernels</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">anaconda3/envs/cling/lib/python3.6/site-packages/notebook/services/kernels</span><br><span class="line">anaconda3/envs/cling/lib/python3.6/site-packages/notebook/static/services/kernels</span><br><span class="line">anaconda3/envs/cling/share/jupyter/kernels</span><br></pre></td></tr></table></figure><p>进入到<code>/share/jupyter/kernels</code>，发现了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd anaconda3/envs/cling/share/jupyter/kernels</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">total 16</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jul  5 14:48 python3</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jul  5 14:48 xeus-cling-cpp11</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jul  5 14:48 xeus-cling-cpp14</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jul  5 14:48 xeus-cling-cpp17</span><br></pre></td></tr></table></figure><p>现在，看一下jupyter kernel的文件目录在哪</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter kernelspec list</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Available kernels:</span><br><span class="line">  java                /root/.ipython/kernels/java</span><br><span class="line">  ruby                /root/.ipython/kernels/ruby</span><br><span class="line">  ir                  /root/.local/share/jupyter/kernels/ir</span><br><span class="line">  javascript          /root/.local/share/jupyter/kernels/javascript</span><br><span class="line">  python2             /root/.local/share/jupyter/kernels/python2</span><br><span class="line">  python3             /root/.local/share/jupyter/kernels/python3</span><br><span class="line">  octave              /root/anaconda3/share/jupyter/kernels/octave</span><br><span class="line">  bash                /usr/local/share/jupyter/kernels/bash</span><br></pre></td></tr></table></figure><p>确定是<code>.ipython/kernels/</code>的这一个。</p><p>将<code>xeus-cling-cpp11  xeus-cling-cpp14  xeus-cling-cpp17</code>这三个文件夹复制到<code>.ipython/kernels/</code>下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp xeus-cling-cpp11 .ipython/kernels/</span><br><span class="line">cp xeus-cling-cpp14 .ipython/kernels/</span><br><span class="line">cp xeus-cling-cpp17 .ipython/kernels/</span><br></pre></td></tr></table></figure><p>完成。</p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;centos搭建Jupyter Notebook, 添加多语言支持(R,Ruby,Octave,JS,Java,C++).&lt;/p&gt;
    
    </summary>
    
    
      <category term="jupyter" scheme="https://foreti.me/tags/jupyter/"/>
    
  </entry>
  
  <entry>
    <title>Java主线程等待子线程的几种方法</title>
    <link href="https://foreti.me/2018/04/04/java-concurrent-join/"/>
    <id>https://foreti.me/2018/04/04/java-concurrent-join/</id>
    <published>2018-04-04T01:47:35.000Z</published>
    <updated>2019-07-27T02:14:09.300Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇关于Java中的多线程下，让主线程等待子线程执行的几种方法。</p><a id="more"></a><hr><p>在很多时候, 都需要在主线程中等待所有线程执行完毕, 再进行其他的操作. 在这种情况下, 显然如下的写法是不行的.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.getName() + <span class="string">" start"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.getName() + <span class="string">" end"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"runtime: "</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这时候的输出是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">runtime: 0</span><br><span class="line">Thread-0 start</span><br><span class="line">Thread-0 end</span><br></pre></td></tr></table></figure></p><p>这时候需要阻塞主线程, 让其等待子线程执行完毕, 方法有几种, 下面开始介绍.</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>先创建一个类实现Runnable接口.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" start"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" end"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Thread-join"><a href="#Thread-join" class="headerlink" title="Thread.join()"></a>Thread.join()</h2><h3 id="等待一个子线程"><a href="#等待一个子线程" class="headerlink" title="等待一个子线程"></a>等待一个子线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        MyRunnable runnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable, <span class="string">"thread-0"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            thread.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"runtime: "</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="等待多个子线程"><a href="#等待多个子线程" class="headerlink" title="等待多个子线程"></a>等待多个子线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            MyRunnable runnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(runnable, <span class="string">"thread-"</span> + i);</span><br><span class="line">            thread.start();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                thread.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"runtime: "</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出, 显然是串行执行的5个线程.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">thread-0 start</span><br><span class="line">thread-0 end</span><br><span class="line">thread-1 start</span><br><span class="line">thread-1 end</span><br><span class="line">thread-2 start</span><br><span class="line">thread-2 end</span><br><span class="line">thread-3 start</span><br><span class="line">thread-3 end</span><br><span class="line">thread-4 start</span><br><span class="line">thread-4 end</span><br><span class="line">runtime: 25004</span><br></pre></td></tr></table></figure></p><p>如果想异步并发执行多个子线程, 可在循环体外join<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        List&lt;Thread&gt; list = <span class="keyword">new</span> ArrayList&lt;Thread&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            MyRunnable runnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(runnable, <span class="string">"thread-"</span> + i);</span><br><span class="line">            thread.start();</span><br><span class="line">            list.add(thread);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(Thread thread : list) &#123;</span><br><span class="line">                thread.join();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"runtime: "</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">thread-1 start</span><br><span class="line">thread-3 start</span><br><span class="line">thread-4 start</span><br><span class="line">thread-0 start</span><br><span class="line">thread-2 start</span><br><span class="line">thread-1 end</span><br><span class="line">thread-3 end</span><br><span class="line">thread-4 end</span><br><span class="line">thread-2 end</span><br><span class="line">thread-0 end</span><br><span class="line">runtime: 5004</span><br></pre></td></tr></table></figure></p><p>由于每个线程都会抢占cpu执行, 执行的顺序是随机的, 所以每次输出都会不同.</p><h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>CountDownLatch是java.util.concurrent下的一个类, 作用是允许一个或多个线程等待其他线程执行完毕.</p><blockquote><p>A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes.</p></blockquote><p>CountDownLatch源码如下.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Synchronization control For CountDownLatch. The details are not </span></span><br><span class="line"><span class="comment">    * writted. please read the official docs.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructs a CountDownLatch initialized with the given count.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CountDownLatch</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"count &lt; 0"</span>);</span><br><span class="line">        <span class="keyword">this</span>.sync = <span class="keyword">new</span> Sync(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Causes the current thread to wait until the latch has counted down to</span></span><br><span class="line"><span class="comment">     * zero, unless the thread is interrupted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Causes the current thread to wait until the latch has counted down to</span></span><br><span class="line"><span class="comment">     * zero, unless the thread is interrupted, or the specified waiting time </span></span><br><span class="line"><span class="comment">     * elapses.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">await</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireSharedNanos(<span class="number">1</span>, unit.toNanos(timeout));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Decrements the count of the latch, releasing all waiting threads if the</span></span><br><span class="line"><span class="comment">     * count reaches zero.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.releaseShared(<span class="number">1</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getCount(); <span class="comment">//Returns the current count.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString() + <span class="string">"[Count = "</span> + sync.getCount() + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有一个构造器和几个方法, 构造时传参用于定义CountDownLatch大小, 且不可修改. 具体应用时, 每次执行一个线程后, 就countdown()一次. 在所有线程开始执行后, 立即await()等待, 直到所有线程执行完, 再执行await()后的代码段.</p><p>使用CountDownLatch实现主线程等待子线程如下.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" start"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        latch.countDown();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" end"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; .start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            latch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"runtime: "</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Thread-<span class="number">2</span> start</span><br><span class="line">Thread-<span class="number">3</span> start</span><br><span class="line">Thread-<span class="number">0</span> start</span><br><span class="line">Thread-<span class="number">1</span> start</span><br><span class="line">Thread-<span class="number">4</span> start</span><br><span class="line">Thread-<span class="number">2</span> end</span><br><span class="line">Thread-<span class="number">3</span> end</span><br><span class="line">Thread-<span class="number">0</span> end</span><br><span class="line">Thread-<span class="number">1</span> end</span><br><span class="line">Thread-<span class="number">4</span> end</span><br><span class="line">runtime: <span class="number">5004</span></span><br></pre></td></tr></table></figure></p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>java.util.concurrent.ExecutorService是java线程池的一个接口, 通过ExecutorService实现主线程等待子线程的方法很多, 比如submit()的返回Future对象判断提交的任务是否执行完, 或者在线程池中使用CountDownLatch, 或者用isTerminated()或awiatTermination(long, TimeUnit)判断线程池shutdown后所有任务是否完成. 具体可以查一下ExecutorService的文档</p><p>这里, 讲一个最简单的isTerminated().<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            MyRunnable runnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">            pool.execute(runnable);</span><br><span class="line">        &#125;</span><br><span class="line">        pool.shutdown();</span><br><span class="line">        <span class="keyword">while</span>(!pool.isTerminated());</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"runtime: "</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pool-1-thread-4 start</span><br><span class="line">pool-1-thread-2 start</span><br><span class="line">pool-1-thread-3 start</span><br><span class="line">pool-1-thread-5 start</span><br><span class="line">pool-1-thread-1 start</span><br><span class="line">pool-1-thread-5 end</span><br><span class="line">pool-1-thread-4 end</span><br><span class="line">pool-1-thread-2 end</span><br><span class="line">pool-1-thread-1 end</span><br><span class="line">pool-1-thread-3 end</span><br><span class="line">runtime: 5003</span><br></pre></td></tr></table></figure></p><p>或者用awaitTermination(long, TimeUnit)更好, long传一个长整型, TimeUnit传时间单位, 常用的有MILLISECONDS, SECONDS, MINUTES等等, long和TimeUnit组合表示超时时间. 当线程池所有任务执行完,返回true. 未执行完前超时返回false. 如下.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            MyRunnable runnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">            pool.execute(runnable);</span><br><span class="line">        &#125;</span><br><span class="line">        pool.shutdown();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//可以让while循环每2s执行一次, 而不是一直循环消耗性能</span></span><br><span class="line">            <span class="keyword">while</span>(!pool.awaitTermination(<span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"runtime: "</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pool-1-thread-2 start</span><br><span class="line">pool-1-thread-5 start</span><br><span class="line">pool-1-thread-1 start</span><br><span class="line">pool-1-thread-4 start</span><br><span class="line">pool-1-thread-3 start</span><br><span class="line">pool-1-thread-2 end</span><br><span class="line">pool-1-thread-5 end</span><br><span class="line">pool-1-thread-1 end</span><br><span class="line">pool-1-thread-3 end</span><br><span class="line">pool-1-thread-4 end</span><br><span class="line">runtime: 5003</span><br></pre></td></tr></table></figure></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>CountDownLatch相对于join()来说, 在复杂场景下更能体现出优势. 比如需要主线程在其他线程执行一半或执行到某个阶段时开始, 这种情况是join()没法做到的.</p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇关于Java中的多线程下，让主线程等待子线程执行的几种方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="concurrent" scheme="https://foreti.me/tags/concurrent/"/>
    
  </entry>
  
  <entry>
    <title>springboot的Mapper与数据库表字段映射</title>
    <link href="https://foreti.me/2018/03/13/springboot-mapper/"/>
    <id>https://foreti.me/2018/03/13/springboot-mapper/</id>
    <published>2018-03-13T01:35:32.000Z</published>
    <updated>2019-07-27T02:14:09.300Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲述Spring Boot如何通过mybatis-spring-boot-starter集成Mybatis，并且在Mapper中如何映射Model属性和表的字段。</p><a id="more"></a><hr><p>下面给出一个简单的示例。</p><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p>首先要引入mybatis的依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="table-user"><a href="#table-user" class="headerlink" title="table_user"></a>table_user</h2><p>数据库建表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`tb_user`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`created_by`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> ( <span class="string">`id`</span> )</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure></p><h2 id="User"><a href="#User" class="headerlink" title="User"></a>User</h2><p>实体类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String createdBy;</span><br><span class="line">    <span class="comment">//省略了setters &amp; getters</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="UserMapper"><a href="#UserMapper" class="headerlink" title="UserMapper"></a>UserMapper</h2><p>Mapper接口中可以通过注解的形式直接写sql，比将sql分离到xml中的方式更方便<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from tb_user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">selectById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from tb_user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into tb_user(id, name, created_by) values(#&#123;id&#125;, #&#123;name&#125;, #&#123;createdBy&#125;)"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(id = <span class="string">"user"</span>, </span><br><span class="line">             value = &#123;</span><br><span class="line">                        <span class="meta">@Result</span>(column = <span class="string">"id"</span>,property = <span class="string">"id"</span>),</span><br><span class="line">                        <span class="meta">@Result</span>(column = <span class="string">"name"</span>,property = <span class="string">"name"</span>),</span><br><span class="line">                        <span class="meta">@Result</span>(column = <span class="string">"created_by"</span>,property = <span class="string">"createdBy"</span>)</span><br><span class="line">             &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">//@Options(useGeneratedKeys = true, keyProperty = "id", keyColumn = "id")</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update tb_user set id = #&#123;id&#125;, name = #&#123;name&#125;, created_by = #&#123;createdBy&#125;"</span>)</span><br><span class="line">    <span class="meta">@ResultMap</span>(value = <span class="string">"user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from tb_user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>@Select, @Insert, @Update, @Delete显然就是sql语句的注解了.</li><li>@Param是根据别名取参数的.</li><li>@Results和@Result配合使用, 就可以将实体类属性和表字段进行一一映射.<ul><li>@Results的参数id表示这个映射的别名, 可以配合@ResultMap使用.</li><li>@Result的参数column表示表字段名, property表示实体属性名.</li></ul></li><li>@Options可以在插入时返回主键值, 在这里没什么用. 一般用于在主键id自增的情况下, 插入操作不定义id, 可以在插入数据库表后返回该条插入信息的主键id.</li></ul><h2 id="UserService"><a href="#UserService" class="headerlink" title="UserService"></a>UserService</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScriptService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        User user = userMapper.selectById(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userMapper.selectAll();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userMapper.insertUser(user);</span><br><span class="line">        retyrn user.getId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id = user.getId();</span><br><span class="line">        user check = userMapper.selectById(id);</span><br><span class="line">        <span class="keyword">if</span> (check == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        userMapper.updateUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        user check = userMapper.selectById(id);</span><br><span class="line">        <span class="keyword">if</span> (check == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        userMapper.deleteById(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a>UserController</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/selectById/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  userService.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/selectAll"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  userService.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/insertUser"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.insertUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/updateUser"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/deleteById/&#123;id&#125;"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲述Spring Boot如何通过mybatis-spring-boot-starter集成Mybatis，并且在Mapper中如何映射Model属性和表的字段。&lt;/p&gt;
    
    </summary>
    
    
      <category term="springboot" scheme="https://foreti.me/tags/springboot/"/>
    
      <category term="ResultMap" scheme="https://foreti.me/tags/ResultMap/"/>
    
  </entry>
  
  <entry>
    <title>Thymeleaf的简单使用</title>
    <link href="https://foreti.me/2018/03/12/thymeleaf-start/"/>
    <id>https://foreti.me/2018/03/12/thymeleaf-start/</id>
    <published>2018-03-12T12:09:44.000Z</published>
    <updated>2019-07-27T02:14:09.300Z</updated>
    
    <content type="html"><![CDATA[<p>Thymeleaf是一款用于渲染XML/XHTML/HTML5内容的Java模板引擎库，可以通过HTML的标签属性渲染标签内容。</p><a id="more"></a><hr><p>举个例子，<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;home.welcome&#125;"</span>&gt;</span>Welcome to our grocery store!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里的<code>th:text</code>的内容就是需要后台渲染的，假如没有后台渲染，html会将无法识别的部分直接过滤掉，那么输出就是<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> &gt;</span>Welcome to our grocery store!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>假如后台传过来的<code>home.welcome</code>的值是<code>Welcome, Yanss!</code>，那么输出就是<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> &gt;</span>Welcome, Yanss!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这就是Thymeleaf的用法和作用了，其他的地方也差不多。</p><p>记录几个常用的语法。</p><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;http://www.thymeleaf.org&#125;"</span>&gt;</span>Thymeleaf<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果需要传参<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;http://www.thymeleaf.org(id=$&#123;id&#125;)&#125;"</span>&gt;</span>Thymeleaf<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;http://www.thymeleaf.org(id=$&#123;id&#125;,name=$&#123;name&#125;)&#125;"</span>&gt;</span>Thymeleaf<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"'Welcome to our application, ' + $&#123;user.name&#125; + '!'"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="条件选择式"><a href="#条件选择式" class="headerlink" title="条件选择式"></a>条件选择式</h2><p>类似于java的三元表达式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"true?'真':'假'"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="循环loop"><a href="#循环loop" class="headerlink" title="循环loop"></a>循环loop</h2><ul><li><p>创建表格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>NAME<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>PRICE<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>IN STOCK<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"prod : $&#123;prods&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.name&#125;"</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.price&#125;"</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建下拉框</p><ul><li><p>在项目启动访问index页面的时候，把要需要的列表集合存到session作用域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"index"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">    List&lt;Classes&gt; list = userService.findAllClasses();</span><br><span class="line">    session.setAttribute(<span class="string">"list"</span>,list);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>前台取值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"className"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>请选择班级<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:each</span>=<span class="string">"list:$&#123;session.list&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$$&#123;list.cid&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;list.cname&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>遍历Map和List</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">th:each</span>=<span class="string">"entry : $&#123;map&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;entry.key&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">th:each</span>=<span class="string">"entry : $&#123;map&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;entry.value&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span> &gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:each</span>=<span class="string">"ele : $&#123;list&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;ele&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>遍历List<map></map></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">th:each</span>=<span class="string">"lm : $&#123;listmap&#125;"</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">"entry : $&#123;lm&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;entry.key&#125;"</span> &gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">"entry : $&#123;lm&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;entry.value&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="if-unless-switch-case"><a href="#if-unless-switch-case" class="headerlink" title="if/unless, switch/case"></a>if/unless, switch/case</h2><p>下面<code>&lt;a&gt;</code>标签只有在<code>th:if</code>中条件成立时才显示，<code>th:unless</code>只有不成立时才显示<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">th:if</span>=<span class="string">$&#123;session.user</span> != <span class="string">null&#125;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>switch/case也很好理解，默认属性default可以用*表示<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;user.role&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>User is an administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"#&#123;roles.manager&#125;"</span>&gt;</span>User is a manager<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>User is some other thing<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h2><p>举个例子, 当我想在一个两层的标签中同时渲染外层和内层的属性, 可能会出现下面这种错误.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;Hello.world&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">"$&#123;user == 'yanss'&#125;"</span>&gt;</span>yanss<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这种写法等同于<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;Hello.world&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>因为外层的th:text会将内层的覆盖掉, 如果要同时渲染, 可以使用inline属性, 也可以将内外层隔离开.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:inline</span>=<span class="string">"text"</span>&gt;</span>[[$&#123;Hello.world&#125;]]<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">"$&#123;user == 'yanss'&#125;"</span>&gt;</span>yanss<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- or --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;Hello.world&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">"$&#123;user == 'yanss'&#125;"</span>&gt;</span>yanss<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Thymeleaf是一款用于渲染XML/XHTML/HTML5内容的Java模板引擎库，可以通过HTML的标签属性渲染标签内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="thymeleaf" scheme="https://foreti.me/tags/thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>Win10推荐软件</title>
    <link href="https://foreti.me/2018/02/25/win10-tool/"/>
    <id>https://foreti.me/2018/02/25/win10-tool/</id>
    <published>2018-02-25T04:44:05.000Z</published>
    <updated>2019-07-27T02:14:09.300Z</updated>
    
    <content type="html"><![CDATA[<p>这是我在日常使用windows 10的一些常用软件。</p><a id="more"></a><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190429231453.png" alt></p><ul><li><p><del><a href="http://1218.io/" target="_blank" rel="noopener">Seer</a> 空格预览</del> <a href="https://pooi.moe/QuickLook/" target="_blank" rel="noopener">QuickLook</a>更好用</p></li><li><p><del><a href="http://www.listary.com/download" target="_blank" rel="noopener">Listary</a> 类Spotlight</del></p><ul><li>设置页，先激活</li><li>关键字Web<br><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190429231527.png" alt="listary1"><ul><li>百度：<code>http://www.baidu.com/s?wd={query}</code></li><li>淘宝：<code>https://s.taobao.com/search?q={query}</code></li><li>京东：<code>https://search.jd.com/Search?keyword={query}&amp;enc=utf-8&amp;qrst=1&amp;rt=1&amp;stop=1&amp;vt=2&amp;wq={query}&amp;psort=3&amp;wtype=1&amp;stock=1&amp;click=2</code></li><li>必应词典：<code>http://cn.bing.com/dict/search?q={query}</code></li></ul></li><li>关键字自定义<ul><li>run：<img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190429231559.png" alt="listary3"></li><li>新建文件：<img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190429231614.png" alt="listary4"></li><li>GoldenDict：<img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190429231627.png" alt="listary2"></li></ul></li></ul></li><li><p>发现<a href="http://www.wox.one/" target="_blank" rel="noopener">Wox</a>更好用，配置更少更方便，搭配Everything也是一样的快</p></li><li><p><a href="http://ditto-cp.sourceforge.net/" target="_blank" rel="noopener">Ditto</a> 剪贴板工具</p></li><li><p><a href="https://www.bandisoft.com/bandizip/cn/" target="_blank" rel="noopener">Bandizip</a> 比7Zzip好</p></li><li><p><a href="https://www.bandisoft.com/honeyview/cn/" target="_blank" rel="noopener">Honeyview</a> 看图超快</p></li><li><p><a href="https://potplayer.daum.net/" target="_blank" rel="noopener">potplayer</a> 视频播放器</p><ul><li>加皮肤Zune<img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190429231658.png" alt="potplayer+zune"></li></ul></li><li><p><a href="http://goldendict.org/" target="_blank" rel="noopener">GoldenDict</a> 词典，配合Listary</p></li><li><p><a href="https://pc.qq.com/detail/0/detail_12860.html" target="_blank" rel="noopener">迅雷极速版</a> 另一<a href="https://www.zhihu.com/question/52853014" target="_blank" rel="noopener">地址</a></p></li><li><p><a href="https://www.freedownloadmanager.org/" target="_blank" rel="noopener">FDM</a> 下载工具</p></li><li><p><a href="https://www.sumatrapdfreader.org/" target="_blank" rel="noopener">SumatraPDF</a></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">//高级设置</span><br><span class="line"># For documentation, see http://www.sumatrapdfreader.org/settings3.2.html</span><br><span class="line"></span><br><span class="line">MainWindowBackground = #80fff200</span><br><span class="line">EscToExit = false</span><br><span class="line">ReuseInstance = false</span><br><span class="line">UseSysColors = false</span><br><span class="line">RestoreSession = true</span><br><span class="line"></span><br><span class="line">FixedPageUI [</span><br><span class="line">TextColor = #000000</span><br><span class="line">BackgroundColor = #ffffff</span><br><span class="line">SelectionColor = #f5fc0c</span><br><span class="line">WindowMargin = 2 4 2 4</span><br><span class="line">PageSpacing = 4 4</span><br><span class="line">]</span><br><span class="line">EbookUI [</span><br><span class="line">FontName = 微软雅黑</span><br><span class="line">FontSize = 12.5</span><br><span class="line">TextColor = #5f4b32</span><br><span class="line">BackgroundColor = #fbf0d9</span><br><span class="line">UseFixedPageUI = false</span><br><span class="line">GradientColors = #7aa1d2 #dbd4b4 #cc95c0</span><br><span class="line">]</span><br><span class="line">ComicBookUI [</span><br><span class="line">WindowMargin = 0 0 0 0</span><br><span class="line">PageSpacing = 4 4</span><br><span class="line">CbxMangaMode = false</span><br><span class="line">]</span><br><span class="line">ChmUI [</span><br><span class="line">UseFixedPageUI = false</span><br><span class="line">]</span><br><span class="line">ExternalViewers [</span><br><span class="line">]</span><br><span class="line">ShowMenubar = true</span><br><span class="line">ReloadModifiedDocuments = true</span><br><span class="line">FullPathInTitle = false</span><br><span class="line">ZoomLevels = 8.33 12.5 18 25 33.33 50 66.67 75 100 125 150 200 300 400 600 800 1000 1200 1600 2000 2400 3200 4800 6400</span><br><span class="line">ZoomIncrement = 0</span><br><span class="line"></span><br><span class="line">PrinterDefaults [</span><br><span class="line">PrintScale = shrink</span><br><span class="line">]</span><br><span class="line">ForwardSearch [</span><br><span class="line">HighlightOffset = 0</span><br><span class="line">HighlightWidth = 15</span><br><span class="line">HighlightColor = #6581ff</span><br><span class="line">HighlightPermanent = false</span><br><span class="line">]</span><br><span class="line">CustomScreenDPI = 0</span><br><span class="line"></span><br><span class="line">RememberStatePerDocument = true</span><br><span class="line">UiLanguage = cn</span><br><span class="line">ShowToolbar = true</span><br><span class="line">ShowFavorites = false</span><br><span class="line">AssociateSilently = false</span><br><span class="line">CheckForUpdates = true</span><br><span class="line">RememberOpenedFiles = true</span><br><span class="line">EnableTeXEnhancements = false</span><br><span class="line">DefaultDisplayMode = single page</span><br><span class="line">DefaultZoom = fit page</span><br><span class="line">WindowState = 1</span><br><span class="line">WindowPos = 695 80 970 1010</span><br><span class="line">ShowToc = true</span><br><span class="line">SidebarDx = 196</span><br><span class="line">TocDy = 0</span><br><span class="line">ShowStartPage = true</span><br><span class="line">UseTabs = true</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.iobit.com/en/products.php" target="_blank" rel="noopener">IObit</a> 卸载工具</p></li><li><p><a href="https://www.ccleaner.com/ccleaner" target="_blank" rel="noopener">CCleaner</a> 清理工具</p></li><li><p><a href="https://anaconda.org/" target="_blank" rel="noopener">Anaconda</a> python包管理</p></li><li><p><a href="https://www.sublimetext.com/" target="_blank" rel="noopener">Sublime</a> 插件<a href="http://pic.yanss.top/Sublime插件.7z" target="_blank" rel="noopener">下载</a></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//OmniMarkupPreviewer快捷键设置</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">        &quot;keys&quot;: [&quot;alt+p&quot;], &quot;command&quot;: &quot;omni_markup_preview&quot;,</span><br><span class="line">        &quot;context&quot;: [&#123;&quot;key&quot;: &quot;omnimarkup_is_enabled&quot;, &quot;operator&quot;: &quot;equal&quot;, &quot;operand&quot;: &quot;&quot;&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p><del>ShadowsocksR 下载<a href="https://dl.onetive.com/" target="_blank" rel="noopener">地址一</a> <a href="http://shiyu.pro/archives/ssr-apk.html" target="_blank" rel="noopener">地址二</a> <a href="https://github.com/shadowsocksrr/shadowsocksr" target="_blank" rel="noopener">github</a></del></p></li><li><p>ShadowSocks, github开源，可以找到各平台的应用</p></li><li><p>自己搭建vps <a href="http://shiyu.pro/archives/shadowsocks.html" target="_blank" rel="noopener">方案</a></p></li></ul><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我在日常使用windows 10的一些常用软件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="win10" scheme="https://foreti.me/tags/win10/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop入门</title>
    <link href="https://foreti.me/2018/02/10/hadoop-start/"/>
    <id>https://foreti.me/2018/02/10/hadoop-start/</id>
    <published>2018-02-10T07:18:05.000Z</published>
    <updated>2019-07-27T02:14:09.285Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇初学Hadoop时应该浏览的博客，受18年实习时的mentor推荐，我读了Understanding Hadoop Clusters and the Network一文，并在这里翻译一遍。</p><a id="more"></a><hr><h1 id="Understanding-Hadoop-Clusters-and-the-Network"><a href="#Understanding-Hadoop-Clusters-and-the-Network" class="headerlink" title="Understanding Hadoop Clusters and the Network"></a>Understanding Hadoop Clusters and the Network</h1><p>Author: Brad Hedlund<br><br>Link: <a href="http://bradhedlund.com/2011/09/10/understanding-hadoop-clusters-and-the-network/" target="_blank" rel="noopener">original text</a><br><br>Translator: Yanss</p><p>This article is Part 1 in series that will take a closer look at the architecture and methods of a Hadoop cluster, and how it relates to the network and server infrastructure. The content presented here is largely based on academic work and conversations I’ve had with customers running real production clusters. If you run production Hadoop clusters in your data center, I’m hoping you’ll provide your valuable insight in the comments below. Subsequent articles to this will cover the server and network architecture options in closer detail. Before we do that though, lets start by learning some of the basics about how a Hadoop cluster works. OK, let’s get started!</p><p>本文是系列的第1部分，将带你详细了解Hadoop集群的架构和方法，以及它如何将网络和服务器基础设施相关联。这里介绍的内容主要是基于学术研究和我与在实际产品中运行集群的客户的交流。如果你在你的数据中心中运行Hadoop集群生产，我期待你在下面的评论中提供有价值的见解。接下来的文章将会包含服务器和网络结构的详细细节。然而在此之前，让我了解一些Hadoop集群工作的基础。<br><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/Hadoop-Server-Roles.png" alt="Hadoop-Server-Roles"></p><p>The three major categories of machine roles in a Hadoop deployment are Client machines, Masters nodes, and Slave nodes. The Master nodes oversee the two key functional pieces that make up Hadoop: storing lots of data (HDFS), and running parallel computations on all that data (Map Reduce). The Name Node oversees and coordinates the data storage function (HDFS), while the Job Tracker oversees and coordinates the parallel processing of data using Map Reduce. Slave Nodes make up the vast majority of machines and do all the dirty work of storing the data and running the computations. Each slave runs both a Data Node and Task Tracker daemon that communicate with and receive instructions from their master nodes. The Task Tracker daemon is a slave to the Job Tracker, the Data Node daemon a slave to the Name Node.</p><p>Hadoop部署的三个主要分类分别是Client machines、Masters nodes和Slave nodes。主节点监督两个重要的功能块形成Hadoop：存储大量数据(HDFS)，在所有数据上并行计算(Map Reduce)。Name Node监督协调数据存储功能(HDFS)，同时Job Tracker监督协调使用Map Reduce进行数据的并行处理。Slave Nodes形成大多数的机构，做着所有的存储数据和运行计算的脏活。每个slave同时运行着Data Node和Task Tracker的后台程序——用以传递和接收来自他们的master nodes的命令。Task Tracker后台程序是Job Tracker的slave，Data node后台程序是Name Node的slave。</p><p>Client machines have Hadoop installed with all the cluster settings, but are neither a Master or a Slave. Instead, the role of the Client machine is to load data into the cluster, submit Map Reduce jobs describing how that data should be processed, and then retrieve or view the results of the job when its finished. In smaller clusters (~40 nodes) you may have a single physical server playing multiple roles, such as both Job Tracker and Name Node. With medium to large clusters you will often have each role operating on a single server machine.</p><p>Client machines的Hadoop安装了所有的集群设置，但不包含Master或Slave。相应的，Client machine的作用是加载数据到集群，提交Map Reduce工作，描述数据应该怎么处理，然后在公众完成时取回或查看结果。在小一些的集群（约40个节点）中，你可能只有一个实体服务器运行多任务，例如Job Tracker和Name Node一样。在中大型集群你可能会在单个服务器中进行单个任务运转。</p><p>In real production clusters there is no server virtualization, no hypervisor layer. That would only amount to unnecessary overhead impeding performance. Hadoop runs best on Linux machines, working directly with the underlying hardware. That said, Hadoop does work in a virtual machine. That’s a great way to learn and get Hadoop up and running fast and cheap. I have a 6-node cluster up and running in VMware Workstation on my Windows 7 laptop.</p><p>在实际生产集群中没有服务器虚拟化，没有虚拟机监视器。那只会产生大量不必要的性能开支。Hadoop在Linux机器上运行得最好，直接在底层硬件上工作。也就是说，Hadoop在虚拟机上工作。那是了解和搭建Hadoop的好办法，并且运行的又快又便宜。我有一个6节点的集群，运行在我的Windows 7笔记本的VMware工作台上。</p><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/Hadoop-Cluster.png" alt="Hadoop-Cluster"></p><p>This is the typical architecture of a Hadoop cluster. You will have rack servers (not blades) populated in racks connected to a top of rack switch usually with 1 or 2 GE boned links. 10GE nodes are uncommon but gaining interest as machines continue to get more dense with CPU cores and disk drives. The rack switch has uplinks connected to another tier of switches connecting all the other racks with uniform bandwidth, forming the cluster. The majority of the servers will be Slave nodes with lots of local disk storage and moderate amounts of CPU and DRAM. Some of the machines will be Master nodes that might have a slightly different configuration favoring more DRAM and CPU, less local storage. In this post, we are not going to discuss various detailed network design options. Let’s save that for another discussion (stay tuned). First, lets understand how this application works…</p><p>这是一个Hadoop集群的典型结构。你将使用机架服务器(不是刀锋服务器)，搭建在机架中，连接一个顶部机架开关，通常使用1或2 GE(Gigabit Ethernet千兆以太网)。10 GE节点是不常有的，但当机器使用CPU核心和磁盘驱动获取更大的密度时收益更多。机架开关上行传输被连接到连接所有其他相同带宽机架的另一层开关，构成集群。大多数服务器是Slave nodes，使用大量的本地磁盘存储和中量的CPU和DRAM。一些机器是Master nodes，可能有轻微不同的配置，使用更多的DRAM和CPU，较少的本地存储。在这片文章中，我们不讨论许多详细的网络设计选择，让我们将它保留到另一个讨论(在调试中)中。首先，让我们理解这个应用怎么工作的。</p><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/Workflow.png" alt="Workflow"></p><p>Why did Hadoop come to exist? What problem does it solve? Simply put, businesses and governments have a tremendous amount of data that needs to be analyzed and processed very quickly. If I can chop that huge chunk of data into small chunks and spread it out over many machines, and have all those machines processes their portion of the data in parallel – I can get answers extremely fast – and that, in a nutshell, is what Hadoop does. In our simple example, we’ll have a huge data file containing emails sent to the customer service department. I want a quick snapshot to see how many times the word “Refund” was typed by my customers. This might help me to anticipate the demand on our returns and exchanges department, and staff it appropriately. It’s a simple word count exercise. The Client will load the data into the cluster (File.txt), submit a job describing how to analyze that data (word count), the cluster will store the results in a new file (Results.txt), and the Client will read the results file.</p><p>Hadoop为何诞生？它解决了什么问题？简言之，商业和政府有一个极大量的数据需要非常快地分析和处理。如果我可以分离这个巨大的数据到很多小的部分，铺开到大量的机器中，让这些机器并行处理它们各自的那一部分——我就可以极快的获取结果——这就是Hadoop做的事情。在我们的简单例子中，我们将用一个巨大的数据文件，它包含了发送到客户服务部门的邮件。我想要一个数据快照，来查看单词“Refund”被客户输入了多少次。这将有助于我预测退还和交换部门的需求，并且合理地安排职员。这是一个简单的词条计数训练。Clients将会加载数据到集群(File.txt)，提交一个工作描述，如何分析数据(单词计数)，集群会存储结果到一个新的文件(Results.txt)，然后Clients会读取结果文件。</p><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/Writing-Files-to-HDFS.png" alt="Writing-Files-to-HDFS"></p><p>Your Hadoop cluster is useless until it has data, so we’ll begin by loading our huge File.txt into the cluster for processing. The goal here is fast parallel processing of lots of data. To accomplish that I need as many machines as possible working on this data all at once. To that end, the Client is going to break the data file into smaller “Blocks”, and place those blocks on different machines throughout the cluster. The more blocks I have, the more machines that will be able to work on this data in parallel. At the same time, these machines may be prone to failure, so I want to insure that every block of data is on multiple machines at once to avoid data loss. So each block will be replicated in the cluster as its loaded. The standard setting for Hadoop is to have (3) copies of each block in the cluster. This can be configured with the <strong>dfs.replication</strong> parameter in the file <strong>hdfs-site.xml</strong>.</p><p>你的Hadoop集群直到有数据才有用，所以我们开始于加载超大的File.txt到集群中处理。这里的目标是快速并行处理大量数据。为此我需要尽可能多的机器同时处理这些数据。在那结束后，Client将会打断这个数据文件为许多小的块，将这些块放到遍及集群的不同的机器上。分成的块越多，能并行工作的机器就越多。在同一时间，这些机器可能容易失败，所以为了避免数据丢失，我会确信每个数据块在多台机器上存在。所以每个块会在加载到集群时复制。Hadoop的标准设置是集群中每个块有3个复制。这个可以在hdfs-site.xml文件的dfs.replication参数中设置。</p><p>The Client breaks File.txt into (3) Blocks. For each block, the Client consults the Name Node (usually TCP 9000) and receives a list of (3) Data Nodes that should have a copy of this block. The Client then writes the block directly to the Data Node (usually TCP 50010). The receiving Data Node replicates the block to other Data Nodes, and the cycle repeats for the remaining blocks. The Name Node is not in the data path. The Name Node only provides the map of where data is and where data should go in the cluster (file system metadata).</p><p>Client将File.txt拆分为3个块。对每个块，Client查看Name Node(通常用TCP 9000)并接收一个3个Data Nodes的list，每个Data Node都是一个块的复制。Client将块直接写入到Data Node(通常用TCP 50010)。收到的Data Node将块复制到其他Data Nodes，剩下的块也循环这个重复过程。Name Node不是数据路径。在集群中(文件系统云数据)Name Node只提供数据的位置和数据应该去哪。</p><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/Hadoop-Rack-Awareness.png" alt="Hadoop-Rack-Awareness"></p><p>Hadoop has the concept of “Rack Awareness”. As the Hadoop administrator you can <strong>manually</strong> define the rack number of each slave Data Node in your cluster. Why would you go through the trouble of doing this? There are two key reasons for this: Data loss prevention, and network performance. Remember that each block of data will be replicated to multiple machines to prevent the failure of one machine from losing all copies of data. Wouldn’t it be unfortunate if all copies of data happened to be located on machines in the same rack, and that rack experiences a failure? Such as a switch failure or power failure. That would be a mess. So to avoid this, somebody needs to know where Data Nodes are located in the network topology and use that information to make an intelligent decision about where data replicas should exist in the cluster. That “somebody” is the Name Node.</p><p>Hadoop有“机架感知”的概念。作为Hadoop管理员，你可以手动定义集群中每个slave Data Noded的机架数量。为什么你要做这个麻烦的事情呢？有两个关键原因：防止数据丢失和网络性能。记住每个块的数据需要复制到多个机器以防止一个机器失败是丢失所有的数据。如果所有的数据复制碰巧位于同意机架的机器上，并且机架发生失败，会发生这样的事情吗？比如一个开关失败或者是供电问题。那将会一团糟。所以为了避免这样，“某物”需要知道网络拓扑中Data Nodes在哪，以此做一个关于数据复制品应该存放在集群何处的智能的决定。这个“某物”是Name Node。</p><p>There is also an assumption that two machines in the same rack have more bandwidth and lower latency between each other than two machines in two different racks. This is true most of the time. The rack switch uplink bandwidth is usually (but not always) less than its downlink bandwidth. Furthermore, in-rack latency is usually lower than cross-rack latency (but not always). If at least one of those two basic assumptions are true, wouldn’t it be cool if Hadoop can use the same Rack Awareness that protects data to also optimally place work streams in the cluster, improving network performance? Well, it does! Cool, right?</p><p>有一个假设关于在同一机架的两个机器之间比起不同机架的两个机器有更多的带宽和更低的等待时间。大多是时候这是正确的。机架开关的上行带宽通常(不总是)比下行带宽小。而且，在机架内的等待时间通常比机架见的等待时间低(不总是)。如果这两个基础假设中至少一个是对的，如果Hadoop能用同一个机架感知，保护数据到工作流也就是集群中最适宜的位置，提高网络性能，不会更好吗？当然会。</p><p>What is <strong>NOT</strong> cool about Rack Awareness at this point is the <a href="http://developer.yahoo.com/hadoop/tutorial/module2.html#rack" target="_blank" rel="noopener">manual work required to define it the first time</a>, continually update it, and keep the information accurate. If the rack switch could auto-magically provide the Name Node with the list of Data Nodes it has, that would be cool. Or vice versa, if the Data Nodes could auto-magically tell the Name Node what switch they’re connected to, that would be cool too.</p><p>在这一点关于机架感知不好的地方是，<a href="http://developer.yahoo.com/hadoop/tutorial/module2.html#rack" target="_blank" rel="noopener">manual work required to define it the first time</a>，持续的更新它，保持信息准确。如果机架可以自动提供Data Nodes list的Name Node，那将会很好。反过来也是，如果Data Nodes可以自动告诉Name Node它们连接的什么开关，也会很好。</p><p>Even more interesting would be a <a href="http://www.bradhedlund.com/2011/04/21/data-center-scale-openflow-sdn/" target="_blank" rel="noopener">OpenFlow network</a>, where the Name Node could query the OpenFlow controller about a Node’s location in the topology.</p><p>甚至更有趣的是一个<a href="http://www.bradhedlund.com/2011/04/21/data-center-scale-openflow-sdn/" target="_blank" rel="noopener">OpenFlow network</a>，Name Node可以在哪查询OpenFlow控制器关于一个Node的拓扑位置。</p><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/Preparing-HDFS-Writes.png" alt="Preparing-HDFS-Writes"></p><p>The Client is ready to load File.txt into the cluster and breaks it up into blocks, starting with Block A. The Client consults the Name Node that it wants to write File.txt, gets permission from the Name Node, and receives a list of (3) Data Nodes for each block, a unique list for each block. The Name Node used its Rack Awareness data to influence the decision of which Data Nodes to provide in these lists. The key rule is that <strong>for every block of data, two copies will exist in one rack, another copy in a different rack.</strong> So the list provided to the Client will follow this rule.</p><p>Client准备好加载文件到集群中，将它打断到不同的块，开始块A。Client查询Name Node，想写入File.txt，从Name Node获取许可，接收一个包含每个块的Data Node的list，一个包含每个块独有的list。Name Node用它的机架感知数据去影响这些list中提供哪个Data Nodes的决定。重要规则是<strong>对数据的每个块，两个复制存在一个机架中，另一个复制在其他机架中</strong>。所以这个list提供Client将遵循这个规则。</p><p>Before the Client writes “Block A” of File.txt to the cluster it wants to know that all Data Nodes which are expected to have a copy of this block are ready to receive it. It picks the first Data Node in the list for Block A (Data Node 1), opens a TCP 50010 connection and says, “Hey, get ready to receive a block, and here’s a list of (2) Data Nodes, Data Node 5 and Data Node 6. Go make sure they’re ready to receive this block too.” Data Node 1 then opens a TCP connection to Data Node 5 and says, “Hey, get ready to receive a block, and go make sure Data Node 6 is ready is receive this block too.” Data Node 5 will then ask Data Node 6, “Hey, are you ready to receive a block?”</p><p>在Client写入块到File.txt之前，它想知道所有的Data Nodes哪个期望准备接收一个这个块的复制。它在list中为块A挑选第一个Data Node(Data Node 1)，打开TCP 50010连接，然后说，“嘿，准备好接收一个块，这是两个Data Node的list，Data Node 5和Data Node 6。去确信它们也准备好接收这个块。”然后Data Node 1打开一个TCP连接到Data Node 5然后说，“嘿，准备好接收一个块，去确信Data Node 6也准备好接收这个块。”Data Node 5将问Data Node 6，“嘿，你准备好接收一个块了吗？”</p><p>The acknowledgments of readiness come back on the same TCP pipeline, until the initial Data Node 1 sends a “Ready” message back to the Client. At this point the Client is ready to begin writing block data into the cluster.</p><p>准备就绪的确认通知在同一TCP管道返回，直到初始的Data Node 1发送一个“Ready”信息给Client。这样，Client就准备好开始写入块数据到集群中。</p><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/HDFS-Pipeline-Write.png" alt="HDFS-Pipeline-Write"></p><p>As data for each block is written into the cluster a replication pipeline is created between the (3) Data Nodes (or however many you have configured in dfs.replication). This means that as a Data Node is receiving block data it will at the same time push a copy of that data to the next Node in the pipeline.</p><p>当每个块的数据被写入集群时, 三个Data Nodes之间(或者无论多少个你在dfs.replication中设置的)会创建一个复制管道. 这意味着, 当一个Data Node接收数据块时, 它会同时推送一个数据的复制到管道中的下一个Node.</p><p>Here too is a primary example of leveraging the Rack Awareness data in the Name Node to improve cluster performance. Notice that the second and third Data Nodes in the pipeline are in the same rack, and therefore the final leg of the pipeline does not need to traverse between racks and instead benefits from in-rack bandwidth and low latency. The next block will not be begin until this block is successfully written to all three nodes.</p><p>这也是一个借助机架系统的简单例子, Name Node中的数据提升集群性能. 注意管道中的第二个和第三个Data Node位于同一个机架中, 因此管道的最后一步不用穿过机架, 这会带来机架内的带宽和低延迟收益. 下一个数据块会在这一块成功写入到三个Nodes后开始.</p><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/HDFS-Pipeline-Write-Success.png" alt="HDFS-Pipeline-Write-Success"></p><p>When all three Nodes have successfully received the block they will send a “Block Received” report to the Name Node. They will also send “Success” messages back up the pipeline and close down the TCP sessions. The Client receives a success message and tells the Name Node the block was successfully written. The Name Node updates it metadata info with the Node locations of Block A in File.txt. The Client is ready to start the pipeline process again for the next block of data.</p><p>当所有的三个Node都成功接收了这个块, 它们会发送一个”Block Received”报告给Name Node. 它们也会给管道返回一个”Success”消息并关闭TCP协议. Client接收了一个Success消息, 通知Name Node块已经成功写入. Name Node更新File.txt中块A的Node位置的元数据信息. Client准备好开始下一个数据块的管道处理.</p><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/Multi-block-Replication-Pipeline.png" alt="Multi-block-Replication-Pipeline"></p><p>As the subsequent blocks of File.txt are written, the initial node in the pipeline will vary for each block, spreading around the hot spots of in-rack and cross-rack traffic for replication.</p><p>当File.txt中随后的块都被写入, 管道中初始的node会为每一个块做相应的变化, 在机架内的热点间传播, 在机架间复制. </p><p>Hadoop uses a lot of network bandwidth and storage. We are typically dealing with very big files, Terabytes in size. And each file will be replicated onto the network and disk (3) times. If you have a 1TB file it will consume 3TB of network traffic to successfully load the file, and 3TB disk space to hold the file.</p><p>Hadoop使用大量的网络带宽和存储空间. 特别是当我们处理非常大的文件时, TB量级的. 每个文件将3倍地复制到网络和磁盘上. 如果你有一个1TB的文件, 它将消耗3TB的网络来成功地加载文件, 以及3TB的磁盘空间来保存这个文件.</p><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/Client-Writes-Span-Cluster.png" alt="Client-Writes-Span-Cluster"></p><p>After the replication pipeline of each block is complete the file is successfully written to the cluster. As intended the file is spread in blocks across the cluster of machines, each machine having a relatively small part of the data. The more blocks that make up a file, the more machines the data can potentially spread. The more CPU cores and disk drives that have a piece of my data mean more parallel processing power and faster results. This is the motivation behind building large, wide clusters. To process more data, faster. When the machine count goes up and the cluster goes <strong>wide</strong>, our network needs to scale appropriately.</p><p>在每个块的复制管道都完成后, 文件就成功地写入集群了. 为了文件在集群机器的块之间传播, 每个机器有相对小的一部分数据. 文件分割的块越多, 数据可能传播的机器就越多. 一块数据有更多的CPU核心和磁盘驱动意味着更好的并行处理能力和更快的获得结果. 这是建立更大更宽的集群的背后的动机. 为了更快处理更多的数据. 当机器数增长, 集群变宽, 我们的网络需要合适的规模.</p><p>Another approach to scaling the cluster is to go <strong>deep</strong>. This is where you scale up the machines with more disk drives and more CPU cores. Instead of increasing the number of machines you begin to look at increasing the density of each machine. In scaling deep, you put yourself on a trajectory where more network I/O requirements may be demanded of fewer machines. In this model, <a href="http://www.bradhedlund.com/2012/03/26/considering-10ge-hadoop-clusters-and-the-network/" target="_blank" rel="noopener">how your Hadoop cluster makes the transition to 10GE nodes</a> becomes an important consideration.</p><p>纵向发展是规模化集群的另一种方法. 这即是你用更多的磁盘驱动和更多的CPU核数纵向扩展机器. 相对增加机器数量, 取而代之的是增加每个机器的密度. 在纵向化时, 你将趋向于更多的网络I/O需求使用更少的机器. 在这种模式下, 你的Hasoop集群怎样变迁到10GE nodes成为一个重点.</p><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/Name-Node.png" alt="Name-Node"></p><p>The Name Node holds all the file system metadata for the cluster and oversees the health of Data Nodes and coordinates access to data. The Name Node is the central controller of HDFS. It does not hold any cluster data itself. The Name Node only knows what blocks make up a file and where those blocks are located in the cluster. The Name Node points Clients to the Data Nodes they need to talk to and keeps track of the cluster’s storage capacity, the health of each Data Node, and making sure each block of data is meeting the minimum defined replica policy.</p><p>Name Node控制集群的所有的文件系统元数据, 监督Data Nodes的健康和协调数据入口. Name Node时HDFS的控制中心. 它自己不控制任何集群数据. Name Node只知道文件由什么块组成, 和那些块在集群中的位置. Name Node从Client指向Data Nodes, 它们需要交流来保持集群存储能力和每个Data Node健康的轨迹, 并且确认每个数据的块保证最低限度的复制.</p><p>Data Nodes send heartbeats to the Name Node every 3 seconds via a TCP handshake, using the same port number defined for the Name Node daemon, usually TCP 9000. Every tenth heartbeat is a Block Report, where the Data Node tells the Name Node about all the blocks it has. The block reports allow the Name Node build its metadata and insure (3) copies of the block exist on different nodes, in different racks.</p><p>Data Node通过TCP握手每3秒发送心跳给Name Node, 为Name Node使用同一个确定的端口号, 通常是TCP 9000. 每第10个心跳是一个块报告, 关于Data Node告诉Name Node所有它有的块. 块报告允许Name Node建立它的元数据和确认块的3个复制存在于不同机架的不同的node上.</p><p>The Name Node is a critical component of the Hadoop Distributed File System (HDFS). Without it, Clients would not be able to write or read files from HDFS, and it would be impossible to schedule and execute Map Reduce jobs. Because of this, it’s a good idea to equip the Name Node with a highly redundant enterprise class server configuration; dual power supplies, hot swappable fans, redundant NIC connections, etc.</p><p>Name Node是Hadoop分布式文件系统的一个关键的组件. 没有它, Clients将不能从HDFS写和读文件, 而且也不能规划和执行Map Reduce工作. 归功于它, 用高冗余企业类服务器配置安装Name Node是一个好主意. 双重支持, 热交换, 冗余NIC连接, 等.</p><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/Re-replicating-Missing-Replicas2.png" alt="Re-replicating-Missing-Replicas2"></p><p>If the Name Node stops receiving heartbeats from a Data Node it presumes it to be dead and any data it had to be gone as well. Based on the block reports it had been receiving from the dead node, the Name Node knows which copies of blocks died along with the node and can make the decision to re-replicate those blocks to other Data Nodes. It will also consult the Rack Awareness data in order to maintain the <strong>two copies in one rack, one copy in another rack</strong> replica rule when deciding which Data Node should receive a new copy of the blocks.</p><p>Consider the scenario where an entire rack of servers falls off the network, perhaps because of a rack switch failure, or power failure. The Name Node would begin instructing the remaining nodes in the cluster to re-replicate all of the data blocks lost in that rack. If each server in that rack had a modest 12TB of data, this could be hundreds of terabytes of data that needs to begin traversing the network.</p><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/Secondary-Name-Node.png" alt="Secondary-Name-Node"></p><p>Hadoop has server role called the Secondary Name Node. A common misconception is that this role provides a high availability backup for the Name Node. This is not the case.</p><p>The Secondary Name Node occasionally connects to the Name Node (by default, ever hour) and grabs a copy of the Name Node’s in-memory metadata and files used to store metadata (both of which may be out of sync). The Secondary Name Node combines this information in a fresh set of files and delivers them back to the Name Node, while keeping a copy for itself.</p><p>Should the Name Node die, the files retained by the Secondary Name Node can be used to recover the Name Node. In a busy cluster, the administrator may configure the Secondary Name Node to provide this housekeeping service much more frequently than the default setting of one hour. Maybe every minute.</p><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/Client-Read-from-HDFS.png" alt="Client-Read-from-HDFS"></p><p>When a Client wants to retrieve a file from HDFS, perhaps the output of a job, it again consults the Name Node and asks for the block locations of the file. The Name Node returns a list of each Data Node holding a block, for each block. The Client picks a Data Node from each block list and reads one block at a time with TCP on port 50010, the default port number for the Data Node daemon. It does not progress to the next block until the previous block completes.</p><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/Data-Node-Read-from-HDFS.png" alt="Data-Node-Read-from-HDFS"></p><p>There are some cases in which a Data Node daemon itself will need to read a block of data from HDFS. One such case is where the Data Node has been asked to process data that it does not have locally, and therefore it must retrieve the data from another Data Node over the network before it can begin processing.</p><p>This is another key example of the Name Node’s Rack Awareness knowledge providing optimal network behavior. When the Data Node asks the Name Node for location of block data, the Name Node will check if another Data Node in the same rack has the data. If so, the Name Node provides the in-rack location from which to retrieve the data. The flow does not need to traverse two more switches and congested links find the data in another rack. With the data retrieved quicker in-rack, the data processing can begin sooner, and the job completes that much faster.</p><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/Map-Task.png" alt="Map-Task"></p><p>Now that File.txt is spread in small blocks across my cluster of machines I have the opportunity to provide extremely fast and efficient parallel processing of that data. The parallel processing framework included with Hadoop is called Map Reduce, named after two important steps in the model; <strong>Map</strong>, and <strong>Reduce</strong>.</p><p>The first step is the Map process. This is where we simultaneously ask our machines to run a computation on their local block of data. In this case we are asking our machines to count the number of occurrences of the word “Refund” in the data blocks of File.txt.</p><p>To start this process the Client machine submits the Map Reduce job to the Job Tracker, asking “How many times does Refund occur in File.txt” (paraphrasing Java code). The Job Tracker consults the Name Node to learn which Data Nodes have blocks of File.txt. The Job Tracker then provides the Task Tracker running on those nodes with the Java code required to execute the Map computation on their local data. The Task Tracker starts a Map task and monitors the tasks progress. The Task Tracker provides heartbeats and task status back to the Job Tracker.</p><p>As each Map task completes, each node stores the result of its local computation in temporary local storage. This is called the “intermediate data”. The next step will be to send this intermediate data over the network to a Node running a Reduce task for final computation.</p><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/What-if-Map-Task-data-isnt-local.png" alt="What-if-Map-Task-data-isnt-local"></p><p>While the Job Tracker will always try to pick nodes with local data for a Map task, it may not always be able to do so. One reason for this might be that all of the nodes with local data already have too many other tasks running and cannot accept anymore. In this case, the Job Tracker will consult the Name Node whose Rack Awareness knowledge can suggest other nodes in the same rack. The Job Tracker will assign the task to a node in the same rack, and when that node goes to find the data it needs the Name Node will instruct it to grab the data from another node in its rack, leveraging the presumed single hop and high bandwidth of in-rack switching.</p><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/Reduce-Task.png" alt="Reduce-Task"></p><p>The second phase of the Map Reduce framework is called, you guess it, <strong>Reduce</strong>. The Map task on the machines have completed and generated their intermediate data. Now we need to gather all of this intermediate data to combine and distill it for further processing such that we have one final result.</p><p>The Job Tracker starts a Reduce task on any one of the nodes in the cluster and instructs the Reduce task to go grab the intermediate data from all of the completed Map tasks. The Map tasks may respond to the Reducer almost simultaneously, resulting in a situation where you have a number of nodes sending TCP data to a single node, all at once. This traffic condition is often referred to as <a href="http://www.bradhedlund.com/2011/05/01/tcp-incast-and-cloud-application-performance/" target="_blank" rel="noopener">TCP Incast</a> or “fan-in”. For networks handling lots of Incast conditions, it’s important the network switches have well-engineered internal traffic management capabilities, and adequate buffers (not too big, not too small). Throwing gobs of buffers at a switch may end up causing unwanted collateral damage to other traffic. But that’s a topic for another day.</p><p>The Reducer task has now collected all of the intermediate data from the Map tasks and can begin the final computation phase. In this case, we are simply adding up the sum total occurrences of the word “Refund” and writing the result to a file called Results.txt</p><p>The output from the job is a file called Results.txt that is written to HDFS following all of the processes we have covered already; splitting the file up into blocks, pipeline replication of those blocks, etc. When complete, the Client machine can read the Results.txt file from HDFS, and the job is considered complete.</p><p>Our simple word count job did not result in a lot of intermediate data to transfer over the network. Other jobs however may produce a lot of intermediate data – such as sorting a terabyte of data. Where the output of the Map Reduce job is a new set of data equal to the size of data you started with. How much traffic you see on the network in the Map Reduce process is entirely dependent on the type job you are running at that given time.</p><p>If you’re a studious network administrator, you would learn more about Map Reduce and the types of jobs your cluster will be running, and how the type of job affects the traffic flows on your network. If you’re a Hadoop networking rock star, you might even be able to suggest ways to better code the Map Reduce jobs so as to optimize the performance of the network, resulting in faster job completion times.</p><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/Unbalanced-Hadoop-Cluster.png" alt="Unbalanced-Hadoop-Cluster"></p><p>Hadoop may start to be a real success in your organization, providing a lot of previously untapped business value from all that data sitting around. When business folks find out about this you can bet that you’ll quickly have more money to buy more racks of servers and network for your Hadoop cluster.</p><p>When you add new racks full of servers and network to an existing Hadoop cluster you can end up in a situation where your cluster is unbalanced. In this case, Racks 1 &amp; 2 were my existing racks containing File.txt and running my Map Reduce jobs on that data. When I added two new racks to the cluster, my File.txt data doesn’t auto-magically start spreading over to the new racks. All the data stays where it is.</p><p>The new servers are sitting idle with no data, until I start loading new data into the cluster. Furthermore, if the servers in Racks 1 &amp; 2 are really busy, the Job Tracker may have no other choice but to assign Map tasks on File.txt to the new servers which have no local data. The new servers need to go grab the data over the network. As as result you may see more network traffic and slower job completion times.</p><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/Hadoop-Cluster-Balancer.png" alt="Hadoop-Cluster-Balancer"></p><p>To fix the unbalanced cluster situation, Hadoop includes a nifty utility called, you guessed it, <strong>balancer</strong>.</p><p>Balancer looks at the difference in available storage between nodes and attempts to provide balance to a certain threshold. New nodes with lots of free disk space will be detected and balancer can begin copying block data off nodes with less available space to the new nodes. Balancer isn’t running until someone types the command at a terminal, and it stops when the terminal is canceled or closed.</p><p>The amount of network traffic balancer can use is very low, with a default setting of 1MB/s. This setting can be changed with the <strong>dfs.balance.bandwidthPerSec</strong> parameter in the file <strong>hdfs-site.xml</strong></p><p>The Balancer is good housekeeping for your cluster. It should definitely be used any time new machines are added, and perhaps even run once a week for good measure. Given the balancers low default bandwidth setting it can take a long time to finish its work, perhaps days or weeks. Wouldn’t it be cool if cluster balancing was a core part of Hadoop, and not just a utility? I think so.</p><hr><p>This material is based on studies, <a href="http://www.cloudera.com/hadoop-training/" target="_blank" rel="noopener">training from Cloudera</a>, and observations from my own virtual Hadoop lab of six nodes. Everything discussed here is based on the <a href="https://ccp.cloudera.com/display/SUPPORT/Downloads" target="_blank" rel="noopener">latest stable release of Cloudera’s CDH3 distribution of Hadoop</a>. There are new and interesting technologies coming to Hadoop such as <a href="http://hadoop.apache.org/common/docs/r0.21.0/hod_scheduler.html#Introduction" target="_blank" rel="noopener">Hadoop on Demand (HOD)</a> and <a href="http://www.hortonworks.com/an-introduction-to-hdfs-federation/" target="_blank" rel="noopener">HDFS Federations</a>, not discussed here, but worth investigating on your own if so inclined.</p><p><strong>Download:</strong> <a href="http://pic.yanss.top/Understanding_Hadoop_Clusters_and_the_Network-bradhedlund_com.pdf" target="_blank" rel="noopener">Slides - PDF</a> <a href="http://pic.yanss.top/Understanding_Hadoop_Clusters_and_the_Network-slides_and_text_bradhedlund_com.pdf" target="_blank" rel="noopener">Slides and Text - PDF</a></p><p>Cheers, Brad</p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇初学Hadoop时应该浏览的博客，受18年实习时的mentor推荐，我读了Understanding Hadoop Clusters and the Network一文，并在这里翻译一遍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hadoop" scheme="https://foreti.me/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Coding的动态pages部署WordPress</title>
    <link href="https://foreti.me/2018/02/09/codingnet-wordpress/"/>
    <id>https://foreti.me/2018/02/09/codingnet-wordpress/</id>
    <published>2018-02-09T06:28:46.000Z</published>
    <updated>2019-07-27T02:14:09.285Z</updated>
    
    <content type="html"><![CDATA[<p>什么都别说了，先上图。</p><a id="more"></a><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/coding-pages.png" alt="coding-pages"></p><p>部署好的wordpress效果（我主要是做一个相册集）<br><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/wp.yanss.top.png" alt="wp"></p><p>总体效果还不错吧，毕竟动态博客还是可操作性强多了。</p><p>好了，进入正题。</p><p>做这个其实就是前几天在coding的pages服务菜单中发现还有静态和动态两个选项卡，当时就懵逼了，pages服务还能动态？</p><p>然后看了说明，动态是可以，但是限制还是蛮多的。</p><blockquote><p>动态 Pages 是一个动态网页托管和演示服务，支持使用 PHP 语言和 MySQL 数据库，可用于部署开源博客、CMS 等动态应用。</p></blockquote><p>只能使用php语言，然后数据库其实是coding自己的服务器提供的，然后整个服务器后台也是coding提供，所以自己是不可能做什么修改的。当然做一个wordpress博客还是绰绰有余，下面就是我的wordpress仓库文件。</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/coding-pages1.png" alt="coding-pages1"></p><p>搭建过程也非常简单，就是coding新建一个仓库，然后去<a href="https://cn.wordpress.org/" target="_blank" rel="noopener">wordpress官网</a>上下载最新的wordpress压缩包，解压之后push到coding仓库中。</p><p>然后在Pages服务中开启动态Pages，选择部署来源为master分支，稍等一下就自动部署完成了。</p><p>打开动态pages运行的url，然后就是5分钟流程了。</p><p>所有的连接信息(共5个)都在这里，只有前4个用得上</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/coding-pages2.png" alt="coding-pages2"></p><p><strong>存在的问题：</strong></p><ul><li>使用过程中在wordpress管理后台中下载好了主题和插件，但是在coding仓库中却没有对应的文件增加。所以在偶尔出现数据库连接错误或其他问题需要重新部署时，原本设置好的插件和主题就没有了</li><li>由于动态pages使用的是coding自己的服务器，所以个人没法修改服务器的一些设置，比如上传文件的大小限制，图片的分辨率等，所以上传的大图需要自己压缩一下再传。</li></ul><p><strong>最后建议：</strong></p><ul><li>把连接信息保存到一个文件<code>wp-config.php</code>，放到根目录下。</li><li>所有的主题和插件去源网页下载文件，保存到<code>wp-content</code>下的对应文件夹下，然后提交到coding</li></ul><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么都别说了，先上图。&lt;/p&gt;
    
    </summary>
    
    
      <category term="WordPress" scheme="https://foreti.me/tags/WordPress/"/>
    
      <category term="Coding-pages" scheme="https://foreti.me/tags/Coding-pages/"/>
    
  </entry>
  
  <entry>
    <title>GitBook源文件发布到gh-pages</title>
    <link href="https://foreti.me/2018/02/04/gitbook-to-gh-pages/"/>
    <id>https://foreti.me/2018/02/04/gitbook-to-gh-pages/</id>
    <published>2018-02-04T12:56:52.000Z</published>
    <updated>2019-07-27T02:14:09.285Z</updated>
    
    <content type="html"><![CDATA[<p>GitBook的渲染真的很慢，我找到了它编译生成的html文件，并将它上传到了gh-page上。</p><a id="more"></a><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>这段时间在读一本英文书，读的很慢，可以说是逐词翻译了。</p><p>然而读的时候总是会忘了前面的生词是什么意思，也没有纸质打印版，所以想到边读边做笔记，主要就是生词注释一下。</p><p>于是想到了GitBook。</p><p>首先我在GitBook上创建一本书，书名是<code>Hadoop-The Definitive Guide 4th Edition</code>。</p><p>然后打开就可以直接编辑。</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/hadoopbook1.png" alt="hadoopbook1"></p><p>但是gitbook的编辑器很难用啊，好像原来是直接写markdown的，现在改了编辑模式？特别是插入连接的时候，没法像<code>[]()</code>这么方便啊。</p><p>而且重要的是gitbook服务器加载速度不稳定，慢的时候都打不开了，所以想着直接把gitbook的Markdown文件内容编译成静态页面，发布到github仓库中，利用gh-pages直接访问，速度快多了。</p><h1 id="连接github仓库"><a href="#连接github仓库" class="headerlink" title="连接github仓库"></a>连接github仓库</h1><p>现在说说怎么部署到gh-pages。</p><p>首先在github创建一个仓库，<code>Hadoop-The-Definitive-Guide-4th</code>，并初始化。</p><p>然后到gitbook的书籍<code>Hadoop-The Definitive Guide 4th Edition</code>的设置里找到<code>Github</code>，添加对应<code>Hadoop-The-Definitive-Guide-4th</code>仓库并同步内容</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/hadoopbook2.png" alt="hadoopbook2"></p><p>之后可以在github仓库中看到一些文件</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/hadoopbook3.png" alt="hadoopbook3"></p><p>这些都是gitbook书的markdown文件。这一步完成后，就可以在gitbook或github任意一端编译文档，提交后都会在两端生成的相应书籍。这相当于书籍在两端都有备份了。</p><p>如果不用gh-pages生成页面的话，上述的操作就已经够了。</p><h1 id="提交gh-pages分支"><a href="#提交gh-pages分支" class="headerlink" title="提交gh-pages分支"></a>提交gh-pages分支</h1><p>接下来介绍如何提交静态页面到gh-pages。<br><br></p><p>由于要生成静态页面的文件，需要在本地安装gitbook的npm包(推荐使用cnpm安装)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gitbook-cli -g</span><br></pre></td></tr></table></figure></p><p>然后把github仓库clone到本地<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:fakeYanss/Hadoop-The-Definitive-Guide-4th.git</span><br></pre></td></tr></table></figure></p><p>进入到<code>Hadoop-The-Definitive-Guide-4th</code>文件夹，生成静态页面文件，输出目录在<code>_book</code>中。如果目录文件<code>SUMMARY.md</code>有变化，需要先<code>gitbook init</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook build</span><br></pre></td></tr></table></figure></p><p>然后在本地创建一个<code>gh-pages</code>分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --orphan gh-pages</span><br></pre></td></tr></table></figure></p><p>然后清空一下分支下的文件（如果有的话）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf *</span><br></pre></td></tr></table></figure></p><p>然后将<code>master</code>分支下的<code>_book</code>静态页面文件内容全部复制到<code>gh-pages</code>分支下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master -- _book</span><br></pre></td></tr></table></figure></p><p>将<code>_book</code>中的子文件全部移到外层，并删除<code>_book</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv _book/* ./</span><br><span class="line">rm -rf _book</span><br></pre></td></tr></table></figure></p><p>这时候<code>gh-pages</code>分支下就是全部的静态页面文件了，接下来就是提交到远程<code>gh-pages</code>分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &apos;publish gh-pages&apos;</span><br><span class="line">git push origin gh-pages</span><br></pre></td></tr></table></figure></p><p>提交完成后到github仓库的设置中看一下，gh-pages服务是否自动开启，如果没有的话在<code>Source</code>中选择<code>gh-pages branch</code>，保存刷新，等待几分钟就好了。</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/hadoopbook5.png" alt="hadoopbook5"></p><p>全部操作已经完成，接下来每次在本地更新书籍内容后，先生成静态页面，然后提交master分支，再提交gh-pages分支就可以了。</p><p>之后每次查看线上gitbook书籍，可以直接输入url <code>https://name.github.io/书籍仓库名</code>查看。</p><hr><p>最后，为了每次的提交操作不用手打一遍，我写了一个bash脚本<a href="https://github.com/fakeYanss/Hadoop-The-Definitive-Guide-4th/blob/master/publish.sh" target="_blank" rel="noopener">publish.sh</a>，<a href="http://pic.yanss.top/publish.sh" target="_blank" rel="noopener">点击下载</a>，自行更改第一行的文件夹地址即可。windows系统安装过git环境的可以直接双击运行，要查看日志的话可以在git bash中输入<code>./publish.sh</code>运行。</p><p><strong>注意：使用时不能将脚本放在仓库里，不然在切换分支时会出错，</strong>最好与仓库文件夹同级。</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/hadoopbook4.png" alt="hadoopbook4"></p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GitBook的渲染真的很慢，我找到了它编译生成的html文件，并将它上传到了gh-page上。&lt;/p&gt;
    
    </summary>
    
    
      <category term="gitbook" scheme="https://foreti.me/tags/gitbook/"/>
    
      <category term="gh-pages" scheme="https://foreti.me/tags/gh-pages/"/>
    
  </entry>
  
  <entry>
    <title>Java不用for循环打印数组</title>
    <link href="https://foreti.me/2018/01/27/java-print-array/"/>
    <id>https://foreti.me/2018/01/27/java-print-array/</id>
    <published>2018-01-27T09:31:47.000Z</published>
    <updated>2019-07-27T02:14:09.300Z</updated>
    
    <content type="html"><![CDATA[<p>Java中打印数组时不想用for遍历数组，可以试试下面几种方法</p><a id="more"></a><hr><h1 id="ArrayList直接打印"><a href="#ArrayList直接打印" class="headerlink" title="ArrayList直接打印"></a>ArrayList直接打印</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">list.add(<span class="number">4</span>);</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4]</span><br></pre></td></tr></table></figure></p><h1 id="Arrays类打印数组"><a href="#Arrays类打印数组" class="headerlink" title="Arrays类打印数组"></a>Arrays类打印数组</h1><p>java.util.Arrays的toString()方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.toString(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;));</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4]</span><br></pre></td></tr></table></figure></p><h1 id="Arrays类打印二维数组"><a href="#Arrays类打印二维数组" class="headerlink" title="Arrays类打印二维数组"></a>Arrays类打印二维数组</h1><p>java.util.Arrays的deeptoString()方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.deepToString(<span class="keyword">new</span> <span class="keyword">int</span>[][] &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;));</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[1, 2], [3, 4]]</span><br></pre></td></tr></table></figure></p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java中打印数组时不想用for遍历数组，可以试试下面几种方法&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>初识机器学习</title>
    <link href="https://foreti.me/2018/01/12/machine-learning-view/"/>
    <id>https://foreti.me/2018/01/12/machine-learning-view/</id>
    <published>2018-01-12T07:01:20.000Z</published>
    <updated>2019-07-27T02:14:09.300Z</updated>
    
    <content type="html"><![CDATA[<p>关于机器学习，这是我学的第一节课。</p><a id="more"></a><hr><center><br>    <img style="border-radius: 0.3125em; box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190502110338.png"><br>    <div style="border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">Machine learning</div><br></center><h2 id="Machine-learning"><a href="#Machine-learning" class="headerlink" title="Machine learning"></a>Machine learning</h2><p><strong>Machine learning definition:</strong></p><ul><li><p>Arthur Samuel (1959) . 在没有明确设置的前提下，使机器具有学习能力的研究领域。</p></li><li><p>Tom Mitchell (1998) . 一个适当的学习问题定义如下：计算机程序从经验E中学习，解决某一任务T，进行某一性能度量P，通过P测试在T上的表现因经验E而提高。</p><p>对于跳棋游戏（Samuel设计的一个小游戏，通过数万次跳棋对战学习，获得比Samuel的跳棋水平还高的能力），经验E就是程序与自己下几万次跳棋，任务T就是玩跳棋，性能度量P就是与新对手玩跳棋时赢的概率。</p></li></ul><p><strong>Machine learning algorithms:</strong></p><p>目前学习算法主要的两类是监督学习(supervised learning)和无监督学习(unsupervised learning)。</p><p>简单来说，监督学习就是我们教计算机做某件事情；在无监督学习中，我们让计算机自己学习。</p><p><strong>Others:</strong></p><p>强化学习(Reinforcement learning), 推荐系统(recommender systems)</p><h2 id="Supervised-Learning"><a href="#Supervised-Learning" class="headerlink" title="Supervised Learning"></a>Supervised Learning</h2><p><strong>监督学习</strong>：我们给算法一个数据集，其中包含了正确答案，算法的目的就是给出更多的正确答案。</p><p><strong>回归(Regression)</strong>：预测连续的数值输出。</p><p><strong>分类(Classification)</strong>：预测一个离散值输出。</p><p>示例：房子的价格与房子面积的关系(回归问题)；肿瘤是恶性或良性与肿瘤大小，患者年龄，肿瘤块厚度等的关系(分类问题)。</p><p><br></p><p>下面一个问题。problem1将要卖的货物数量看成一个连续的值，属于回归问题；problem2输出的值可能为0或1，分别表示两种不同的结果，属于分类问题。</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190429231017.png" alt="ML1"></p><h2 id="Unsupervised-Learning"><a href="#Unsupervised-Learning" class="headerlink" title="Unsupervised Learning"></a>Unsupervised Learning</h2><p><strong>无监督学习</strong>：对于数据集中的每一个样本，都具有相同标签或都没有标签，我们不知道要拿数据做什么，也不知道每个数据点究竟是什么，只能在数据集种找到某种结构(簇)，它们具有类似的性质。<strong>聚类(clustering)</strong>是无监督学习的一种 。</p><p><strong>Cocktail party problem 鸡尾酒会问题</strong></p><p>编程环境Octave或Matlab</p><p>解决代码</p><p>$$[W,s,v]=svd((repmat(sum(x.^*x,1),size(x,1),1).^*x)^*x’)$$</p><p>$svd$ 是奇异值分解的缩写，在Octave中作为一个内置函数。</p><p><br></p><p>下面一个问题，哪些选项要使用无监督学习算法？</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190429231037.png" alt="ML2"></p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于机器学习，这是我学的第一节课。&lt;/p&gt;
    
    </summary>
    
    
      <category term="supervised learning" scheme="https://foreti.me/tags/supervised-learning/"/>
    
      <category term="unsupervised learning" scheme="https://foreti.me/tags/unsupervised-learning/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu系统安装</title>
    <link href="https://foreti.me/2018/01/11/ubuntu-installation/"/>
    <id>https://foreti.me/2018/01/11/ubuntu-installation/</id>
    <published>2018-01-11T05:16:17.000Z</published>
    <updated>2019-07-27T02:14:09.300Z</updated>
    
    <content type="html"><![CDATA[<p>安装ubuntu双系统过程</p><a id="more"></a><hr><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190429231432.png" alt></p><ul><li><a href="https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-windows#0" target="_blank" rel="noopener">ubuntu系统安装教程</a></li><li><a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">ubuntu Desktop最新版本下载</a>，制作U盘启动盘推荐使用<a href="https://rufus.akeo.ie/" target="_blank" rel="noopener">Rufus</a>工具</li><li>ubuntu系统分区方案<ul><li>在windows系统上把原硬盘压缩出50G的free空间，在ubuntu安装时分出2G作为swap分区</li><li>剩下的格式化为ext4格式，挂载位置为<code>/</code></li><li><del>由于现在PC内存都较大了，所以不必创建swap交换分区</del></li><li>设置<code>安装启动引导器的设备</code><ul><li>我的电脑有两块ssd，一块小的全部作为C盘，装的win10系统和开机启动软件；一块大的作为D盘，安装常用软件和存放一些资料。我把ubuntu安装在了D盘上的一个50G分区，这样就要把ubuntu的引导器放在D盘，也就是<code>sdb</code> （sda对应第一块硬盘，sdb对应第二块硬盘），这样的话电脑开机时会自动进入win10，如果我按F11才会进入grub选择ubuntu系统，这样正好符合我的需求。</li><li>如果把引导器安装在C盘，每次开机都会手动选择系统。</li></ul></li></ul></li></ul><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装ubuntu双系统过程&lt;/p&gt;
    
    </summary>
    
    
      <category term="ubuntu" scheme="https://foreti.me/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的next主题个性化配置</title>
    <link href="https://foreti.me/2017/12/31/hexo-next-personal/"/>
    <id>https://foreti.me/2017/12/31/hexo-next-personal/</id>
    <published>2017-12-31T13:10:03.000Z</published>
    <updated>2019-07-27T02:14:09.300Z</updated>
    
    <content type="html"><![CDATA[<p>对Hexo的Next主题配置和使用，我还是有一些心得的，无非是各种样式覆盖一下，逃：）</p><a id="more"></a><hr><h2 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h2><p>首先在博客根目录安装hexo插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure><p>npm安装失败请用cnpm</p><p>然后在博客配置文件<code>_config.yml</code>中修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins: hexo-generate-feed</span><br><span class="line">feed:</span><br><span class="line">  type: atom       #feed 类型 (atom/rss2)</span><br><span class="line">  path: atom.xml   #rss 路径</span><br><span class="line">  limit: 0        #在 rss 中最多生成的文章数(0显示所有)</span><br></pre></td></tr></table></figure><p>然后在主题配置文件<code>_config.yml</code>中修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure><hr><h2 id="修改作者头像并旋转"><a href="#修改作者头像并旋转" class="headerlink" title="修改作者头像并旋转"></a>修改作者头像并旋转</h2><p>打开<code>\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code>，在里面添加如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 头像圆形 */</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#333</span>sf;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span></span><br><span class="line"><span class="comment">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transition</span>: -webkit-transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">  <span class="attribute">-moz-transition</span>: -moz-transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* 鼠标经过停止头像旋转 </span></span><br><span class="line"><span class="comment">  -webkit-animation-play-state:paused;</span></span><br><span class="line"><span class="comment">  animation-play-state:paused;*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Z 轴旋转动画 */</span></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="添加相册"><a href="#添加相册" class="headerlink" title="添加相册"></a>添加相册</h2><div id="album">我的<a href="https://fakeyanss.github.io/gallery/" target="_blank" rel="noopener">相册</a>。</div><p>原理很简单，就是建立一个github仓库存储用于存储图片，然后将每个图片的路径保存到一个json文件里，在hexo博客中解析这个json文件，渲染成html页面后就可以在显示图片了。当然这里肯定要有页面的样式和图片的裁剪压缩，原理简单，实际操作起来有一些坑，我并不懂css样式，还是要感谢<a href="http://litten.me/" target="_blank" rel="noopener">litten</a>提供的方法。</p><h3 id="相册源"><a href="#相册源" class="headerlink" title="相册源"></a>相册源</h3><ul><li>首先在github上新建一个仓库，命名<code>Blog_Album</code></li><li><p>clone我的<a href="https://github.com/fakeYanss/Hexo-Album" target="_blank" rel="noopener">Hexo-Album仓库</a>，改一下文件名为Blog_Album或者其他，记住之后要上传的相片就放到<code>photos</code>文件夹内。</p></li><li><p>在博客根目录运行</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new photo</span><br></pre></td></tr></table></figure><ul><li><p>回到<code>Blog_Album</code>文件夹，在make-json.py中96行、98行，修改路径为blog源文件中的photo页面路径。这里后两行打印json的可以不需要。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">with open(&quot;../Blog_Source/source/photo/&quot; + target_file, &quot;w&quot;) as fp:</span><br><span class="line">    json.dump(final_dict, fp, indent=4, separators=(&apos;,&apos;, &apos;: &apos;))</span><br><span class="line">with open(&quot;../Blog_Source/source/photo/&quot; + target_file, &quot;r&quot;) as fp:</span><br><span class="line">    print (json.load(fp))</span><br></pre></td></tr></table></figure></li><li><p>添加一些图片到<code>Blog_Album</code>的<code>photos</code>文件夹中</p></li><li>运行compress.py生成图片缩略图到min_photos/</li><li>运行make-json.py生成json文件到blog源文件中</li><li>将<code>Blog_Album</code>的修改传到github远程仓库<code>Blog_Album</code></li></ul><p>上传前可以将Hexo文件夹移出，这个文件夹中的文件在后面还有作用。如果你不用七牛云，也可以将qiniu相关的脚本删掉。</p><h3 id="博客相册页"><a href="#博客相册页" class="headerlink" title="博客相册页"></a>博客相册页</h3><ol><li>回到<code>yourblog\source\photo</code>目录下，下载这些定义好的<a href="https://github.com/fakeYanss/Hexo-Album/tree/master/Hexo/Source/photos" target="_blank" rel="noopener">photo页面文件</a>，后期你可以自己修改其中内容。</li></ol><p>将<code>ins.js</code>中的114行的<code>render()</code>函数需要修改这两个变量，这里是将图片存在github对应的连接，如果是七牛云需要绑定域名了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minSrc = <span class="string">'https://raw.githubusercontent.com/fakeYanss/Blog_Album/master/min_photos/'</span> + data.link[i];</span><br><span class="line"><span class="keyword">var</span> src = <span class="string">'https://raw.githubusercontent.com/fakeYanss/Blog_Album/master/photos/'</span> + data.link[i];</span><br></pre></td></tr></table></figure><p>如果你的仓库名和我相同，只用把这里的<code>fakeYanss</code>改为你自己的github name即可。</p><ol start="2"><li>在<code>yourBlog/themes/next/source/js/src</code>下加入两个js文件photoswipe.min.js和photoswipe-ui-default.min.js，都可以在Hexo文件夹中找到。</li></ol><ol start="3"><li>在<code>yourBlog/themes/next/layout/_scripts/pages/post-details.swig</code>中添加</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for(theme.js) &#125;&#125;/src/photoswipe.min.js?v=&#123;&#123; theme.version &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for(theme.js) &#125;&#125;/src/photoswipe-ui-default.min.js?v=&#123;&#123; theme.version &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>在<code>yourBlog/themes/next/layout/_layout.swig</code>中</li></ol><p><code>head</code>内插入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for(theme.js) &#125;&#125;/src/photoswipe.min.js?v=&#123;&#123; theme.version &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for(theme.js) &#125;&#125;/src/photoswipe-ui-default.min.js?v=&#123;&#123; theme.version &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>body</code>内插入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.type === "photos" %&#125;</span><br><span class="line"><span class="comment">&lt;!-- Root element of PhotoSwipe. Must have class pswp. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__scroll-wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__ui pswp__ui--hidden"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__top-bar"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__counter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--close"</span> <span class="attr">title</span>=<span class="string">"Close (Esc)"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--share"</span> <span class="attr">title</span>=<span class="string">"Share"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--fs"</span> <span class="attr">title</span>=<span class="string">"Toggle fullscreen"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--zoom"</span> <span class="attr">title</span>=<span class="string">"Zoom in/out"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Preloader demo http://codepen.io/dimsemenov/pen/yyBWoR --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- element will get class pswp__preloader--active when preloader is running --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader__icn"</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader__cut"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader__donut"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__share-modal pswp__share-modal--hidden pswp__single-tap"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__share-tooltip"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--arrow--left"</span> <span class="attr">title</span>=<span class="string">"Previous (arrow left)"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--arrow--right"</span> <span class="attr">title</span>=<span class="string">"Next (arrow right)"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__caption"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__caption__center"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>重新编译博客内容即可看到相册内容。</p></li><li><p>注意：</p><ul><li>如果py脚本不能运行，先安装python环境，再安装<code>Pillow</code>库<code>pip install Pillow</code></li><li>相册图片的命名请遵循<code>yyyy-mm-dd_abc.jpg</code>格式，虽然脚本里写了其他格式的处理，但实际情况似乎只能对jpg文件裁剪压缩</li><li>最后的不足是，相片的裁剪算法，可能会把一张图片中的人体头部裁剪掉</li><li>next主题源码是不支持相册的，如果有不懂的地方，可以看看评论的相似情况，或者查一下<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a>主题的issue，然后再来问我</li><li>相册源文件中处理图片生成json和上传图片的处理，我写了一个releash.sh脚本，可以修改一下，以后添加图片后快捷处理</li></ul></li></ol><h3 id="changelog"><a href="#changelog" class="headerlink" title="changelog"></a>changelog</h3><ul><li><p>2018.2.23修改<br>发现ios设备拍摄的正方形照片的压缩图上传后仍然有orientation值为6即偏转90度问题，索性修改了整个裁剪切割和生成json的脚本。在压缩同时修改偏转值，并且在生成json时获取图片尺寸，在前端显示图片原图时在<code>data-size</code>中设置json中的对应图片尺寸，这样可以不切割原图，修改后的设置方法在</p><ul><li><p><a href="https://github.com/fakeYanss/gallery" target="_blank" rel="noopener">生成缩略图和json数据并上传七牛云</a>，</p></li><li><p>对于修改后的相册的ins.js，需要做一些修改，以适应修改后的脚本生成的json数据，在render()方法中，注意内层<code>&lt;img&gt;</code>标签为缩略图，<code>&lt;a&gt;</code>标签为原图，在对应的属性处设为对应值。</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minSrc = <span class="string">'http://pic.yanss.top/min_photos/'</span> + data.link[i];</span><br><span class="line"><span class="keyword">var</span> src = <span class="string">'http://pic.yanss.top/'</span> + data.link[i];</span><br><span class="line"><span class="keyword">var</span> type = data.type[i];</span><br><span class="line"><span class="keyword">var</span> target = src + <span class="string">'.'</span> +type;</span><br><span class="line"><span class="keyword">var</span> size = data.size[i];</span><br><span class="line">src = src + (type === <span class="string">'mp4'</span> ? <span class="string">'.jpg'</span> : <span class="string">'.'</span> + type) + <span class="string">'?imageMogr2/auto-orient'</span>;</span><br><span class="line">minSrc = minSrc + (type === <span class="string">'mp4'</span> ? <span class="string">'.jpg'</span> : <span class="string">'.'</span> + type);</span><br><span class="line">type = (type === <span class="string">'mp4'</span> ? <span class="string">'video'</span> : <span class="string">'image'</span>)</span><br><span class="line"></span><br><span class="line">liTmpl += <span class="string">'&lt;figure class="thumb" itemprop="associatedMedia" itemscope="" itemtype="http://schema.org/ImageObject"&gt;\</span></span><br><span class="line"><span class="string">               &lt;a href="'</span> + src + <span class="string">'" itemprop="contentUrl" data-size="'</span> + size + <span class="string">'" data-type="'</span> + type + <span class="string">'" data-target="'</span> + target + <span class="string">'"&gt;\</span></span><br><span class="line"><span class="string">                   &lt;img class="reward-img" data-type="'</span> + type + <span class="string">'" data-src="'</span> + minSrc + <span class="string">'" src="./assets/empty.png" itemprop="thumbnail" onload="lzld(this)"&gt;\</span></span><br><span class="line"><span class="string">               &lt;/a&gt;\</span></span><br><span class="line"><span class="string">               &lt;figcaption style="display:none" itemprop="caption description"&gt;'</span> + data.text[i] + <span class="string">'&lt;/figcaption&gt;\</span></span><br><span class="line"><span class="string">           &lt;/figure&gt;'</span>;</span><br></pre></td></tr></table></figure><ul><li>2019.3.2修改<br>由于换了主题hollow，不支持添加页面，所以讲相册独立出来，发到一个github仓库并开启page功能，目前是在<a href="https://fakeyanss.github.io/gallery" target="_blank" rel="noopener">https://fakeyanss.github.io/gallery</a>。</li></ul><p>并且做了一些修改：</p><ul><li>不在使用七牛云图床，转到github，毕竟不限流，不限量，慢点就慢点。 </li><li>如果图片的orientaion信息有问题，可以自己修改一下，mac上用Xee³，window上用bandizip家的蜂蜜浏览器，都是打开图片保存一下就好了，直接将orientation值重设为1。</li><li>修改了一些样式，计划做成Instagram的样式。</li></ul><hr><h2 id="添加Gitment评论"><a href="#添加Gitment评论" class="headerlink" title="添加Gitment评论"></a>添加Gitment评论</h2><p>原本是用的livere评论，后来总是加载速度太慢，上了梯子也一样，索性改成了<a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">Gitment</a>评论。</p><p>感谢作者<a href="https://github.com/imsun" target="_blank" rel="noopener">imsun</a>，Gitment评论源自github仓库的issue，所以在将博客地址关联了某个github仓库后，在博客下评论其实就是在对应仓库的issue中评论，这创意真是太好了。</p><p>我之前的next主题一直是<code>5.1.0</code>版本，本来是想在主题中添加gitment的js和css文件，结果没成功。然后在next的<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">官方文档</a>中看到已经发行到<code>5.1.4</code>了，而且已经集成了gitment评论。这下可方便，干脆直接升级了next主题，然后就改<code>config</code>文件就好啦。</p><p>以前主题中配置了一些设置项，时间久了还忘了改了哪些文件！！！所以升级版本很痛苦，用的Sublime的一个插件Sublimerge，可以对比两个文件的代码差异，就是这样<br><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/hexo%E4%B8%AA%E6%80%A7%E8%AE%BE%E7%BD%AE.png" alt="Sublimerge"><br>就像git pull操作之后改动时一样，这样子把每个有可能改过的文件都对比了一遍，然后升级到了5.1.4，发现集成了很多新功能，其他的有时间再试吧，这里就只说gitment。</p><p>首先在<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">这里</a>注册一个OAuth Application，<code>Homepage URL</code>和<code>Authorization callback URL</code>填写博客首页地址，也就是站点配置文件中的<code>url</code>，其他随意填写即可。</p><p>然后会得到一个<code>Client ID</code>和<code>Client Secret</code>，把这两个值填到主题配置文件的gitment对应位置<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gitment:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  mint:</span> <span class="literal">true</span> <span class="comment"># gitment仓库有两个，这里填true是引用第一个，false引用第二个，具体在layout下的conment文件中可以找到</span></span><br><span class="line"><span class="attr">  count:</span> <span class="literal">true</span> <span class="comment"># 评论计数</span></span><br><span class="line"><span class="attr">  lazy:</span> <span class="literal">false</span> <span class="comment"># 如果要点击按钮再显示评论就填true</span></span><br><span class="line"><span class="attr">  cleanly:</span> <span class="literal">true</span> <span class="comment"># 隐藏底部信息</span></span><br><span class="line"><span class="attr">  language:</span> <span class="comment"># Force language, or auto switch by theme</span></span><br><span class="line"><span class="attr">  github_user:</span> <span class="string">填github</span> <span class="string">ID</span></span><br><span class="line"><span class="attr">  github_repo:</span> <span class="string">填保存issue的仓库名，一般就用博客发布的仓库名</span></span><br><span class="line"><span class="attr">  client_id:</span> <span class="string">刚才的值</span></span><br><span class="line"><span class="attr">  client_secret:</span> <span class="string">刚才的值</span></span><br><span class="line"><span class="attr">  proxy_gateway:</span> <span class="comment"># 设置代理，不用填</span></span><br><span class="line"><span class="attr">  redirect_protocol:</span> <span class="comment"># 没搞懂，不用填</span></span><br></pre></td></tr></table></figure></p><p>然后重新部署博客(本地调试是没用的，因为url不同)，再打开博客，这时候需要在每一个有评论的页面上使用自己的github长航登录并初始化一遍评论，之后就不用了。文章多的话会有点麻烦，不知道gitment作者有没有做好自动初始化？好像查到了<a href="https://draveness.me/git-comments-initialize" target="_blank" rel="noopener">这个</a>，不过我还没试过。<br>这里是成功的样子<img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/gitment.png" alt="gitment"></p><p>但是，这个鼠标放上有两条横线什么鬼啊！！！<img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/gitment1.png" alt="gitment1"></p><p>还有这里头像下面为什么有一条横线！！！！<img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/gitment2.pnghttp://pic.yanss.top/gitment2.png" alt="gitment2"></p><p>强迫症忍不了，查看了gitment的css定义，没发现什么问题啊，然后在浏览器中调试，发现了这个<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;  </span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">word-wrap</span>: break-word;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的<code>border-bottom: 1px solid #999</code>就是<code>a</code>标签下有一条横线的意思，但是这个属性是主题的属性<code>main.css</code>啊，显然是不能改的，于是只有在<code>themes\next\source\css\_common\components\third-party\gitment.styl</code>下改动了，在这里可以重写前面定义的属性，我是这样改的，在最后面加上<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.gitment-comment-main</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">word-wrap</span>: break-word;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.gitment-editor-avatar</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">word-wrap</span>: break-word;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第一个就是修改的ID下的横线，显示为<code>none</code>就好了；第二个是修改编辑框头像下的横线，也是显示为<code>none</code>。</p><p>这样，算是完成了Gitment的配置了。</p><p>gitment已经失效了，看到作者的博客下的评论也失效了，查到似乎是因为gitment中在与github认证时需要作者提供的服务端支持，但是作者的服务端已经停掉了。</p><p>我现在转到了disqus。</p><hr><h2 id="设置自定义页面不显示Sidebar"><a href="#设置自定义页面不显示Sidebar" class="headerlink" title="设置自定义页面不显示Sidebar"></a>设置自定义页面不显示Sidebar</h2><p>主题配置文件中是这样的<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  wrap:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">sidebar:</span></span><br><span class="line"><span class="attr">  position:</span> <span class="string">left</span></span><br><span class="line"><span class="attr">  display:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure></p><p>讲道理这样就是是没有问题的，但是我发现自定义的页面里如果写了太多的<code>#</code>或者<code>&lt;h1&gt;</code>，就会被识别为<code>post</code>类型而不是<code>page</code>，也就是博客文章，会被自动加载目录，这就很蛋疼了不是，毕竟有的页面不想要目录啊尴尬！！！</p><blockquote><p>一般这种样式问题都在<code>layout</code>文件夹中找原因。</p></blockquote><p><s>在<code>themes\next\layout\_macro\sidebar.swig</code>，找到开头的</s><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro render(is_post) %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-toggle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-toggle-line-wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sidebar-toggle-line sidebar-toggle-line-first"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sidebar-toggle-line sidebar-toggle-line-middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sidebar-toggle-line sidebar-toggle-line-last"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><s>在下面加上</s><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.toc and theme.toc.enable %&#125;</span><br></pre></td></tr></table></figure></p><p><s>然后在倒数第二行加上</s><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><p>发现这样修改有bug，重新改。在<code>themes\next\layout\_macro\sidebar.swig</code>找到这一句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set display_toc = is_post and theme.toc.enable or is_page and theme.toc.enable %&#125;</span><br></pre></td></tr></table></figure></p><p>改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set display_toc = is_post and theme.toc.enable or is_page and page.toc or is_page and theme.toc.enable and page.toc %&#125;</span><br></pre></td></tr></table></figure></p><p>其实就是多加一个判断，判断页面的开头有没有<code>toc</code>属性</p><p>最后，在需要有sidebar目录的文章前加上<code>toc: true</code>即可。</p><p>为了以后的方便，可以在<code>scaffolds\post.md</code>中加上<code>toc: true</code>。</p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对Hexo的Next主题配置和使用，我还是有一些心得的，无非是各种样式覆盖一下，逃：）&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://foreti.me/tags/hexo/"/>
    
      <category term="next" scheme="https://foreti.me/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>Java垃圾回收算法浅析</title>
    <link href="https://foreti.me/2017/12/31/java-gc-algorithm/"/>
    <id>https://foreti.me/2017/12/31/java-gc-algorithm/</id>
    <published>2017-12-31T03:05:37.000Z</published>
    <updated>2019-07-27T02:14:09.300Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看《深入理解Java虚拟机》一书，其中对垃圾回收算法做了分类和讲解，这里记录一下。</p><a id="more"></a><hr><h1 id="GC的三种收集方法"><a href="#GC的三种收集方法" class="headerlink" title="GC的三种收集方法"></a>GC的三种收集方法</h1><h2 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h2><p>标记清除算法是最基础的收集算法，其他收集算法都是基于这种思想。</p><p>标记清除算法分为“标记”和“清除”两个阶段：首先标记出需要回收的对象，标记完成之后统一清除对象。</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/vern%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4%E7%AE%97%E6%B3%95.jpg" alt="vern标记清除算法"></p><p>主要缺点：</p><ol><li>效率问题，标记和清除过程效率不高 。</li><li>空间问题，标记清除之后会产生大量不连续的内存碎片。</li></ol><h2 id="标记整理"><a href="#标记整理" class="headerlink" title="标记整理"></a>标记整理</h2><p>标记整理，主要用于回收老年代。</p><p>标记操作和“标记-清除”算法一致，后续操作不只是直接清理对象，而是在清理无用对象完成后让所有存活的对象都向一端移动，并更新引用其对象的指针。</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/vern%E6%A0%87%E8%AE%B0%E6%95%B4%E7%90%86%E7%AE%97%E6%B3%95.jpg" alt="vern标记整理算法"></p><p>主要缺点：在标记-清除的基础上还需进行对象的移动，成本相对较高，好处则是不会产生内存碎片。</p><h2 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h2><p>复制算法，主要用于回收新生代。</p><p>它将可用内存容量划分为大小相等的两块，每次只使用其中的一块。当这一块用完之后，就将还存活的对象复制到另外一块上面，然后在把已使用过的内存空间一次理掉。这样使得每次都是对其中的一块进行内存回收，不会产生碎片等情况，只要移动堆订的指针，按顺序分配内存即可，实现简单，运行高效。</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/vern%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95.jpg" alt="vern复制算法"></p><p>主要缺点：内存缩小为原来的一半。</p><h1 id="分代的垃圾回收策略"><a href="#分代的垃圾回收策略" class="headerlink" title="分代的垃圾回收策略"></a>分代的垃圾回收策略</h1><p>分代的垃圾回收策略是基于这样一个事实：不同的对象的生命周期是不一样的。因此，不同生命周期的对象可以采取不同的回收算法，以便提高回收效率。</p><h2 id="年轻代（Young-Generation）"><a href="#年轻代（Young-Generation）" class="headerlink" title="年轻代（Young Generation）"></a>年轻代（Young Generation）</h2><ul><li>所有新生成的对象首先都是放在年轻代的。年轻代的目标就是尽可能快速的收集掉那些生命周期短的对象。</li><li>新生代内存按照8:1:1的比例分为一个eden区和两个survivor(survivor0,survivor1)区。一个Eden区，两个 Survivor区(一般而言)。大部分对象在Eden区中生成。<ul><li>回收时先将eden区存活对象复制到一个survivor0区，然后清空eden区；</li><li>当这个survivor0区也存放满了时，则将eden区和survivor0区存活对象复制到另一个survivor1区，然后清空eden和这个survivor0区；</li><li>此时survivor0区是空的，然后将survivor0区和survivor1区交换，即保持survivor1区为空。 </li><li>如此往复循环。</li></ul></li><li>当survivor1区不足以存放 eden和survivor0的存活对象时，就将存活对象直接存放到老年代。若是老年代也满了就会触发一次Full GC，也就是新生代、老年代都进行回收</li><li>新生代发生的GC也叫做Minor GC，MinorGC发生频率比较高(不一定等Eden区满了才触发)</li></ul><h2 id="年老代（Old-Generation）"><a href="#年老代（Old-Generation）" class="headerlink" title="年老代（Old Generation）"></a>年老代（Old Generation）</h2><ul><li>在年轻代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代中。因此，可以认为年老代中存放的都是一些生命周期较长的对象。</li><li>内存比新生代也大很多(大概比例是1:2)，当老年代内存满时触发Major GC即Full GC，Full GC发生频率比较低，老年代对象存活时间比较长，存活率标记高。</li></ul><h2 id="持久代（Permanent-Generation）"><a href="#持久代（Permanent-Generation）" class="headerlink" title="持久代（Permanent Generation）"></a>持久代（Permanent Generation）</h2><p>用于存放静态文件，如Java类、方法等。持久代对垃圾回收没有显著影响，但是有些应用可能动态生成或者调用一些class，例如Hibernate 等，在这种时候需要设置一个比较大的持久代空间来存放这些运行过程中新增的类。</p><blockquote><p>Oracle JDK8的HotSpot VM去掉“持久代”，以“元数据区”（Metaspace）替代之。</p></blockquote><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看《深入理解Java虚拟机》一书，其中对垃圾回收算法做了分类和讲解，这里记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="gc" scheme="https://foreti.me/tags/gc/"/>
    
  </entry>
  
  <entry>
    <title>如何拿到大厂的深度学习offer</title>
    <link href="https://foreti.me/2017/12/24/graduates-deeplearning-offer-2018/"/>
    <id>https://foreti.me/2017/12/24/graduates-deeplearning-offer-2018/</id>
    <published>2017-12-24T04:40:33.000Z</published>
    <updated>2019-07-27T02:14:09.285Z</updated>
    
    <content type="html"><![CDATA[<p>在深度学习方向，应届硕士毕业生如何拿到知名互联网公司深度学习 offer?</p><a id="more"></a><hr><p>转发自知乎，<a href="https://www.zhihu.com/question/59683332/answer/281642849" target="_blank" rel="noopener">原答案</a> </p><p>by <strong>熊风</strong>学长 （没署名被人误认令我感到惶恐=,=）</p><p>最近投了一堆机器学习/深度学习/计算机视觉方向的公司，分享一下自己的经验，希望对大家有帮助。</p><p>个人背景： 华科本科 + 港科大硕士（MPhil）</p><p>拿到的offer有腾讯优图，阿里AI lab，今日头条，滴滴研究院，商汤科技，旷视（face++），大疆，快手。绝大部分是ssp（super special），给到了普通硕士能给到的最高档，例如滴滴的offer是滴滴新锐，腾讯的offer是技术大咖等等。这些offer大部分待遇在40W-50W之间，个别公司算上期权能到60W</p><h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>这个回答的适用对象主要还是本科和硕士。PhD找工作的套路跟硕士还是很不一样的，所以这个回答的经验对于手握几篇一作顶会的PhD大神并没啥参考意义。</p><p>我也和我们实验室几个找工作的PhD学长学姐聊过，他们的面试主要是讲自己的research，有的甚至就是去公司给个talk，跟本科硕士的校招流程完全不同。现在也是AI方向PhD的黄金时代，没毕业就被各大公司主动联系，待遇也比我这种硕士高很多很多。</p><h2 id="一-整体建议"><a href="#一-整体建议" class="headerlink" title="一.  整体建议"></a>一.  整体建议</h2><p>一定要找内推。内推一般有两种，第一种力度比较弱，在公司的内推系统上填一下你的名字，加快一下招聘流程；第二种力度比较强，直接把简历送到部门负责人手上。个人比较建议第二种，会省事很多。</p><p>原因如下：</p><p>（1）现在做机器学习的人实在太多了，在不找内推的情况下，流程会特别特别慢。即使你的简历比较优秀，也可能淹没在茫茫大海中，不一定能被懂行的人看到。</p><p>（2）现在很多公司的笔试其实挺有难度的，就算是大神也有翻车的可能性。</p><p>（3）对于大公司而言，即使通过了简历筛选、笔试那一关，你也很难保证你的简历被合适的部门挑中。很可能过关斩将后，发现给你安排的面试官并不是太对口。尤其是深度学习这样比较新的领域，一般部门的面试官多半也是近期自学的，对这个也是一知半解。所以如果是想去BAT这些大公司里面专门做AI的部门，按照正常校招流程走是不合适的，一定要找到那些部门的员工内推。在我看来，如果是跪在简历筛选、笔试这些上面，连面试官都没见到，就实在太可惜了。为了避免这一点，请认真找内推。最好能联系到你想去的公司部门里的负责人，直接安排面试。</p><h2 id="二-面试经验"><a href="#二-面试经验" class="headerlink" title="二. 面试经验"></a>二. 面试经验</h2><p>面试遇到的题目，可以分为几个大类：</p><h3 id="（1）代码题（leetcode类型）"><a href="#（1）代码题（leetcode类型）" class="headerlink" title="（1）代码题（leetcode类型）"></a>（1）代码题（leetcode类型）</h3><p>主要考察数据结构和基础算法，以及代码基本功。</p><p>虽然这部分跟机器学习，深度学习关系不大，但也是面试的重中之重。基本每家公司的面试都问了大量的算法题和代码题，即使是商汤、face++这样的深度学习公司，考察这部分的时间也占到了我很多轮面试的60%甚至70%以上。我去face++面试的时候，面试官是residual net，shuffle net的作者；但他们的面试中，写代码题依旧是主要的部分。</p><p>大部分题目都不难，基本是leetcode medium的难度。但是要求在现场白板编程，思路要流畅，能做到一次性Bug-free.  并且，一般都是要给出时间复杂度和空间复杂度最优的做法。对于少数难度很大的题，也不要慌张。一般也不会一点思路也没有，尽力给面试官展现自己的思考过程。面试官也会引导你，给一点小提示，沿着提示把题目慢慢做出来也是可以通过面试的。</p><p>以下是我所遇到的一些需要当场写出完整代码的题目：</p><p>  <1> 二分查找。分别实现C++中的lower_bound和upper_bound.    </1></p><p>  <2> 排序。 手写快速排序，归并排序，堆排序都被问到过。  </2></p><p>  <3> 给你一个数组，求这个数组的最大子段积  </3></p><p>  时间复杂度可以到O(n)  </p><p>  <4> 给你一个数组，在这个数组中找出不重合的两段，让这两段的字段和的差的绝对值最大。  </4></p><p>  时间复杂度可以到O(n)  </p><p>  <5> 给你一个数组，求一个k值，使得前k个数的方差 + 后面n-k个数的方差最小  </5></p><p>  时间复杂度可以到O(n)  </p><p>  <6> 给你一个只由0和1组成的字符串，找一个最长的子串，要求这个子串里面0和1的数目相等。  </6></p><p>  时间复杂度可以到O(n)  </p><p>  <7> 给你一个数组以及一个数K， 从这个数组里面选择三个数，使得三个数的和小于等于K， 问有多少种选择的方法？  </7></p><p>  时间复杂度可以到O(n^2)  </p><p>  <8> 给你一个只由0和1组成的矩阵，找出一个最大的子矩阵，要求这个子矩阵是方阵，并且这个子矩阵的所有元素为1  </8></p><p>  时间复杂度可以到O(n^2)  </p><p>  <9> 求一个字符串的最长回文子串  </9></p><p>  时间复杂度可以到O(n) (Manacher算法)  </p><p>  <10> 在一个数轴上移动，初始在0点，现在要到给定的某一个x点， 每一步有三种选择，坐标加1，坐标减1，坐标乘以2，请问最少需要多少步从0点到x点。   </10></p><p>  <11> 给你一个集合，输出这个集合的所有子集。  </11></p><p>  <12> 给你一个长度为n的数组，以及一个k值（k &lt; n) 求出这个数组中每k个相邻元素里面的最大值。其实也就是一个一维的max pooling  </12></p><p>  时间复杂度可以到O(n)   </p><p>  <13> 写一个程序，在单位球面上随机取点，也就是说保证随机取到的点是均匀的。  </13></p><p>  <14> 给你一个长度为n的字符串s，以及m个短串（每个短串的长度小于10）， 每个字符串都是基因序列，也就是说只含有A,T,C,G这四个字母。在字符串中找出所有可以和任何一个短串模糊匹配的子串。模糊匹配的定义，两个字符串长度相等，并且至多有两个字符不一样，那么我们就可以说这两个字符串是模糊匹配的。  </14></p><p>  <15> 其它一些描述很复杂的题这里就不列了。</15></p><h3 id="（2）数学题或者”智力”题"><a href="#（2）数学题或者”智力”题" class="headerlink" title="（2）数学题或者”智力”题"></a>（2）数学题或者”智力”题</h3><p>不会涉及特别高深的数学知识，一般就是工科数学（微积分，概率论，线性代数）和一些组合数学的问题。</p><p>下面是我在面试中被问到过的问题：</p><p>  <1> 如果一个女生说她集齐了十二个星座的前男友，她前男友数量的期望是多少？  </1></p><p>  ps：这道题在知乎上有广泛的讨论，作为知乎重度用户我也看到过。<a href="https://www.zhihu.com/question/38331955" target="_blank" rel="noopener">如果一个女生说，她集齐了十二个星座的前男友，我们应该如何估计她前男友的数量？</a>   </p><p>  <2> 两个人玩游戏。有n堆石头，每堆分别有a1, a2, a3…. an个石头，每次一个游戏者可以从任意一堆石头里拿走至少一个石头，也可以整堆拿走，但不能从多堆石头里面拿。无法拿石头的游戏者输，请问这个游戏是否有先手必胜或者后手必胜的策略？ 如果有，请说出这个策略，并证明这个策略能保证必胜。  </2></p><p>  <3> 一个一维数轴，起始点在原点。每次向左或者向右走一步，概率都是0.5. 请问回到原点的步数期望是多少？  </3></p><p>  <4> 一条长度为1的线段，随机剪两刀，求有一根大于0.5的概率。  </4></p><p>  <5> 讲一下你理解的矩阵的秩。低秩矩阵有什么特点？ 在图像处理领域，这些特点有什么应用？  </5></p><p>  <6> 讲一下你理解的特征值和特征向量。  </6></p><p>  <7> 为什么负梯度方向是使函数值下降最快的方向？简单数学推导一下</7></p><h3 id="（3）机器学习基础"><a href="#（3）机器学习基础" class="headerlink" title="（3）机器学习基础"></a>（3）机器学习基础</h3><p>这部分建议参考周志华老师的《机器学习》。</p><p>下面是我在面试中被问到过的问题：</p><p><a href="https://www.nowcoder.com/discuss/65323" target="_blank" rel="noopener">https://www.nowcoder.com/discuss/65323</a></p><p>  <1> 逻辑回归和线性回归对比有什么优点？  </1></p><p>  <2> 逻辑回归可以处理非线性问题吗？  </2></p><p>  <3> 分类问题有哪些评价指标？每种的适用场景。  </3></p><p>  <4> 讲一下正则化，L1和L2正则化各自的特点和适用场景。  </4></p><p>  <5> 讲一下常用的损失函数以及各自的适用场景。  </5></p><p>  <6> 讲一下决策树和随机森林  </6></p><p>  <7> 讲一下GBDT的细节，写出GBDT的目标函数。 GBDT和Adaboost的区别与联系  </7></p><p>  <8> 手推softmax loss公式  </8></p><p>  <9> 讲一下SVM, SVM与LR有什么联系。  </9></p><p>  <10>讲一下PCA的步骤。PCA和SVD的区别和联系  </10></p><p>  <11> 讲一下ensemble  </11></p><p>  <12>  偏差和方差的区别。ensemble的方法中哪些是降低偏差，哪些是降低方差？  </12></p><p>  …… </p><p>这部分问得太琐碎了，我能记起来的问题就这么多了。我的感觉，这部分问题大多数不是问得很深，所以不至于被问得哑口无言，总有得扯；但是要想给出一个特别深刻的回答，还是需要对机器学习的基础算法了解比较透彻。</p><h3 id="（4）深度学习基础"><a href="#（4）深度学习基础" class="headerlink" title="（4）深度学习基础"></a>（4）深度学习基础</h3><p>这部分的准备，我推荐花书（Bengio的Deep learning）和 <a href="https://www.zhihu.com/people/b716bc76c2990cd06dae2f9c1f984e6d" target="_blank" rel="noopener">@魏秀参</a></p><p><a href="http://210.28.132.67/weixs/book/CNN_book.html" target="_blank" rel="noopener">《解析卷积神经网络-深度学习实践手册》</a></p><p>  <1> 手推BP  </1></p><p>  <2> 手推RNN和LSTM结构  </2></p><p>  <3> LSTM中每个gate的作用是什么，为什么跟RNN比起来，LSTM可以防止梯度消失  </3></p><p>  <4> 讲一下pooling的作用， 为什么max pooling要更常用？哪些情况下，average pooling比max pooling更合适？  </4></p><p>  <5> 梯度消失和梯度爆炸的原因是什么？ 有哪些解决方法？  </5></p><p>  <6> CNN和RNN的梯度消失是一样的吗？  </6></p><p>  <6> 有哪些防止过拟合的方法？  </6></p><p>  <7> 讲一下激活函数sigmoid，tanh，relu. 各自的优点和适用场景？   </7></p><p>  <8> relu的负半轴导数都是0，这部分产生的梯度消失怎么办？  </8></p><p>  <9> batch size对收敛速度的影响。  </9></p><p>  <10> 讲一下batch normalization   </10></p><p>  <11> CNN做卷积运算的复杂度。如果一个CNN网络的输入channel数目和卷积核数目都减半，总的计算量变为原来的多少？  </11></p><p>  <12> 讲一下AlexNet的具体结构，每层的作用  </12></p><p>  <13> 讲一下你怎么理解dropout，分别从bagging和正则化的角度  </13></p><p>  <14> data augmentation有哪些技巧？  </14></p><p>  <15> 讲一下你了解的优化方法，sgd, momentum, rmsprop, adam的区别和联系  </15></p><p>  <16> 如果训练的神经网络不收敛，可能有哪些原因？  </16></p><p>  <17> 说一下你理解的卷积核， 1x1的卷积核有什么作用？  </17></p><p>  ……..  </p><p>  同上，这部分的很多问题也是每个人都或多或少能回答一点，但要答得很好还是需要功底的。</p><h3 id="（5）科研上的开放性问题"><a href="#（5）科研上的开放性问题" class="headerlink" title="（5）科研上的开放性问题"></a>（5）科研上的开放性问题</h3><p>这部分的问题没有固定答案，也没法很好地针对性准备。功在平时，多读paper多思考，注意培养自己的insight和intuition</p><p>下面是我在面试中被问到过的问题：</p><p>  <1> 选一个计算机视觉、深度学习、机器学习的子领域，讲一下这个领域的发展脉络，重点讲出各种新方法提出时的motivation，以及谈谈这个领域以后会怎么发展。  </1></p><p>  <2> 讲一下你最近看的印象比较深的paper  </2></p><p>  <3> 讲一下经典的几种网络结构， AlexNet， VGG，GoogleNet， Residual Net等等，它们各自最重要的contribution  </3></p><p>  <4> 你看过最近很火的XXX paper吗? 你对这个有什么看法？   </4></p><p>  ……   </p><h3 id="（6）-编程语言、操作系统等方面的一些问题。"><a href="#（6）-编程语言、操作系统等方面的一些问题。" class="headerlink" title="（6） 编程语言、操作系统等方面的一些问题。"></a>（6） 编程语言、操作系统等方面的一些问题。</h3><p>  C++， Python， 操作系统，Linux命令等等。这部分问得比较少，但还是有的，不具体列了  </p><h3 id="（7）针对简历里项目-论文-实习的一些问题。"><a href="#（7）针对简历里项目-论文-实习的一些问题。" class="headerlink" title="（7）针对简历里项目/论文 / 实习的一些问题。"></a>（7）针对简历里项目/论文 / 实习的一些问题。</h3><p>这部分因人而异，我个人的对大家也没参考价值，也不列了。</p><h2 id="三-平时应该怎么准备"><a href="#三-平时应该怎么准备" class="headerlink" title="三. 平时应该怎么准备"></a>三. 平时应该怎么准备</h2><p>在大多数情况下，你能拿到什么样的offer，其实已经被你的简历决定了。如果平时没有积累相关的经历和成果，很难只靠面试表现就拿到非常好的offer。所以建议大家平时积累算法岗所看重的一些干货。</p><p>下面几点算是找AI相关工作的加分项：</p><p>（1）一作的顶级会议论文</p><p>（2）AI领域知名公司的实习经历（长期实习更好）</p><p>（3）相关方向有含金量的项目经历</p><p>（4）计算机视觉竞赛，数据挖掘竞赛的获奖或者优秀名次。现在这类竞赛太多了，就不具体列了。</p><p>（5）程序设计竞赛的获奖（例如OI/ACM/topcoder之类的）</p><p>当然，名校、高GPA这些是针对所有领域都有用的加分项，同样也是适用于这个领域的。</p><p>所以我的建议就是，如果自己所在的实验室很厉害，资源丰富，就专心做科研，发paper； 如果所在的实验室一般，没法产出相关的优秀成果，可以考虑自己做比赛和找实习。有一份知名公司的实习经历之后，找工作难度会下降很多。</p><p>最后，祝有志于AI这个领域的人都能拿到满意的offer.</p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在深度学习方向，应届硕士毕业生如何拿到知名互联网公司深度学习 offer?&lt;/p&gt;
    
    </summary>
    
    
      <category term="deep learning" scheme="https://foreti.me/tags/deep-learning/"/>
    
      <category term="offer" scheme="https://foreti.me/tags/offer/"/>
    
  </entry>
  
  <entry>
    <title>css轮播图</title>
    <link href="https://foreti.me/2017/09/13/css-slideshow/"/>
    <id>https://foreti.me/2017/09/13/css-slideshow/</id>
    <published>2017-09-13T02:42:00.000Z</published>
    <updated>2019-07-27T02:14:09.285Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍一种css实现首页轮播图效果的方法，主要用css3的animation属性。</p><a id="more"></a><hr><p><strong> 本文转自<a href="https://zhuanlan.zhihu.com/p/25033131" target="_blank" rel="noopener">知乎</a></strong></p><p>由于css无法做到js一样的精准操控，所有某些效果是无法实现的，比如在轮播的同时支持用户左右滑动，所以使用css只能实现基本的效果。下面列出来的内容就是我们实现的：</p><ol><li>在固定区域中，内部内容自行滑动切换形成播放的效果</li><li>当切换到最后一张内容时，会反向播放或者回到起点重播</li><li>每张内容会停留一段时间，让用户能够看清楚</li><li>内容可以点击/进行操作</li></ol><h2 id="dom结构搭建"><a href="#dom结构搭建" class="headerlink" title="dom结构搭建"></a>dom结构搭建</h2><p>首先要有一个容器作为轮播图的容器，同时由于要实现滑动切换，所以内部需要有一个装载所有待切换内容的子容器</p><p>如果子容器中的内容是左右切换的，则需要将内容左右排列开</p><p>下面以轮播图片为例，上代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loop-wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loop-images-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"darksky.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"loop-image"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"starsky.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"loop-image"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"whiteland.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"loop-image"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"darksky.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"loop-image"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"starsky.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"loop-image"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>.loop-wrap</code> 是主容器</p><p><code>.loop-images-container</code> 是承载内部图片的子容器</p><p><code>.loop-image</code> 是图片内容，如果需要显示其他内容，可以自定义</p><h2 id="css实现静态效果"><a href="#css实现静态效果" class="headerlink" title="css实现静态效果"></a>css实现静态效果</h2><p>轮播图内每一页内容的宽高应该相同，且等于主容器.loop-wrap宽高</p><p><code>.loop-images-container</code>的宽高必然有一个大于外部主容器，<code>overflow</code>属性应该设置为<code>hidden</code>。那为什么不设置为<code>auto</code>呢？我不告诉你，你可以自己试试看<br>(这里原因是auto属性会在内容超出时自动加载出容器的下拉条)<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.loop-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loop-images-container</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500%</span>; <span class="comment">/* 横向排列 5张图片 宽度应为主容器5倍 */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loop-image</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="css实现轮播效果"><a href="#css实现轮播效果" class="headerlink" title="css实现轮播效果"></a>css实现轮播效果</h2><p>轮播效果说到底就是一个动画效果，而通过css3的新属性 <code>animation</code> 我们就可以自定义一个动画来达到轮播图效果。下面先来了解一下 <code>animation</code> 这个属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">animation: name duration timing-function delay iteration-count direction</span><br><span class="line"></span><br><span class="line">name: 动画名</span><br><span class="line">duration： 动画持续时间 设置为0则不执行</span><br><span class="line">timing-function：动画速度曲线</span><br><span class="line">delay：动画延迟开始时间 设置为0则不延迟</span><br><span class="line">iteration-count：动画循环次数 设置为infinite则无限次循环</span><br><span class="line">direction：是否应该轮流反向播放动画 normal 否 alternate 是</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p><p><code>animation</code> 的 <code>name</code> 值是动画名，动画名可以通过 <code>@keyframes</code> 创建自定义动画规则</p><h2 id="分析动画"><a href="#分析动画" class="headerlink" title="分析动画"></a>分析动画</h2><p>要实现轮播，本质上是使内部承载内容的子容器 <code>.loop-images-container</code> 进行位移，从而使不同位置的内容一次展示在用户眼前</p><p>共有五张图片需要展示，如果轮播总耗时10s，那么每张图片应该有2s的时间(20%)，而每张图片耗时的构成是切换耗时+展示耗时，如果切换耗时500ms(5%)，展示耗时就应该是1500ms(15%)</p><p>于是这样改造css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.loop-images-container</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0,0); <span class="comment">/* 初始位置位移 */</span></span><br><span class="line">    <span class="attribute">animation</span>: loop <span class="number">10s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建loop动画规则 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">   轮播5张，总耗时10s，单张应为2s(20%)</span></span><br><span class="line"><span class="comment">   单张切换动画耗时500ms，停留1500ms</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">@<span class="keyword">keyframes</span> loop &#123;</span><br><span class="line">    0% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(0,0);&#125;</span><br><span class="line">    15% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(0,0);&#125; <span class="comment">/* 停留1500ms */</span></span><br><span class="line"></span><br><span class="line">    20% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(-20%,0);&#125; <span class="comment">/* 切换500ms 位移-20% */</span></span><br><span class="line">    35% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(-20%,0);&#125;</span><br><span class="line"></span><br><span class="line">    40% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(-40%,0);&#125;</span><br><span class="line">    55% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(-40%,0);&#125;</span><br><span class="line"></span><br><span class="line">    60% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(-60%,0);&#125;</span><br><span class="line">    75% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(-60%,0);&#125;</span><br><span class="line"></span><br><span class="line">    80% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(-80%,0);&#125;</span><br><span class="line">    95% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(-80%,0);&#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(0,0);&#125; <span class="comment">/* 复位到第一张图片 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是一个方向的轮播效果，想要实现往返方向的轮播效果，小伙伴们可以试试<code>direction</code>的<code>alternate</code>，但是自定义动画规则的时间间隔也要重新计算了哦！</p><p>以下是所有代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.loop-wrap</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    width: 500px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    margin: 100px auto;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.loop-images-container</span>&#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0; top: 0;</span><br><span class="line"><span class="css">    <span class="selector-tag">width</span>: 500%; <span class="comment">/* 横向排列 5张图片 宽度应为主容器5倍 */</span></span></span><br><span class="line">    height: 100%;</span><br><span class="line">    font-size: 0;</span><br><span class="line"><span class="css">    <span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(0,0); <span class="comment">/* 初始位置位移 */</span></span></span><br><span class="line">    animation: loop 10s linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.loop-image</span>&#123;</span></span><br><span class="line">    width: 500px;</span><br><span class="line">    height: 300px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">@<span class="keyword">keyframes</span> loop &#123;</span></span><br><span class="line"><span class="css">    0% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(0,0);&#125;</span></span><br><span class="line"><span class="css">    15% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(0,0);&#125; <span class="comment">/* 停留1500ms */</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">    20% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(-20%,0);&#125; <span class="comment">/* 切换500ms 位移-20% */</span></span></span><br><span class="line"><span class="css">    35% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(-20%,0);&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="css">    40% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(-40%,0);&#125;</span></span><br><span class="line"><span class="css">    55% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(-40%,0);&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="css">    60% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(-60%,0);&#125;</span></span><br><span class="line"><span class="css">    75% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(-60%,0);&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="css">    80% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(-80%,0);&#125;</span></span><br><span class="line"><span class="css">    95% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(-80%,0);&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="css">    100% &#123;<span class="attribute">transform</span>: <span class="built_in">translate</span>(0,0);&#125; <span class="comment">/* 复位到第一张图片 */</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loop-wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loop-images-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"loop-image"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"loop-image"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"loop-image"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"loop-image"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"loop-image"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然css也能实现轮播效果，但是相对于js实现来说，功能性就弱了很多，无法控制暂停与播放，无法与用户产生交互，无法监听到状态的而变化等等，但是好处也很明显嘛！那就是简单。</p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍一种css实现首页轮播图效果的方法，主要用css3的animation属性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css3" scheme="https://foreti.me/tags/css3/"/>
    
      <category term="animation" scheme="https://foreti.me/tags/animation/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer刷题</title>
    <link href="https://foreti.me/2017/09/08/jianzhi-offer/"/>
    <id>https://foreti.me/2017/09/08/jianzhi-offer/</id>
    <published>2017-09-08T06:43:33.000Z</published>
    <updated>2019-07-27T02:14:09.300Z</updated>
    
    <content type="html"><![CDATA[<p>刷一下算法题吧。</p><a id="more"></a><hr><h1 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>看到问题第一反应是用replaceAll()方法，但这样挺没意思的。所以自己写解决方法，这样的话，就有了两种思路。</p><ol><li>从前往后替换，当遇到第一个空格时，要移动第一个空格后所有的字符一次；当遇到第二个空格时，要移动第二个空格后所有的字符一次；以此类推。</li><li>从后往前，先计算需要多少空间，然后从后往前移动，则每个字符只为移动一次，这样效率更高一点。</li></ol><p>这里提供第二种方法的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> spacenum = <span class="number">0</span>;<span class="comment">//spacenum为计算空格数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i)==<span class="string">' '</span>)</span><br><span class="line">                spacenum++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> indexold = str.length()-<span class="number">1</span>; <span class="comment">//indexold为为替换前的str下标</span></span><br><span class="line">        <span class="keyword">int</span> newlength = str.length() + spacenum*<span class="number">2</span>;<span class="comment">//计算空格转换成%20之后的str长度</span></span><br><span class="line">        <span class="keyword">int</span> indexnew = newlength-<span class="number">1</span>;<span class="comment">//indexnew为把空格替换为%20后的str下标</span></span><br><span class="line">        str.setLength(newlength);<span class="comment">//使str的长度扩大到转换成%20之后的长度,防止下标越界</span></span><br><span class="line">        <span class="keyword">for</span>(;indexold&gt;=<span class="number">0</span> &amp;&amp; indexold&lt;newlength;--indexold)&#123; </span><br><span class="line">                <span class="keyword">if</span>(str.charAt(indexold) == <span class="string">' '</span>)&#123;  <span class="comment">//</span></span><br><span class="line">                str.setCharAt(indexnew--, <span class="string">'0'</span>);</span><br><span class="line">                str.setCharAt(indexnew--, <span class="string">'2'</span>);</span><br><span class="line">                str.setCharAt(indexnew--, <span class="string">'%'</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    str.setCharAt(indexnew--, str.charAt(indexold));</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="从尾到头打印链表"><a href="#从尾到头打印链表" class="headerlink" title="从尾到头打印链表"></a>从尾到头打印链表</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个链表，从尾到头打印链表每个节点的值。<br>思路2：<br>递归<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(listNode != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.printListFromTailToHead(listNode.next);</span><br><span class="line">            arrayList.add(listNode.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>思路2：<br>利用栈<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (listNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(listNode.val);</span><br><span class="line">            listNode = listNode.next;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            list.add(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a>二维数组中的查找</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>利用二维数组由上到下，由左到右递增的规律，<br>那么选取右上角或者左下角的元素a[row][col]与target进行比较，<br>当target小于元素a[row][col]时，那么target必定在元素a所在行的左边,<br>即col–；<br>当target大于元素a[row][col]时，那么target必定在元素a所在列的下边,<br>即row++；<br>时间复杂度是<code>O(2n)</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> [][] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> col=array[<span class="number">0</span>].length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(row&lt;=array.length-<span class="number">1</span>&amp;&amp;col&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target==array[row][col])</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;array[row][col])</span><br><span class="line">                row++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                col--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另一种思路是<br>把每一行看成有序递增的数组，<br>利用二分查找，<br>通过遍历每一行得到答案，<br>时间复杂度是<code>O(nlogn)</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> [][] array,<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> low=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> high=array[i].length-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">                <span class="keyword">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(target&gt;array[i][mid])</span><br><span class="line">                    low=mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;array[i][mid])</span><br><span class="line">                    high=mid-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刷一下算法题吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="offer" scheme="https://foreti.me/tags/offer/"/>
    
  </entry>
  
  <entry>
    <title>Coding DaoCloud持续集成</title>
    <link href="https://foreti.me/2017/08/07/codingnet-dalcloud-ci/"/>
    <id>https://foreti.me/2017/08/07/codingnet-dalcloud-ci/</id>
    <published>2017-08-07T14:38:23.000Z</published>
    <updated>2019-07-27T02:14:09.285Z</updated>
    
    <content type="html"><![CDATA[<p>如何在多终端发布coding博客，比如部署好的hexo+coding博客，我换了电脑，有方便的方法可以继续发博客吗？答案是有。</p><a id="more"></a><hr><p>在上一篇博客中，按照步骤做完，就可以在本机发布博客到coding了，但这样我们只能用这一台电脑发博客，并且最大的问题是备份问题，如果这台电脑挂了，或者是误删文件，就很可能丢失了blog源文件。如果没有备份，就要gg了。</p><p>想要备份源文件，同时在多终端发布博客，最好的实现方式是找一个持续集成工具，在<code>coding</code>的帮助文档里有一些介绍，我试过一些，最后选择<code>DaoCloud</code>来集成coding仓库，原因还是免费。</p><p>这里的原理是，在coding的blog仓库中建立两个分支，分别是master和coding-pages。master分支存放blog源文件，即本地的hexo文件内容；<code>coding-pages</code>分支存放博客的全部静态页面，也就是<code>blog\public</code>文件夹中的内容。</p><p>操作的过程中，顺序是</p><ol><li><code>git push</code> 提交本地blog源文件到<code>master</code>分支</li><li>DaoCloud检测到master分支有提交内容，按照设置好的安装环境，生成博客，部署博客到coding-pages分支</li></ol><p>这样在部署过一次之后，如果不再修改样式和主题等其他内容，只是提交博客，可以直接登录coding.net网站，将编辑好的md文件添加到<code>master</code>分支的<code>blog/source/_post</code>文件夹下，就完了。</p><p>如果要同步本地备份，也只用把<code>master</code>分支内容<code>clone</code>到本地就行了。</p><p>现在开始正式的操作。</p><h2 id="创建新分支"><a href="#创建新分支" class="headerlink" title="创建新分支"></a>创建新分支</h2><p>登录到coding官网中，可以继续保留上一篇博客中创建的仓库，先清空仓库（在项目设置里的仓库设置），然后在分支管理处新建分支<code>coding-pages</code>。</p><h2 id="创建SSH-Key文件夹"><a href="#创建SSH-Key文件夹" class="headerlink" title="创建SSH Key文件夹"></a>创建SSH Key文件夹</h2><p>由于上一篇博客<a href="http://yanss.top/Coding+DaoCloud%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/" target="_blank" rel="noopener">《github+hexo搭建个人博客》</a>中已经创建了SSH key，所以这里可以直接使用，在<code>/blog/</code>根目录下创建文件夹<code>.daocloud</code>，这里前面有<code>.</code>的文件夹不能直接创建，可以先直接创建<code>aaa</code>，再用命令行修改名字。此处右键打开git bash，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv aaa .daocloud</span><br></pre></td></tr></table></figure></p><p>然后把之前生成的SSH key复制到这个文件夹下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp  ~/.ssh/id_rsa*   .daocloud/</span><br></pre></td></tr></table></figure></p><p>然后在<code>.daocloud</code>下新建文件<code>ssh_config</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch ssh_config</span><br></pre></td></tr></table></figure></p><p>打开<code>ssh_config</code>,输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StrictHostKeyChecking no</span><br><span class="line">UserKnownHostsFile /dev/null</span><br></pre></td></tr></table></figure></p><p>保存。</p><h2 id="编辑Dockerfile"><a href="#编辑Dockerfile" class="headerlink" title="编辑Dockerfile"></a>编辑Dockerfile</h2><p>在本地仓库blog根目录下新建文件名为<code>Dockerfile</code>的文件（没有后缀）,打开编辑内容如下，原因稍后再说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Dockerfile</span><br><span class="line">FROM node:slim</span><br><span class="line">MAINTAINER xxx &lt;xxx@xxx.com&gt;</span><br><span class="line"></span><br><span class="line"># 安装git、ssh等基本工具</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y git ssh-client ca-certificates --no-install-recommends &amp;&amp; rm -r /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line"># 设置时区</span><br><span class="line">RUN echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone &amp;&amp; dpkg-reconfigure -f noninteractive tzdata</span><br><span class="line"></span><br><span class="line">RUN npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"># 只安装Hexo命令行工具，其他依赖项根据项目package.json在持续集成过程中安装</span><br><span class="line">RUN cnpm install hexo-cli -g</span><br><span class="line"># install hexo server</span><br><span class="line">RUN cnpm install hexo-server</span><br><span class="line"></span><br><span class="line">EXPOSE 4000</span><br></pre></td></tr></table></figure><p>这里只用替换上你自己的coding用户名和邮箱就行，别的不变。</p><h2 id="修改本地-config-yml配置"><a href="#修改本地-config-yml配置" class="headerlink" title="修改本地_config.yml配置"></a>修改本地_config.yml配置</h2><p>因为要把博客部署到<code>coding-pages</code>分支，所以要修改deploy参数，把_config.yml的deploy修改如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">      coding: git@git.coding.net:xxx/xxx.git,coding-pages</span><br></pre></td></tr></table></figure></p><p>coding后面替换为你自己的coding仓库地址，加上coding-pages分支。</p><h2 id="DaoCloud创建项目和配置"><a href="#DaoCloud创建项目和配置" class="headerlink" title="DaoCloud创建项目和配置"></a>DaoCloud创建项目和配置</h2><p>这里是因为DaoCloud系统有过升级改版，网上搜到的DaoCloud操作教程几乎都是去年12月以前的，所以有些对现在的版本不太适用，我自己借助旧的教程和部署<code>AppVeyor</code>的经验改动了一些，适用现在的DaoCloud。</p><p>下面先登录DaoCloud官网，用github或者coding账号直接登录，在个人设置中绑定github和coding，然后在控制台新建项目，项目名随便取。<br><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20170807214217.jpg" alt="img"><br><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20170807214425.jpg" alt="img"></p><p>选择<code>成功构建后设置 latest 为镜像标签</code>，然后点击<code>镜像：ci-hexo</code>（这里是我的名字，你就点你自己相应的），复制镜像地址，先记在一边等下要用。这里安利一个剪贴板管理软件<a href="https://sourceforge.net/projects/ditto-cp/" target="_blank" rel="noopener">Ditto</a>。<br><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/2017080721427.jpg" alt="img"></p><p>然后打开流程定义，点击右侧<code>通过 yaml 快捷编辑</code>，打开后只一个脚本编辑页面，直接把以下内容复制进去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">version: 3</span><br><span class="line">image: ubuntu:16.04</span><br><span class="line">stages:</span><br><span class="line">- build</span><br><span class="line">- test</span><br><span class="line">构建任务:</span><br><span class="line">  stage: build</span><br><span class="line">  job_type: image_build</span><br><span class="line">  only:</span><br><span class="line">    branches:</span><br><span class="line">    - master</span><br><span class="line">  build_dir: /</span><br><span class="line">  cache: true</span><br><span class="line">  dockerfile_path: /Dockerfile</span><br><span class="line">测试任务:</span><br><span class="line">  stage: test</span><br><span class="line">  job_type: test</span><br><span class="line">  only:</span><br><span class="line">    branches:</span><br><span class="line">    - master</span><br><span class="line">  pull_request: false</span><br><span class="line">  before_script:</span><br><span class="line">  - mkdir ~/.ssh</span><br><span class="line">  - mv .daocloud/id_rsa ~/.ssh/id_rsa</span><br><span class="line">  - mv .daocloud/ssh_config ~/.ssh/config</span><br><span class="line">  - chmod 600 ~/.ssh/id_rsa</span><br><span class="line">  - chmod 600 ~/.ssh/config</span><br><span class="line">  - eval $(ssh-agent)</span><br><span class="line">  - ssh-add ~/.ssh/id_rsa</span><br><span class="line">  - rm -rf .daocloud</span><br><span class="line">  - git config --global user.name &quot;xxxxx&quot; #这里填你的coding用户名</span><br><span class="line">  - git config --global user.email &quot;xxxxx@xxxxx.com&quot; #这里填你的coding邮箱</span><br><span class="line">  image: xxxxx:latest #这里填你的镜像url，不要覆盖latest</span><br><span class="line">  install:</span><br><span class="line">  - cnpm install</span><br><span class="line">  - cnpm install --save hexo-generator-feed</span><br><span class="line">  - cnpm install hexo-baidu-url-submit --save</span><br><span class="line">  script:</span><br><span class="line">  - hexo clean</span><br><span class="line">  - hexo g</span><br><span class="line">  - hexo d</span><br><span class="line">  - rm -rf ~/.ssh/</span><br></pre></td></tr></table></figure><p>只用修改3处位置，其他的不要动，然后点击<code>更新</code>。<br><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20170807220526.jpg" alt="img"></p><p>到了这里就快完成了，还差一点，在流程定义这里点击构建任务，修改触发条件为分支-master-执行任务，测试任务也修改触发条件为分支-master-执行任务。<br><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20170807220586726.jpg" alt="img"><br><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20170807221310.jpg" alt="img"></p><h2 id="git关联远程库和提交代码"><a href="#git关联远程库和提交代码" class="headerlink" title="git关联远程库和提交代码"></a>git关联远程库和提交代码</h2><p>先在所有的配置就做完了，可以回到blog文件夹下，将本地仓库push到远程库就行了。<br>现在介绍一下如何关联远程库，以及commit和push操作。</p><ul><li>关联远程库，这里后面xxx是你的仓库url</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add coding xxxxxx</span><br></pre></td></tr></table></figure><ul><li>添加代码到本地仓库和commit信息，这里xxx是你的commit信息，可以随便写</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;xxx&quot;</span><br></pre></td></tr></table></figure><ul><li>push到远程库的master分支</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u coding master</span><br></pre></td></tr></table></figure><p>如果提示有冲突，就把<code>-u</code>改为<code>-f</code>，反正仓库里都是自己的东西，force push也没什么大问题。</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>现在就完成了全部的操作，其实并不复杂，Dockerfile之预编译文件，放在仓库master分支中，每当仓库master分支有新的提交时，DaoCloud会监测到变化，由于触发条件的设置，就开始了构建任务和测试任务，构建任务阶段是编译Dockerfile文件中的脚本，其实大致意思很好懂，就是配置git，node和hexo环境。然后进行测试任务，就是进行刚才编辑的yaml编辑器中的脚本，其中有一段测试任务，逻辑就是安装必要的hexo包，然后复制coding仓库里的ssh密匙，用你配置的账号和邮箱，进行hexo操作，清除缓存，生成文件，部署到coding-pages分支，然后删除ssh密匙（安全性）。</p><p>虽然整个操作过程有暴露私有ssh key的风险，但说实话，git的初衷不就是为了分享代码吗，况且我们写的这些真实价值并没有多少，所以放心的使用吧，coding提供的是私有仓库还是可以放心，github进行进行相同操作就改一下配置也可以最后删掉ssh key。</p><p>coding+DaoCloud持续集成到此结束，有问题可以下方留言评论。</p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何在多终端发布coding博客，比如部署好的hexo+coding博客，我换了电脑，有方便的方法可以继续发博客吗？答案是有。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CI" scheme="https://foreti.me/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>Github Hexo AppVeyor个人博客搭建和持续集成</title>
    <link href="https://foreti.me/2017/08/07/github-hexo-appveyor-ci/"/>
    <id>https://foreti.me/2017/08/07/github-hexo-appveyor-ci/</id>
    <published>2017-08-07T14:38:23.000Z</published>
    <updated>2019-07-27T02:14:09.285Z</updated>
    
    <content type="html"><![CDATA[<p>因为一些原因，不再使用coding.net，所以在github上维护博客文件和进行持续集成。</p><a id="more"></a><hr><p>我们都知道github pages提供了静态网页的自动解析，于是我们想到用github pages展示个人项目，特别是前端工程师，完全可以拿github展示个人项目设计。除此之外，我们也可以拿这个写个人博客，但是有一点，我们很难把博客写成html的静态页面吧。虽然可以强行实现，但是每添加一篇blog，就需要添加很多指向其他页面的链接，还有很多样式，光秃秃的页面总归不美。</p><p>有需求就有答案，这里有一种方法是，用一种博客框架来实现将编辑好的博客文本自动生成静态页面，这样我们就只用将html文件加入repository就好。有一个基于<code>Node.js</code>的轻量级的框架<code>Hexo</code>，就可以实现把<code>markdown</code>文件生成静态页面并发布到github仓库的功能，本文的内容从这里开始。</p><p>由于有不同的终端机，每次在不同平台去同步博客特别麻烦，所以想到持续集成的方式。在Github上同步管理我的blog源码，由第三方平台进行持续集成构建博客的html文件，并发布到gh-pages。搜一搜解决方案还不少，Travis，Appveyor和DaoCloud是我使用过的免费平台。这里只说Appveyor。</p><p>（时隔近一年，继续编辑这篇post）<br>这里只贴出AppVeyor的官方文档和用于hexo构建的yaml脚本。</p><p>文档地址：<a href="https://www.appveyor.com/docs/" target="_blank" rel="noopener">https://www.appveyor.com/docs/</a></p><ol><li>创建新项目，在设置中进行环境变量设定：</li></ol><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/blog_appveyor_env.png" alt></p><ol start="2"><li><p>访问github个人设置页面，点击边栏下方的【Personal access tokens】选项卡，并点击右上方的【Generate new token】按钮。Token description任意填写，下方的选项中全选repo即可。点击下方绿色的【Generate token】按钮。此时就能得到Access Token。也可以参考<a href="https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/" target="_blank" rel="noopener">官方文档</a></p></li><li><p>加密Access Token。由于这个AccessToken是可以直接操作你的仓库的，而且配置文件是公开的，所以这时就要求对AccessToken进行加密。可到<a href="https://ci.appveyor.com/tools/encrypt" target="_blank" rel="noopener">AppVeyor Token加密页面</a>进行加密。把加密后的字符串填入下一步中的配置脚本的<code>secure</code>里。</p></li><li><p>构建脚本：</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">clone_depth:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line"><span class="attr">  access_token:</span></span><br><span class="line"><span class="attr">    secure:</span> <span class="string">***********************************************</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="attr">  - ps:</span> <span class="string">Install-Product</span> <span class="string">node</span> <span class="string">''</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">node</span> <span class="bullet">--version</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="bullet">--version</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="bullet">-g</span></span><br><span class="line">  <span class="comment"># and other package you need</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build_script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line"><span class="attr">artifacts:</span></span><br><span class="line"><span class="attr">  - path:</span> <span class="string">public</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on_success:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">credential.helper</span> <span class="string">store</span></span><br><span class="line"><span class="attr">  - ps:</span> <span class="string">Add-Content</span> <span class="string">"$env:USERPROFILE\.git-credentials"</span> <span class="string">"https://$($env:access_token):x-oauth-basic@github.com`n"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.email</span> <span class="string">"%GIT_USER_EMAIL%"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.name</span> <span class="string">"%GIT_USER_NAME%"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">clone</span> <span class="bullet">--depth</span> <span class="number">5</span> <span class="bullet">-q</span> <span class="bullet">--branch=%TARGET_BRANCH%</span> <span class="string">%STATIC_SITE_REPO%</span> <span class="string">%TEMP%\static-site</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cd</span> <span class="string">%TEMP%\static-site</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">del</span> <span class="string">*</span> <span class="string">/f</span> <span class="string">/q</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">for</span> <span class="string">/d</span> <span class="string">%%p</span> <span class="string">IN</span> <span class="string">(*)</span> <span class="string">do</span> <span class="string">rmdir</span> <span class="string">"%%p"</span> <span class="string">/s</span> <span class="string">/q</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">SETLOCAL</span> <span class="string">EnableDelayedExpansion</span> <span class="string">&amp;</span> <span class="string">robocopy</span> <span class="string">"%APPVEYOR_BUILD_FOLDER%\public"</span> <span class="string">"%TEMP%\static-site"</span> <span class="string">/e</span> <span class="string">&amp;</span> <span class="string">IF</span> <span class="type">!ERRORLEVEL</span><span class="string">!</span> <span class="string">EQU</span> <span class="number">1</span> <span class="string">(exit</span> <span class="number">0</span><span class="string">)</span> <span class="string">ELSE</span> <span class="string">(IF</span> <span class="type">!ERRORLEVEL</span><span class="string">!</span> <span class="string">EQU</span> <span class="number">3</span> <span class="string">(exit</span> <span class="number">0</span><span class="string">)</span> <span class="string">ELSE</span> <span class="string">(exit</span> <span class="number">1</span><span class="string">))</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">add</span> <span class="bullet">-A</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">if</span> <span class="string">"%APPVEYOR_REPO_BRANCH%"</span><span class="string">=="master"</span> <span class="string">if</span> <span class="string">not</span> <span class="string">defined</span> <span class="string">APPVEYOR_PULL_REQUEST_NUMBER</span> <span class="string">(git</span> <span class="string">diff</span> <span class="bullet">--quiet</span> <span class="bullet">--exit-code</span> <span class="bullet">--cached</span> <span class="string">||</span> <span class="string">git</span> <span class="string">commit</span> <span class="bullet">-m</span> <span class="string">"Update Static Site"</span> <span class="string">&amp;&amp;</span> <span class="string">git</span> <span class="string">push</span> <span class="string">origin</span> <span class="string">%TARGET_BRANCH%</span> <span class="string">&amp;&amp;</span> <span class="string">appveyor</span> <span class="string">AddMessage</span> <span class="string">"Static Site Updated"</span><span class="string">)</span></span><br></pre></td></tr></table></figure><p>好的，大致就这么些，如果还有问题，可在评论中提出。</p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为一些原因，不再使用coding.net，所以在github上维护博客文件和进行持续集成。&lt;/p&gt;
    
    </summary>
    
    
      <category term="appveyor" scheme="https://foreti.me/tags/appveyor/"/>
    
  </entry>
  
  <entry>
    <title>Coding+Hexo搭建个人博客</title>
    <link href="https://foreti.me/2017/08/07/codingnet-hexo-blog/"/>
    <id>https://foreti.me/2017/08/07/codingnet-hexo-blog/</id>
    <published>2017-08-07T04:52:44.000Z</published>
    <updated>2019-07-27T02:14:09.285Z</updated>
    
    <content type="html"><![CDATA[<p>在coding.net上答应了好几个评论的朋友要写一篇教程，不多说，我们直接进入主题。</p><a id="more"></a><hr><p>我搭建博客用的是hexo框架，因为这个框架比较简单轻便，而且依赖于node.js管理包文件，我以前用过也用过一些npm的内容，所以选了这个。这里提一句，基于coding或者github搭建的博客都是静态页面，轻量简洁，相对的功能上不如Wordpress那样强大，但是我们也可以用第三方插件实现文章统计，网站计数，博客评论等功能，看自己喜好加吧。</p><p>好了，现在我们开始操作。</p><h2 id="step-1-安装环境"><a href="#step-1-安装环境" class="headerlink" title="step 1 安装环境"></a>step 1 安装环境</h2><p>环境有三，node git hexo，hexo最后装。</p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>直接去下官网最新版本，安装步骤就不停next就好，不放心的话搜一下百度知道，有几个步骤需要斟酌，不过影响不大。链接在这里<a href="https://git-scm.com/" target="_blank" rel="noopener">git官网</a>。</p><h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><p>也是官网最新版本，<a href="http://nodejs.cn/" target="_blank" rel="noopener">node.js中文官网</a>现在好像是8.x了，这个就一直next安装，装好后在桌面打开cmd，</p><p>npm是node.js集成的包管理工具，现在是直接随node装好了。</p><p>查看版本号，成功显示就能用了，如果显示不是可用的命令就需要手动添加node环境变量，这个也简单，百度知道全有。</p><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p>在桌面右键，<code>git bash</code>，然后输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p><p>这里用<code>cnpm</code>是因为<code>npm</code>连接不太稳定，我用<code>npm</code>也是装了两次<code>hexo</code>才成功。而<code>cnpm</code>是淘宝团队提供的一个<code>npm</code>镜像库，国内访问非常快，以后的<code>npm</code>命令就在前面加一个<code>c</code>，使用方法完全相同。然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>在某个盘下新建一个文件夹，取名随意，我是<code>blog</code>。</p><p>然后在这个文件夹下右键，<code>git bash</code>，然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>即在此初始化hexo源文件，需要这个<code>blog</code>文件夹初始为空。然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure><p>这一步是安装通用的npm包文件，如果有特定的npm包需要额外添加。我们除了通用包，还要一个hexo部署博客的包文件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>现在需要的基础包就安装好了。</p><h2 id="step-2-测试本地发布"><a href="#step-2-测试本地发布" class="headerlink" title="step 2 测试本地发布"></a>step 2 测试本地发布</h2><p>现在新建一个博客，在<code>blog</code>文件夹下右键，<code>git bash</code>，然后输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new test</span><br></pre></td></tr></table></figure><p>这一步是在生成一篇空博客marksown文档，存在<code>blog\source\_post</code>路径下，可以用编辑器打开它，我用的是sublime，装了markdown editing和markdown preview插件，或者其他md编辑器都行，在test.md中随便写点什么，然后保存。接下来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></p><p>这一步是hexo的核心，把md文件转为静态页面，并添加主题样式和必要的链接，生成的文件在public下。然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>这样，就是在本地预览博客，在浏览器地址栏中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:4000</span><br></pre></td></tr></table></figure><p>就可以看到结果了。<br>现在只能自己浏览，想要让其他人也能看到，就需要部署到服务器上。租服务器不仅要花费，还要自己搭建web环境，太麻烦了，而且不适合学生党和技术不够的同学们，万幸github和coding都提供了静态页面解析的功能，所以我们把<code>public</code>文件夹下的内容<code>push</code>到一个git远程仓库就可以了。现在我们需要开始发布到coding的步骤。</p><h2 id="step-3-本地博客部署到coding"><a href="#step-3-本地博客部署到coding" class="headerlink" title="step 3 本地博客部署到coding"></a>step 3 本地博客部署到coding</h2><p>首先，去官网登陆你的coding账号，没有就注册一个，然后完善个人信息，升级到银牌会员（才能绑定个人域名）。然后新建一个repository，项目名称就填你的用户名，选择私有，然后创建项目。<br><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20170807124643.png" alt="img"></p><p>现在有了远程仓库，就要把本地仓库和远程仓库关联起来，首先在<code>blog</code>目录下<code>git bash</code>，然后输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure></p><p>查看你的git配置信息，像我的是这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ git config -l</span><br><span class="line">core.symlinks=false</span><br><span class="line">core.autocrlf=true</span><br><span class="line">core.fscache=true</span><br><span class="line">color.diff=auto</span><br><span class="line">color.status=auto</span><br><span class="line">color.branch=auto</span><br><span class="line">color.interactive=true</span><br><span class="line">help.format=html</span><br><span class="line">rebase.autosquash=true</span><br><span class="line">http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt</span><br><span class="line">diff.astextplain.textconv=astextplain</span><br><span class="line">filter.lfs.clean=git-lfs clean -- %f</span><br><span class="line">filter.lfs.smudge=git-lfs smudge -- %f</span><br><span class="line">filter.lfs.required=true</span><br><span class="line">filter.lfs.process=git-lfs filter-process</span><br><span class="line">credential.helper=manager</span><br><span class="line">user.name=xxx</span><br><span class="line">user.email=xxx@xxx.com</span><br><span class="line">core.repositoryformatversion=0</span><br><span class="line">core.filemode=false</span><br><span class="line">core.bare=false</span><br><span class="line">core.logallrefupdates=true</span><br><span class="line">core.symlinks=false</span><br><span class="line">core.ignorecase=true</span><br><span class="line">gui.wmstate=normal</span><br><span class="line">gui.geometry=841x483+343+178 189 218</span><br></pre></td></tr></table></figure></p><p>这里你只用关注的是这两行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user.name=xxx</span><br><span class="line">user.email=xxx@xxx.com</span><br></pre></td></tr></table></figure></p><p>如果你没有这两行，那么你需要添加配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;your email&quot;</span><br></pre></td></tr></table></figure></p><p>和<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;your name&quot;</span><br></pre></td></tr></table></figure></p><p>将双引号中内容替换为你自己的coding用户名和邮箱，可以在coding个人设置中查看自己的用户名和邮箱。</p><p>然后我们给本地添加一个<code>SSH key</code>，这样的话每次部署就不用输密码。在git bash中输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your email&quot;</span><br></pre></td></tr></table></figure></p><p>成功会出现以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Creates a new ssh key, using the provided email as a label</span><br><span class="line"># Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]  // 推荐使用默认地址,如果使用非默认地址可能需要配置 .ssh/config</span><br></pre></td></tr></table></figure></p><p>然后一直回车，回车，回车，然后在 Coding.net 添加公钥<br>本地打开 id_rsa.pub 文件（一般在c盘用户文件夹下，进入你的用户文件夹，有一个<code>.ssh</code>文件，打开其中的<code>id_rsa.pub</code> ），复制其中全部内容，添加到Coding账户“SSH 公钥”页面 中，公钥名称可以随意起名字。<br>完成后点击“添加”，然后输入密码或动态码即可添加完成。<br><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20170807132102.png" alt="img"><br>这里要注意是账户的SSH公匙，而不是项目中的设置的部署公匙，切记。</p><p>现在验证一下是否添加SSH公匙成功，在git bash中输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure></p><p>如果成功，会出现以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Are you sure you want to continue connecting (yes/no)? yes </span><br><span class="line">Warning: Permanently added ‘git.coding.net,61.146.73.68’ (RSA) to the list of kn own hosts.</span><br><span class="line">Enter passphrase for key ‘/c/Users/xxx/.ssh/id_rsa’: Coding.net Tips : [ Hello xxx! You have connected to Coding.net by SSH successfully! ]</span><br></pre></td></tr></table></figure><p>现在就已经添加好了公匙，我们离博客部署到coding只差一步。</p><h2 id="step-4-部署博客到coding"><a href="#step-4-部署博客到coding" class="headerlink" title="step 4 部署博客到coding"></a>step 4 部署博客到coding</h2><p>首先打开<code>blog</code>文件夹下的<code>_config.yml</code>文件，这是我的配置，你需要修改的地方我都加了注释，别的不要动，还有就是要注意这里yml文件是用的yaml脚本语言，对语法要求很严格，每个<code>:</code>后面要加上空格，没空格会编译出错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br><span class="line"></span><br><span class="line"># Site</span><br><span class="line">title: Yanss&apos;s Blog #改为你自己的网站名</span><br><span class="line">subtitle:</span><br><span class="line">description: Winner Winner, Chicken Dinner #改为你自己的描述语句，随便写</span><br><span class="line">author: Yanss #改成你自己的名字</span><br><span class="line">language: </span><br><span class="line">timezone: Asia/Shanghai</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: https://yanss.top #url改成&quot;xxx.coding.me&quot;，xxx是你的仓库名，也是你的用户名</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"># Writing</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: false</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace:</span><br><span class="line">  </span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next #这里是主题名，你的先不要变，后面换主题再改</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:yanss/yanss.github.io.git #repo这里写你的仓库地址，下面告诉怎么找</span><br><span class="line">  branch: master #就一个分支就不用改，默认master</span><br><span class="line"></span><br><span class="line">#这个feed是添加RSS订阅用的，这里你没有暂时不用写</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line">  content: </span><br><span class="line"></span><br><span class="line">#这个search是站内搜索的，也是没有就不用写</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><p>打开coding网站上你刚才创建的仓库，点击代码，左下角选择<code>SSH方式访问仓库</code>，复制那个链接，把它填到你的<code>_config.yml</code>的<code>repo</code>那里。</p><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20170807130858.png" alt="img"></p><p>现在我们就可以开始部署博客了，记得部署之前最好清理一遍<code>public</code>文件夹,也就是这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>或者你也可以直接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>coding+hexo的博客部署操作就是这些了，有问题可以下方留言评论。</p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在coding.net上答应了好几个评论的朋友要写一篇教程，不多说，我们直接进入主题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://foreti.me/tags/Hexo/"/>
    
      <category term="Coding" scheme="https://foreti.me/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架各层关系</title>
    <link href="https://foreti.me/2017/07/20/ssm-framework/"/>
    <id>https://foreti.me/2017/07/20/ssm-framework/</id>
    <published>2017-07-20T14:10:33.000Z</published>
    <updated>2019-07-27T02:14:09.300Z</updated>
    
    <content type="html"><![CDATA[<p>SSM包含持久层Dao和Model，业务层Service和ServiceImpl，表现层Controller和View，本文讲述这些不同层的作用和关系。</p><a id="more"></a><hr><h2 id="持久层：Dao层（mapper）"><a href="#持久层：Dao层（mapper）" class="headerlink" title="持久层：Dao层（mapper）"></a>持久层：Dao层（mapper）</h2><blockquote><p>DAO层主要是做数据持久层的工作，负责与数据库进行联络的一些任务都封装在此</p></blockquote><ul><li>DAO层的设计首先是设计DAO的接口</li><li>然后在Spring的配置文件中定义此接口的实现类</li><li>然后就可在模块中调用此接口来进行数据业务的处理，而不用关心此接口的具体实现类是哪个类，显得结构非常清晰</li><li>DAO层的数据源配置，以及有关数据库连接的参数都在Spring的配置文件中进行配置</li></ul><h2 id="业务层：Service层"><a href="#业务层：Service层" class="headerlink" title="业务层：Service层"></a>业务层：Service层</h2><blockquote><p>Service层主要负责业务模块的逻辑应用设计</p></blockquote><ul><li>首先设计接口，再设计其实现的类</li><li>接着再在Spring的配置文件中配置其实现的关联。这样我们就可以在应用中调用Service接口来进行业务处理</li><li>Service层的业务实现，具体要调用到已定义的DAO层的接口</li><li>封装Service层的业务逻辑有利于通用的业务逻辑的独立性和重复利用性，程序显得非常简洁</li></ul><h2 id="表现层：Controller层（Handler）"><a href="#表现层：Controller层（Handler）" class="headerlink" title="表现层：Controller层（Handler）"></a>表现层：Controller层（Handler）</h2><blockquote><p>Controller层负责具体的业务模块流程的控制</p></blockquote><ul><li>在此层里面要调用Service层的接口来控制业务流程</li><li>控制的配置也同样是在Spring的配置文件里面进行，针对具体的业务流程，会有不同的控制器，我们具体的设计过程中可以将流程进行抽象归纳，设计出可以重复利用的子单元流程模块，这样不仅使程序结构变得清晰，也大大减少了代码量</li></ul><h2 id="View层"><a href="#View层" class="headerlink" title="View层"></a>View层</h2><ul><li>View层：此层与控制层结合比较紧密，需要二者结合起来协同工发。View层主要负责前台jsp页面的表示.</li></ul><h2 id="各层联系"><a href="#各层联系" class="headerlink" title="各层联系"></a>各层联系</h2><ul><li>DAO层，Service层这两个层次都可以单独开发，互相的耦合度很低，完全可以独立进行，这样的一种模式在开发大项目的过程中尤其有优势</li><li>Controller，View层因为耦合度比较高，因而要结合在一起开发，但是也可以看作一个整体独立于前两个层进行开发。这样，在层与层之前我们只需要知道接口的定义，调用接口即可完成所需要的逻辑单元应用，一切显得非常清晰简单</li><li>Service层是建立在DAO层之上的，建立了DAO层后才可以建立Service层，而Service层又是在Controller层之下的，因而Service层应该既调用DAO层的接口，又要提供接口给Controller层的类来进行调用，它刚好处于一个中间层的位置。每个模型都有一个Service接口，每个接口分别封装各自的业务处理方法</li></ul><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>view层：结合control层，显示前端页面</p><p>control层：业务模块流程控制，调用service层接口</p><p>service层：业务操作实现类，调用dao接口</p><p>dao层：数据业务处理，持久化操作</p><p>model层：pojo， or mapping，持久层</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[View]--&gt;B[Controller]</span><br><span class="line">B--&gt;C[Service]</span><br><span class="line">C--&gt;D[ServiceImpl]</span><br><span class="line">D--&gt;E[Dao]</span><br><span class="line">E--&gt;F[Mapping]</span><br></pre></td></tr></table></figure><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SSM包含持久层Dao和Model，业务层Service和ServiceImpl，表现层Controller和View，本文讲述这些不同层的作用和关系。&lt;/p&gt;
    
    </summary>
    
    
      <category term="springnvc" scheme="https://foreti.me/tags/springnvc/"/>
    
  </entry>
  
  <entry>
    <title>树和二叉树</title>
    <link href="https://foreti.me/2017/03/15/binary-tree/"/>
    <id>https://foreti.me/2017/03/15/binary-tree/</id>
    <published>2017-03-15T05:44:53.000Z</published>
    <updated>2019-07-27T02:14:09.285Z</updated>
    
    <content type="html"><![CDATA[<p>这里理一下数据结构中树和二叉树的知识。</p><a id="more"></a><hr><h2 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h2><blockquote><p>（递归）一棵树是一些节点的集合。这个集合可以是空集；若不是空集，则树由称作<strong>根</strong>的节点 r 以及 0 个或多个非空的（子）树 <strong>$T_1，T_2，···，T_k$</strong> 组成，这些子树中每一棵的根都被来自根 r 的一条有向<strong>边</strong>所连结。</p></blockquote><h2 id="树的实现"><a href="#树的实现" class="headerlink" title="树的实现"></a>树的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//树节点的声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    Object element;</span><br><span class="line">    TreeNode firstChild;</span><br><span class="line">    TreeNode netSibling;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将每个节点的所有儿子都放到树节点的链表中。</p><h2 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h2><ul><li>先序遍历</li><li>后序遍历</li><li>中序遍历</li></ul><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><blockquote><p>二叉树（binary tree）是一棵树，其中每个节点都不能有多于两个的儿子。</p></blockquote><p>二叉树平均深度为 $O(\sqrt{N})$，最大深度为 $N$。<br>二叉查找树的平均深度为 $O(log N)$。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二叉树节点类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryNode</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//Friendly data;accessible by other package toutines</span></span><br><span class="line">    Object element;<span class="comment">//The data in the node</span></span><br><span class="line">    BinaryNode left;<span class="comment">//Left child</span></span><br><span class="line">    BinaryNode right;<span class="comment">//right child</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找树ADT——二叉查找树"><a href="#查找树ADT——二叉查找树" class="headerlink" title="查找树ADT——二叉查找树"></a>查找树ADT——二叉查找树</h2><blockquote><p>使二叉树成为查找树的性质是，对于树中的每个节点 X ，它的左子树中所有项的值小于 X 中的项，而它的右子树中所有项的值大于 X 中的项。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BinaryNode类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryNode</span>&lt;<span class="title">AnyType</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//Constructors</span></span><br><span class="line">    BinaryNode(AnyType theElement)</span><br><span class="line">    &#123;<span class="keyword">this</span>(theElement, <span class="keyword">null</span>, <span class="keyword">null</span>);&#125;</span><br><span class="line"></span><br><span class="line">BinaryNode(AnyType theElement, BinaryNode&lt;AnyType&gt; lt, BinaryNode&lt;AnyType&gt; rt)</span><br><span class="line">&#123;element = theElement; left = lt; right = rt;&#125;</span><br><span class="line"></span><br><span class="line">AnyType element;<span class="comment">//The data in the node</span></span><br><span class="line">BinaryNode&lt;AnyType&gt; left;<span class="comment">//Left child</span></span><br><span class="line">BinaryNode&lt;AnyType&gt; right;<span class="comment">//Right child</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉查找树架构"><a href="#二叉查找树架构" class="headerlink" title="二叉查找树架构"></a>二叉查找树架构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二叉查找树架构</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span>&lt;<span class="title">AnyType</span> <span class="keyword">extends</span> <span class="title">comparable</span>&lt;? <span class="title">super</span> <span class="title">AnyType</span>&gt;&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryNode</span>&lt;<span class="title">AnyType</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">//Constructors</span></span><br><span class="line">    BinaryNode(AnyType theElement)</span><br><span class="line">    &#123;<span class="keyword">this</span>(theElement, <span class="keyword">null</span>, <span class="keyword">null</span>);&#125;</span><br><span class="line"></span><br><span class="line">BinaryNode(AnyType theElement, BinaryNode&lt;AnyType&gt; lt, BinaryNode&lt;AnyType&gt; rt)</span><br><span class="line">&#123;element = theElement; left = lt; right = rt;&#125;</span><br><span class="line"></span><br><span class="line">AnyType element;<span class="comment">//The data in the node</span></span><br><span class="line">BinaryNode&lt;AnyType&gt; left;<span class="comment">//Left child</span></span><br><span class="line">BinaryNode&lt;AnyType&gt; right;<span class="comment">//Right child</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> BinaryNode&lt;AnyType&gt; root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BinarySearchTree</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; root = <span class="keyword">null</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; root = <span class="keyword">null</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> root == <span class="keyword">null</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">( AnyType x )</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> contains( x, root ); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> AnyType <span class="title">findMin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> UnderflowException();</span><br><span class="line"><span class="keyword">return</span> findMin(root).element;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> AnyType <span class="title">finMax</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> UnderflowException();</span><br><span class="line"><span class="keyword">return</span> finMax(roow).element;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(AnyType x)</span></span></span><br><span class="line"><span class="function"></span>&#123; root = insert(x,root); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(AnyType x)</span></span></span><br><span class="line"><span class="function"></span>&#123; root = remove(x,root); &#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printTree</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty())</span><br><span class="line">System.out.println(<span class="string">"Empty tree"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">printTree(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(AnyType x, BinaryNode&lt;AnyType&gt; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (t == <span class="keyword">null</span>) </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">int</span> compareResult = x.compareTo(t.element);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(compareResult &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> contains(x, t.left);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(compareResult &gt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> contains(x, t.right);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">//Match</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> BinaryNode&lt;AnyType&gt; <span class="title">findMin</span><span class="params">(BinaryNode&lt;AnyType&gt; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t.left == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line"><span class="keyword">return</span> findMin(t.left);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> BinaryNode&lt;AnyType&gt; <span class="title">finMax</span><span class="params">(BinaryNode&lt;AnyType&gt; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">while</span>(t.right != <span class="keyword">null</span>)</span><br><span class="line">t = t.right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> BinaryNode&lt;AnyType&gt; <span class="title">insert</span><span class="params">(AnyType x, BinaryNode&lt;AnyType&gt; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> BinaryNode&lt;&gt;(x, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> compareResult = x.compareTo(t.element);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(compareResult &lt; <span class="number">0</span>)</span><br><span class="line">t.left = insert(x, t.left);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(compareResult &gt; <span class="number">0</span>)</span><br><span class="line">t.right = insert(x, t.right);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">;<span class="comment">//Duplicate; do nothing</span></span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> BinaryNode&lt;AnyType&gt; <span class="title">remove</span><span class="params">(AnyType x, BinaryNode&lt;AnyType&gt; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> t;<span class="comment">//Item not found; do nothing</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> compareResult = x.compareTo(t.element);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(compareResult &lt; <span class="number">0</span>)</span><br><span class="line">t.left = remove(x, t.left);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(compareResult &gt; <span class="number">0</span>)</span><br><span class="line">t.right = remove(x, t.right);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t.left != <span class="keyword">null</span> &amp;&amp; t.right != <span class="keyword">null</span>)<span class="comment">//Two children</span></span><br><span class="line">&#123;</span><br><span class="line">t.element = findMin(t.right).element;</span><br><span class="line">t.right = remove(t.element, t.right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t = (t.left != <span class="keyword">null</span>) ? t.left : t.right;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printTree</span><span class="params">(BinaryNode&lt;AnyType&gt; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">printTree(t.left);</span><br><span class="line">System.out.println(t.element);</span><br><span class="line">printTree(t.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="contains方法"><a href="#contains方法" class="headerlink" title="contains方法"></a>contains方法</h3><blockquote><p>如果树 $T$ 中含有项 $X$ 的节点，那么这个操作需要返回true，如果这样的节点不存在则返回false。树的结构使这种操作很简单。如果 $T$ 是空集，那么久返回false。否则，如果存储在 $T$ 处的项是 $X$ ，那么可以返回true。否则，我们对数 $T$ 的左子树或右子树进行一次递归调用，则依赖于 $X$ 与存储在 $T$ 中的项的关系。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Internal method to find an item in a subtree</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  x is item to search for.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  t the node that roots the subtree.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true if the item is found; false otherwise.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉查找树的contains操作</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(AnyType x, BinaryNode&lt;AnyType&gt; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (t == <span class="keyword">null</span>) </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">int</span> compareResult = x.compareTo(t.element);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(compareResult &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> contains(x, t.left);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(compareResult &gt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> contains(x, t.right);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">//Match</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归用while循环代替</span></span><br><span class="line">   <span class="keyword">while</span>(compareResult &lt;<span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">    t=t.left;</span><br><span class="line">    compareResult = x.compareTo(t.element);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>算法表达式的简明性是以速度的降低为代价的。</strong></p></blockquote><h3 id="findMin方法和findMax方法"><a href="#findMin方法和findMax方法" class="headerlink" title="findMin方法和findMax方法"></a>findMin方法和findMax方法</h3><blockquote><p>这两个方法分别返回树中包含最小元和最大元的节点的引用。为执行findMin，从根开始并且只要有左儿子就向左进行。 终止点就是最小的元素。findMax除分支朝向右儿子其余过程相同。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用递归编写findMin，用非递归编写findMax</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Internal method to find the smallest item in a subtree</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  t the node that roots the subtree.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> node containing the smallest item</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> BinaryNode&lt;AnyType&gt; <span class="title">findMin</span><span class="params">(BinaryNode&lt;AnyType&gt; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t.left == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line"><span class="keyword">return</span> findMin(t.left);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Internal method to find the largest item in a subtree</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  t the node that roots the subtree.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> node containing the largest item.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> BinaryNode&lt;AnyType&gt; <span class="title">finMax</span><span class="params">(BinaryNode&lt;AnyType&gt; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">while</span>(t.right != <span class="keyword">null</span>)</span><br><span class="line">t = t.right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="insert方法"><a href="#insert方法" class="headerlink" title="insert方法"></a>insert方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Internal method to insert into a subtree</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  x the item to insert</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  t the node that roots the subtree</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the new root of the subtree</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">private</span> BinaryNode&lt;AnyType&gt; <span class="title">insert</span><span class="params">(AnyType x, BinaryNode&lt;AnyType&gt; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> BinaryNode&lt;&gt;(x, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> compareResult = x.compareTo(t.element);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(compareResult &lt; <span class="number">0</span>)</span><br><span class="line">t.left = insert(x, t.left);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(compareResult &gt; <span class="number">0</span>)</span><br><span class="line">t.right = insert(x, t.right);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">;<span class="comment">//Duplicate; do nothing</span></span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Internal method to remove from a subtree</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  x the item to remove.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  t the node that roots the subtree.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the new root of the subtree</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> BinaryNode&lt;AnyType&gt; <span class="title">remove</span><span class="params">(AnyType x, BinaryNode&lt;AnyType&gt; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> t;<span class="comment">//Item not found; do nothing</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> compareResult = x.compareTo(t.element);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(compareResult &lt; <span class="number">0</span>)</span><br><span class="line">t.left = remove(x, t.left);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(compareResult &gt; <span class="number">0</span>)</span><br><span class="line">t.right = remove(x, t.right);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t.left != <span class="keyword">null</span> &amp;&amp; t.right != <span class="keyword">null</span>)<span class="comment">//Node that has two children</span></span><br><span class="line">&#123;</span><br><span class="line">t.element = findMin(t.right).element;<span class="comment">//Find the minimum item of right subtree</span></span><br><span class="line">t.right = remove(t.element, t.right);<span class="comment">//Remove the node of minimum item recursively</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t = (t.left != <span class="keyword">null</span>) ? t.left : t.right;<span class="comment">//Node that has one children; parent of the node roots subtree of the node</span></span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>如果节点是树叶，可以直接删除。</li><li>如果节点有一个儿子，这该节点需要在其父节点调整自己的链以绕过该节点</li><li>如果节点有两个儿子，一般的删除策略是用其右子树的最小的数据代替该节点，并在右子树中递归地删除那个最小的节点</li></ul></blockquote><p>另外，如果删除的次数不多，通常使用的策略是懒惰删除（lazy deletion）：当一个元素要被删除时，它仍留在树中，而只是被标记为删除。</p><h2 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h2><blockquote><p>AVL树是<strong>带有平衡条件</strong>的二叉查找树。<br>这个平衡条件必须要容易保持，而且它保证树的深度须是 $O(log N)$ 。<br>一个AVL树是其每个节点的左子树和右子树的高度最多差 1 的二叉查找树（空树的高度定义为 -1）。</p></blockquote><p>可以知道，在高度为 $h$ 的AVL树中，最少节点数 $S(h)=S(h-1)+S(h-2)+1$ 给出。<br>对于 $h=0, S(h)=1; h=1, S(h)=2$ 。<br>函数 $S(h)$ 与斐波那契数密切相关。</p><p>那么重点来了，对于AVL树的插入操作，有可能破坏树的平衡性。这时候，我们就需要在这一步插入完成之前恢复平衡的性质。</p><p>可以知道，从插入的节点往上，逆行到根，若发生平衡信息改变，那么改变的节点一定在这条路径上。我们需要找出这个需要重新平衡的节点 $\alpha$ 。</p><p>对于节点 $\alpha$ ，不平衡条件可能出现在一下四种操作中：</p><ol><li>对 $\alpha$ 的左儿子的左子树进行一次插入（LL）。</li><li>对 $\alpha$ 的左儿子的右子树进行一次插入（LR）。</li><li>对 $\alpha$ 的右儿子的左子树进行一次插入（RL）。</li><li>对 $\alpha$ 的右儿子的右子树进行一次插入（RR）。</li></ol><p>对于1和4，是插入发生在外边的情况，通过对树的一次<strong>单旋转</strong>而完成调整。对于2和3，是插入发生在内部的情况，通过对树的一次<strong>双旋转</strong>而完成调整。</p><p>这里先对AvlNode类进行定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AvlNode</span>&lt;<span class="title">AnyType</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">//Constructors</span></span><br><span class="line">AvlNode(AnyType theElement)</span><br><span class="line">&#123;<span class="keyword">this</span>(theElement, <span class="keyword">null</span>, <span class="keyword">null</span>);&#125;</span><br><span class="line"></span><br><span class="line">AvlNode(AnyType theElement, AvlNode&lt;AnyType&gt; lt, AvlNode&lt;AnyType&gt; rt)</span><br><span class="line">&#123;element = theElement; left = lt; right = rt; height = <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">AnyType element;<span class="comment">//The data in the code</span></span><br><span class="line">AvlNode&lt;AnyType&gt; left;<span class="comment">//Left child</span></span><br><span class="line">AvlNode&lt;AnyType&gt; right;<span class="comment">//Right child</span></span><br><span class="line"><span class="keyword">int</span> height;<span class="comment">//Height</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后需要一个返回节点高度的方法：</p><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回AVL树的节点高度</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * return the height of node t, or -1, if null.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">(AvlNode&lt;AnyType&gt; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> t == <span class="keyword">null</span> ? -<span class="number">1</span> : t.height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单旋转"><a href="#单旋转" class="headerlink" title="单旋转"></a>单旋转</h3><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190429221300.png" alt="LL单旋转"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Rotate binary tree node with left child.</span></span><br><span class="line"><span class="comment"> * For AVL trees, this is a single rotation for case 1.</span></span><br><span class="line"><span class="comment"> * Update heights, then return new root.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> AvlNode&lt;AnyType&gt; <span class="title">RotationWithLeftChild</span><span class="params">(AvlNode&lt;AnyType&gt; k2)</span> </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    AVLTreeNode&lt;AnyType&gt; k1 = k2.left;  </span><br><span class="line">  </span><br><span class="line">    k2.left = k1.right;  </span><br><span class="line">    k1.right = k2;  </span><br><span class="line">  </span><br><span class="line">    k2.height = Math.max( height(k2.left), height(k2.right)) + <span class="number">1</span>;  </span><br><span class="line">    k1.height = Math.max( height(k1.left), k2.height) + <span class="number">1</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> k1;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190429221627.png" alt="RR单旋转"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Rotate binary tree node with right child.</span></span><br><span class="line"><span class="comment"> * For AVL trees, this is a single rotation for case 4.</span></span><br><span class="line"><span class="comment"> * Update heights, then return new root.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> AvlNode&lt;AnyType&gt; <span class="title">RotationWithRightChild</span><span class="params">(AvlNode&lt;AnyType&gt; k1)</span> </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    AVLTreeNode&lt;AnyType&gt; k2 = k1.right;  </span><br><span class="line">  </span><br><span class="line">  k1.right = k2.left;  </span><br><span class="line">   k2.left = k1;  </span><br><span class="line">   </span><br><span class="line">   k1.height = Math.max( height(k1.left), height(k1.right)) + <span class="number">1</span>;  </span><br><span class="line">    k1.height = Math.max( height(k2.right), k1.height) + <span class="number">1</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> k2;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双旋转"><a href="#双旋转" class="headerlink" title="双旋转"></a>双旋转</h3><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190429221709.png" alt="LR双旋转"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Double rotate binary tree node: first left child</span></span><br><span class="line"><span class="comment"> * with its right child; then node k3 with new left child.</span></span><br><span class="line"><span class="comment"> * For AVL trees, this is a double rotation for case 2.</span></span><br><span class="line"><span class="comment"> * Update heights, then return new root.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> AvlNode&lt;AnyType&gt; <span class="title">doubleWithLeftChild</span><span class="params">(AvlNode&lt;AnyType&gt; k3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">k3.left = RotationWithRightChild(k3.left);</span><br><span class="line"><span class="keyword">return</span> RotationWithLeftChild(k3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/fakeYanss/imgplace/master/2019/20190429221732.png" alt="RL双旋转"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Double rotate binary tree node: first right child</span></span><br><span class="line"><span class="comment"> * with its left child; then node k1 with new right child.</span></span><br><span class="line"><span class="comment"> * For AVL trees, this is a double rotation for case 3.</span></span><br><span class="line"><span class="comment"> * Update heights, then return new root.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> AvlNode&lt;AnyType&gt; <span class="title">doubleWithRightChild</span><span class="params">(AvlNode&lt;AnyType&gt; k1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">k1.right = RotationWithRightChild(k1.right);</span><br><span class="line"><span class="keyword">return</span> RotationWithLeftChild(k1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AVL树的插入方法"><a href="#AVL树的插入方法" class="headerlink" title="AVL树的插入方法"></a>AVL树的插入方法</h3><blockquote><p>插入方法就是前文中的insert方法，只是在最后一行调用平衡的方法以保持AVL树的平衡性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Internal method to insert into a subtree.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  x the item to insert.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  t the node that roots the subtree.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the new root of the subtree.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> AvlNode&lt;AnyType&gt; <span class="title">insert</span><span class="params">(AnyType x, AvlNode&lt;AnyType&gt; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span>AvlNode&lt;&gt;(x, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> compareResult = x.compareTo(t.element);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(compareResult &lt; <span class="number">0</span>)</span><br><span class="line">t.left = insert(x, t.left);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(compareResult &gt; <span class="number">0</span>)</span><br><span class="line">t.right = insert(x, t.right);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">;<span class="comment">//Duplicate; do nothing</span></span><br><span class="line"><span class="keyword">return</span> balance(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ALLOWED_IMBALLANCE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Assume t is either balanced of within one of being balanced</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> AvlNode&lt;AnyType&gt; <span class="title">balance</span><span class="params">(AvlNode&lt;AnyType&gt; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(height(t.left) - height(t.right) &gt; ALLOWED_IMBALLANCE)</span><br><span class="line"><span class="keyword">if</span>(height(t.left.left) &gt;= height(t.left.right))</span><br><span class="line">t = RotationWithLeftChild(t);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t = doubleWithLeftChild(t);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span>(height(t.right) - height(t.left) &gt; ALLOWED_IMBALLANCE)</span><br><span class="line"><span class="keyword">if</span>(height(t.right.right) &gt;= height(t.right.left))</span><br><span class="line">t = RotationWithRightChild(t);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t = doubleWithRightChild(t);</span><br><span class="line"></span><br><span class="line">t.height = Math.max(height(t.left), height(t.right)) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="AVL树的删除方法"><a href="#AVL树的删除方法" class="headerlink" title="AVL树的删除方法"></a>AVL树的删除方法</h3><blockquote><p>和AVL树的插入一样，只用在前文的删除方法最后加上一行调用平衡的方法即可。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">private AvlNode&lt;AnyType&gt; remove(AnyType x, AvlNode&lt;AnyType&gt; t)</span><br><span class="line">&#123;</span><br><span class="line">if(t == null)</span><br><span class="line">return t;//Item not found; do nothing</span><br><span class="line"></span><br><span class="line">int compareResult = x.compareTo(t.element);</span><br><span class="line"></span><br><span class="line">if(compareResult &lt; 0)</span><br><span class="line">t.left = remove(x, t.left);</span><br><span class="line">else if(compareResult &gt; 0)</span><br><span class="line">t.right = remove(x, t.right);</span><br><span class="line">else if(t.left != null &amp;&amp; t.right != null)//Node that has two children</span><br><span class="line">&#123;</span><br><span class="line">t.element = findMin(t.right).element;//Find the minimum item of right subtree</span><br><span class="line">t.right = remove(t.element, t.right);//Remove the node of minimum item recursively</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">t = (t.left != null) ? t.left : t.right;//Node that has one children; parent of the node roots subtree of the node</span><br><span class="line">return balance(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里理一下数据结构中树和二叉树的知识。&lt;/p&gt;
    
    </summary>
    
    
      <category term="binary tree" scheme="https://foreti.me/tags/binary-tree/"/>
    
  </entry>
  
  <entry>
    <title>波比</title>
    <link href="https://foreti.me/2013/04/07/lol-poppy/"/>
    <id>https://foreti.me/2013/04/07/lol-poppy/</id>
    <published>2013-04-07T16:00:00.000Z</published>
    <updated>2019-07-27T02:14:09.300Z</updated>
    
    <content type="html"><![CDATA[<p>当年波比冷门又厉害，拿着小锤子打遍上单无敌手</p><a id="more"></a><hr><p><br><br>打铁匠挥舞着臂膀<br>汗水流入“铛”“铛”的敲击中<br>两个辫子甩在山谷<br>在花海里荡起波浪<br>永远童稚的笑颜永远在开放<br><br><br>那棵小树 高过你的头顶<br>那树梢上的风铃 终于不再响<br>那片儿时的花 那缕儿时的风<br>躲到了哪里<br><br><br>脱下一身盔甲<br>有多讨厌战争<br>多想再叫一声 爸爸<br>爸爸 我的超级无敌七彩大棒棒糖呢</p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当年波比冷门又厉害，拿着小锤子打遍上单无敌手&lt;/p&gt;
    
    </summary>
    
    
      <category term="fragment" scheme="https://foreti.me/tags/fragment/"/>
    
  </entry>
  
  <entry>
    <title>为生命狂欢</title>
    <link href="https://foreti.me/2013/03/20/be-crazy-for-life/"/>
    <id>https://foreti.me/2013/03/20/be-crazy-for-life/</id>
    <published>2013-03-20T16:00:00.000Z</published>
    <updated>2019-07-27T02:14:09.285Z</updated>
    
    <content type="html"><![CDATA[<p>记再游樱园</p><a id="more"></a><hr><p>时隔四年，又在这个季节，来到武大樱园，来到四年前的记忆里。</p><p>珞珈山的一草一木渐渐和印象重叠，一切似乎没有变化，只是昔日旧友散落四方，已不再与我同行，同游三月的樱花大道。</p><p>走的是不同的路线，最后都到了樱园天台，到了那个俯瞰樱花大道的视角，那一行樱花树绰绰而立，只是还未到将落未落之时，还不是最好的赏樱时候，还看不到纷纷樱如雪。</p><p>风筝会不小心挂到树上，我对樱花的记忆也不小心遗留在四年前的樱园里，遗留在一个女孩的诗里:粉色的八重樱……我记不得了。</p><p>多少个四年后，会不会重游樱园，携旧友，带上四叶草，讨一片樱花糕，只让你我此生唯一自传，同诗一般。</p><p>我想睡觉了。</p><hr><p>谨以此文纪念我永眠的朋友。</p><p>那是09年我第一次去武大樱园，同几个伙伴一起，是他带路。</p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记再游樱园&lt;/p&gt;
    
    </summary>
    
    
      <category term="fragment" scheme="https://foreti.me/tags/fragment/"/>
    
  </entry>
  
  <entry>
    <title>未完的歌</title>
    <link href="https://foreti.me/2013/02/06/i-am-18-now/"/>
    <id>https://foreti.me/2013/02/06/i-am-18-now/</id>
    <published>2013-02-06T16:00:00.000Z</published>
    <updated>2019-07-27T02:14:09.300Z</updated>
    
    <content type="html"><![CDATA[<p> 这一天，我18岁了。</p><a id="more"></a><hr><p>有时候深夜了，仍然难以入睡。 该想些什么呢，“任时间流驶”，很喜欢这半句话，原因是它实在有足够洒脱，或者说我能够借它表现出洒脱。比如说“任时间流驶，我依然想你爱你”；又或者“任时间流驶，我们总是英俊潇洒，貌美如花”；又或者“任时间流驶，岁月老去，我们还是在一起开黑lol抢一血”，嗯这句最有感觉了对吧….</p><p>时间流驶，我都快19了</p><p>有多少幼稚的梦还未曾忘？有多少遗憾仍无法释怀？  又是谁舞时光如剑，斩断了我生命里的部分，从此再无往来？</p><p>整个高中阶段，我总是在想从前的那些事那些人，并没有经历过什么，依然迷迷糊糊的过了两三年。做过很多梦，一直记得在课间小憩恍恍惚惚的梦到一个蓝色裙子的女孩坐我身边，熟悉而模糊的脸，那是未来的她么，我无法知道。有的梦像一个故事，有时候我会被代入到一个角色，有时候则是上帝之眼。还有许多奇奇怪怪的梦 ，古古道道的人，在我的生命里，从未出现过得事物。也许是小说看多了有了痴妄，我并不觉得看小说有什么不好，很大程度上它弥补了我这一代人的想象力缺失，哪怕只是别人的想象力，多多少少也能吸收一些。</p><p>生活真的是一个很无奈的事情，我真的是一座孤岛吗，有没有水，有没有河流，或者湖泊江海来把我淹没，有没有和我一样的孤岛在我周围，孤独的意义是什么，水能填满我们之间的距离吗，我们真的在交流，还是在各自扯淡，观一片落叶就能知秋吗？ 一座一座小岛都开始从地底拔出，愈来愈高，伸出水面，以礁石抵挡四周的水。</p><p>黑夜是上帝的光辉遗漏的地方，那里是奇思妙想的发源地，夜里才有灵感迸发，那样的安静，偶有一点汽车行驶的声响，几柱路灯昏黄的光晕平射在地面，这种静，发自内心，发自灵魂，思维的流淌没有一点点阻碍，这是我最喜欢的时候。</p><p>我不知道这样好不好，但我的确是被影响到了，刚竖立的坚定又有动摇，或许我应该有最大的信心和最自然的心态，怡然不惧一切，强大的内心就是强大的实力，就是孤岛也罢，坚硬抵抗一切侵蚀。</p><p><br></p><hr><p id="div-border-left-red"><i>DigitalOcean 优惠码，注册充值 $5 送 $100，<a href="https://m.do.co/c/282d5e1cf06e" target="_blank" rel="noopener">链接一</a> <a href="https://m.do.co/c/5eefb87c26cd" target="_blank" rel="noopener">链接二</a></i></p><br><p id="div-border-left-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 这一天，我18岁了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="fragment" scheme="https://foreti.me/tags/fragment/"/>
    
  </entry>
  
</feed>
