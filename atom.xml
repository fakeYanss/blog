<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yet Another Possibility</title>
  <icon>https://www.gravatar.com/avatar/02af3036e86cee458f48e977dc781ee4</icon>
  <subtitle>有约如铁</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://foreti.me/"/>
  <updated>2019-03-23T02:48:17.687Z</updated>
  <id>https://foreti.me/</id>
  
  <author>
    <name>fakeyanss</name>
    <email>yanshisangc@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你应该知道的10个Git命令</title>
    <link href="https://foreti.me/2019/03/17/10-git-command-you-should-know/"/>
    <id>https://foreti.me/2019/03/17/10-git-command-you-should-know/</id>
    <published>2019-03-17T13:48:24.000Z</published>
    <updated>2019-03-23T02:48:17.687Z</updated>
    
    <content type="html"><![CDATA[<p>201902W11 Review, <a href="https://towardsdatascience.com/10-git-commands-you-should-know-df54bea1595c" target="_blank" rel="noopener">10 Git Commands You Should Know</a><br><a id="more"></a></p><p><br></p><p id="div-border-top-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;201902W11 Review, &lt;a href=&quot;https://towardsdatascience.com/10-git-commands-you-should-know-df54bea1595c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;10 Git Commands You Should Know&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://foreti.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Spring @RequestMapping详解</title>
    <link href="https://foreti.me/2019/03/01/spring-requestmapping/"/>
    <id>https://foreti.me/2019/03/01/spring-requestmapping/</id>
    <published>2019-03-01T16:00:00.000Z</published>
    <updated>2019-03-23T02:48:17.703Z</updated>
    
    <content type="html"><![CDATA[<p>201902W9 Review, 一篇关于Spring RequestMapping的译文<br><a id="more"></a></p><h1 id="Spring-RequestMapping"><a href="#Spring-RequestMapping" class="headerlink" title="Spring RequestMapping"></a>Spring RequestMapping</h1><p><a href="https://www.baeldung.com/spring-requestmapping" target="_blank" rel="noopener">原文</a><br>by <a href="https://www.baeldung.com/author/eugen/" target="_blank" rel="noopener">Eugen Paraschiv</a></p><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>在这篇文章中，我们将关注于这个Spring MVC中常用的注释 - <em>@RequestMapping</em>。</p><p>简单地说，这个注释用于将网络请求映射到Spring Controller的方法。</p><h2 id="2-RequestMapping基础"><a href="#2-RequestMapping基础" class="headerlink" title="2. @RequestMapping基础"></a>2. <em>@RequestMapping</em>基础</h2><p>让我们从一个简单的例子开始 - 按照一些基本的标准将一个HTTP请求映射到一个方法。</p><h3 id="2-1-RequestMapping-按路径"><a href="#2-1-RequestMapping-按路径" class="headerlink" title="2.1. @RequestMapping - 按路径"></a>2.1. <em>@RequestMapping</em> - 按路径</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/ex/foos"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFoosBySimplePath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get some Foos"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要使用简单的<em>curl</em>命令测试此映射，请运行：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i http://localhost:8080/spring-rest/ex/foos</span><br></pre></td></tr></table></figure></p><h3 id="2-2-RequestMapping-HTTP方法"><a href="#2-2-RequestMapping-HTTP方法" class="headerlink" title="2.2. @RequestMapping - HTTP方法"></a>2.2. <em>@RequestMapping</em> - HTTP方法</h3><p>HTTP方法参数没有默认值 - 因此，如果我们不指定值，它将映射到任何HTTP请求。</p><p>这是一个简单的示例，类似于前一个示例 - 但这次映射到一个HTTP POST请求：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/ex/foos"</span>, method = POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">postFoos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Post some Foos"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>要通过<em>curl</em>命令测试POST ：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X POST http://localhost:8080/spring-rest/ex/foos</span><br></pre></td></tr></table></figure></p><h2 id="3-RequestMapping-和-HTTP-Headers"><a href="#3-RequestMapping-和-HTTP-Headers" class="headerlink" title="3. RequestMapping 和 HTTP Headers"></a>3. RequestMapping 和 HTTP Headers</h2><h3 id="3-1-带有headers-Attribute的-RequestMapping"><a href="#3-1-带有headers-Attribute的-RequestMapping" class="headerlink" title="3.1. 带有headers Attribute的@RequestMapping"></a>3.1. 带有headers Attribute的<em>@RequestMapping</em></h3><p>给请求指定一个header，可以进一步限制映射范围。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/ex/foos"</span>, headers = <span class="string">"key=val"</span>, method = GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFoosWithHeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get some Foos with Header"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了测试运行，我们将使用<em>curl</em>的header参数<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -H <span class="string">"key:val"</span> http://localhost:8080/spring-rest/ex/foos</span><br></pre></td></tr></table></figure></p><p>更进一步，通过 <em>@RequestMapping</em>的 <em>header</em>属性实现多个header<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(</span><br><span class="line">  value = <span class="string">"/ex/foos"</span>, </span><br><span class="line">  headers = &#123; <span class="string">"key1=val1"</span>, <span class="string">"key2=val2"</span> &#125;, method = GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFoosWithHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get some Foos with Header"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以通过命令测试这个方法<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -H <span class="string">"key1:val1"</span> -H <span class="string">"key2:val2"</span> http://localhost:8080/spring-rest/ex/foos</span><br></pre></td></tr></table></figure></p><p>注意，对于<em>curl</em>语法，用冒号分离header的键和值，与HTTP中的规范相同，而在Spring中是用等号。</p><h3 id="3-2-RequestMapping-消费和生产"><a href="#3-2-RequestMapping-消费和生产" class="headerlink" title="3.2. @RequestMapping 消费和生产"></a>3.2. <em>@RequestMapping</em> 消费和生产</h3><p>映射<strong>由Controller产生的媒体类型</strong>的方法特别值得注意 - 我们可以通过上面介绍的 <em>@RequestMapping</em> 的headers属性，基于<em>Accept</em> header映射请求。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(</span><br><span class="line">  value = <span class="string">"/ex/foos"</span>, </span><br><span class="line">  method = GET, </span><br><span class="line">  headers = <span class="string">"Accept=application/json"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFoosAsJsonFromBrowser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get some Foos with Header Old"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>匹配这种定义<em>Accept</em> header的方法是灵活的 - 是用包含而不是等于，所以一个下面这样的请求也能正确地匹配。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Accept:application/json,text/html"</span> http://localhost:8080/spring-rest/ex/foos</span><br></pre></td></tr></table></figure></p><p>从Spring 3.1开始， <strong><em>@RequestMapping</em>注释具有produces和consumes属性</strong>，特别是为了这种：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(</span><br><span class="line">  value = <span class="string">"/ex/foos"</span>, </span><br><span class="line">  method = RequestMethod.GET, </span><br><span class="line">  produces = <span class="string">"application/json"</span></span><br><span class="line">)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFoosAsJsonFromREST</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get some Foos with Header New"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此外，带有<em>headers</em>属性的旧类型的映射将自动转换成Spring 3.1开始的新<em>produces</em>机制，所以结果是相同的。</p><p>同样的方式，通过<em>curl</em>进行consume：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Accept:application/json"</span> http://localhost:8080/spring-rest/ex/foos</span><br></pre></td></tr></table></figure></p><p>另外，<em>produces</em>也支持多值：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(</span><br><span class="line">  value = <span class="string">"/ex/foos"</span>, </span><br><span class="line">  method = GET,</span><br><span class="line">  produces = &#123; <span class="string">"application/json"</span>, <span class="string">"application/xml"</span> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>记住这些 - 指定<em>accept</em> header的旧的方法和新的方法 - 基本上是相同的映射，所以Spring不允许它们一起使用 - 一起用将会导致：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalStateException: Ambiguous mapping found. </span><br><span class="line">Cannot map <span class="string">'fooController'</span> bean method </span><br><span class="line">java.lang.String </span><br><span class="line">org.baeldung.spring.web.controller</span><br><span class="line">  .FooController.getFoosAsJsonFromREST()</span><br><span class="line">to </span><br><span class="line">&#123; [/ex/foos],</span><br><span class="line">  methods=[GET],params=[],headers=[],</span><br><span class="line">  consumes=[],produces=[application/json],custom=[]</span><br><span class="line">&#125;: </span><br><span class="line">There is already <span class="string">'fooController'</span> bean method</span><br><span class="line">java.lang.String </span><br><span class="line">org.baeldung.spring.web.controller</span><br><span class="line">  .FooController.getFoosAsJsonFromBrowser() </span><br><span class="line">mapped.</span><br></pre></td></tr></table></figure></p><p>关于新的<em>produces</em>和<em>consumes</em>机制的最后一点 - 与其他注释表现不同的是 - 当指定类型级别时，方法级别的注释不会补充而会覆盖类型级别的信息。</p><p>这句没理解，原文</p><blockquote><p>when specified at the type level, <strong>the method level annotations do not complement but override</strong> the type level information.</p></blockquote><p>当然，如果你想深入了解用Spring构建REST API - 请看<a href="https://www.baeldung.com/rest-with-spring-course?utm_source=blog&amp;utm_medium=web&amp;utm_content=art1&amp;utm_campaign=rws" target="_blank" rel="noopener">the new REST with Spring course</a>。</p><h2 id="4-RequestMapping使用路径变量"><a href="#4-RequestMapping使用路径变量" class="headerlink" title="4. RequestMapping使用路径变量"></a>4. <em>RequestMapping</em>使用路径变量</h2><p>映射URI的一部分可以通过 <em>@PathVariable</em>注解绑定到变量。</p><h3 id="4-1-单个-PathVariable"><a href="#4-1-单个-PathVariable" class="headerlink" title="4.1 单个 @PathVariable"></a>4.1 单个 <em>@PathVariable</em></h3><p>一个简单的单路径变量例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/ex/foos/&#123;id&#125;"</span>, method = GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFoosBySimplePathWithPathVariable</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  @PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get a specific Foo with id="</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以用<em>curl</em>测试：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:8080/spring-rest/ex/foos/1</span><br></pre></td></tr></table></figure></p><p>如果方法的参数名和路径名相同，可以只用 <em>@PathVariable</em> 而不附加值：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/ex/foos/&#123;id&#125;"</span>, method = GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFoosBySimplePathWithPathVariable</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  @PathVariable String id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get a specific Foo with id="</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意 <em>@PathVariable</em> 受利于自动类型转换，所以我们也可以修饰id为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PathVariable</span> <span class="keyword">long</span> id</span><br></pre></td></tr></table></figure></p><h3 id="4-2-多个-PathVariable"><a href="#4-2-多个-PathVariable" class="headerlink" title="4.2 多个 @PathVariable"></a>4.2 多个 <em>@PathVariable</em></h3><p>更复杂的URI可能需要映射URI的多个部分到多个值：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/ex/foos/&#123;fooid&#125;/bar/&#123;barid&#125;"</span>, method = GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String getFoosBySimplePathWithPathVariables</span><br><span class="line">  (<span class="meta">@PathVariable</span> <span class="keyword">long</span> fooid, <span class="meta">@PathVariable</span> <span class="keyword">long</span> barid) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get a specific Bar with id="</span> + barid + </span><br><span class="line">      <span class="string">" from a Foo with id="</span> + fooid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同样这可以用<em>curl</em>容易的测试：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:8080/spring-rest/ex/foos/1/bar/2</span><br></pre></td></tr></table></figure></p><h3 id="4-3-带正则表达式的-PathVariable"><a href="#4-3-带正则表达式的-PathVariable" class="headerlink" title="4.3 带正则表达式的 @PathVariable"></a>4.3 带正则表达式的 <em>@PathVariable</em></h3><p>正则表达式也能用来映射 <em>@PathVariable</em>；举个例子，我们可以限制映射id只接受数字类型的值：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/ex/bars/&#123;numericId:[\\d]+&#125;"</span>, method = GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBarsBySimplePathWithPathVariable</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  @PathVariable <span class="keyword">long</span> numericId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get a specific Bar with id="</span> + numericId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这将意味着下面的URI可以适配：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/spring-rest/ex/bars/1</span><br></pre></td></tr></table></figure></p><p>但这个不能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/spring-rest/ex/bars/abc</span><br></pre></td></tr></table></figure></p><h2 id="5-RequestMapping使用Request-Parameters"><a href="#5-RequestMapping使用Request-Parameters" class="headerlink" title="5. RequestMapping使用Request Parameters"></a>5. <em>RequestMapping</em>使用Request Parameters</h2><p>@RequestMapping允许方便的使用 <em>@RequestParam</em>注解映射URL参数。</p><p>我们现在映射一个这样的URI请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/spring-rest/ex/bars?id=100</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/ex/bars"</span>, method = GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBarBySimplePathWithRequestParam</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  @RequestParam(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get a specific Bar with id="</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们接着在controller方法中使用 <em>@RequestParam(“id”)</em> 注解取出<em>id</em>参数的值。</p><p>要发送带<em>id</em>参数的请求，我们在<em>curl</em>中使用参数支持：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -d id=100 http://localhost:8080/spring-rest/ex/bars</span><br></pre></td></tr></table></figure></p><p>在这个例子中，参数直接绑定而不先声明。</p><p>对于更进一步的场景， <em>@RequestMapping</em>有可选的参数定义 - 作为又一个限制请求映射的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/ex/bars"</span>, params = <span class="string">"id"</span>, method = GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBarBySimplePathWithExplicitRequestParam</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  @RequestParam(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Get a specific Bar with id="</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>甚至可以更灵活的映射 - 可以设置多个<em>params</em>值，并且不是所有都使用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(</span><br><span class="line">  value = <span class="string">"/ex/bars"</span>, </span><br><span class="line">  params = &#123; <span class="string">"id"</span>, <span class="string">"second"</span> &#125;, </span><br><span class="line">  method = GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBarBySimplePathWithExplicitRequestParams</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  @RequestParam(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Narrow Get a specific Bar with id="</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当然，一个像这样的请求URI：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/spring-rest/ex/bars?id=100&amp;second=something</span><br></pre></td></tr></table></figure></p><p>将总会被映射到最好的适配 - 更进一步的适配，同时定义<em>id</em>和<em>second</em>参数。</p><h2 id="6-RequestMapping-Corner-Cases"><a href="#6-RequestMapping-Corner-Cases" class="headerlink" title="6. RequestMapping Corner Cases"></a>6. <em>RequestMapping</em> Corner Cases</h2><h3 id="6-1-RequestMapping-–-多个路径映射到同一Controller方法"><a href="#6-1-RequestMapping-–-多个路径映射到同一Controller方法" class="headerlink" title="6.1. @RequestMapping – 多个路径映射到同一Controller方法"></a>6.1. <em>@RequestMapping</em> – 多个路径映射到同一Controller方法</h3><p>虽然一个单个 <em>@RequestMapping</em>路径值通常用于单个controller方法， 但这只是一种好的用法，而不是强制规则 - 有一些情况下，多个请求到同一方法的可能是必要的。在那种情况下， <strong>@RequestMapping的value属性接收多个映射</strong>，而不是一个映射：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(</span><br><span class="line">  value = &#123; <span class="string">"/ex/advanced/bars"</span>, <span class="string">"/ex/advanced/foos"</span> &#125;, </span><br><span class="line">  method = GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFoosOrBarsByPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Advanced - Get some Foos or Bars"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在，这两个<em>curl</em>命令应该使用相同的方法：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -i http://localhost:8080/spring-rest/ex/advanced/foos</span><br><span class="line">curl -i http://localhost:8080/spring-rest/ex/advanced/bars</span><br></pre></td></tr></table></figure></p><p><br></p><p id="div-border-top-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;201902W9 Review, 一篇关于Spring RequestMapping的译文&lt;br&gt;
    
    </summary>
    
    
      <category term="ARTS" scheme="https://foreti.me/tags/ARTS/"/>
    
      <category term="Spring" scheme="https://foreti.me/tags/Spring/"/>
    
      <category term="RequestMapping" scheme="https://foreti.me/tags/RequestMapping/"/>
    
  </entry>
  
  <entry>
    <title>我的steam账号被盗经历</title>
    <link href="https://foreti.me/2019/02/28/steam-account-stolen/"/>
    <id>https://foreti.me/2019/02/28/steam-account-stolen/</id>
    <published>2019-02-28T16:06:37.000Z</published>
    <updated>2019-03-23T02:48:17.703Z</updated>
    
    <content type="html"><![CDATA[<p>来自一个程序员的心理自陈。<br><a id="more"></a></p><p><img src="http://pic.yanss.top/Steam-to-restrict-chat-from-users-who-dont-have-mutual-servers-or-a-chat-history-Featured-Image.png" alt="Steam-to-restrict-chat-from-users-who-dont-have-mutual-servers-or-a-chat-history-Featured-Image"></p><p>最近在玩LOL的无限火力，毕竟不停敲击技能键让人无穷无尽的爽快感。然而就在那天晚上LOL的服务器更新，我只好玩了几把Apex，这是前些天火起来的游戏，守望+堡垒，都是我不擅长的类型。玩吃鸡类型的游戏还是叫朋友一起才有趣。我自己的游戏机上习惯是steam开机启动的，打完几把没意思切了出来，突然收到steam聊天消息提醒，这让我有些意外和惊喜。惊喜的是，好久没有朋友在steam中与我发聊天消息，以往在一起玩PUBG的时光恍如昨日浮现在眼前。</p><p>随后我点开了聊天窗口，是一个陌生人的好友邀请。这是谁呢，陌生的头像，我同意了。嗯，这个人不在线上。</p><p>没管他是谁，我继续了下一把Apex，依然没有吃鸡，该结束今日的战斗了，我想。</p><p>咦，这个人又给我发了消息，嗯，我忘了截图，大致这个意思：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hey，bro，恭喜你。</span><br><span class="line">我获得了一个cs go的枪械皮肤，我分享给你了，你也可以领一个。</span><br><span class="line">这个是领取链接http://xxxxxxxxx</span><br><span class="line"></span><br><span class="line">这个是我领取的皮肤http://xxxxxxxxx</span><br></pre></td></tr></table></figure></p><p>领皮肤啊，虽然我不玩cs go，但是我可以领了卖出去吗嘛，打开看看。</p><p>嗯，都是些什么枪，也不知道值不值钱，算了捡垃圾吧，嗯，sign in with steam。</p><p>弹出了一个小窗，嗯，域名<code>steamcommunity.com/xxxxx</code>，没错，是steam的。</p><p>我输入了账号，咦，我的lastpass怎么不提示填充密码，可能网不好吧。嗯，输入密码，登录，还要手机令牌，没错了。</p><p>哎，我输了手机令牌怎么不对，换一个，还不对，怎么回事。</p><p>1分钟后，<br>叮~<br>叮~<br>“你的steam账号已被移除绑定手机号”<br>“你的steam账号已被移除绑定邮箱”<br>“你的steam账号已被移除手机令牌”<br><img src="http://pic.yanss.top/Snipaste_2019-02-26_22-54-30.jpg" alt="Snipaste_2019-02-26_22-54-30"></p><p>我草你麻痹！！！我号被盗了！！！我他吗傻狗！！！</p><p>这个steamcommuty弹窗是假的，钓鱼！！！难怪我的lastpass不提示密码！！！</p><p>我他吗想起来了，这个steamcommunity可能是俄文西里尔文之类的其他西文字母，不是英文字母啊我曹！！！（可以看一篇<a href="https://www.leiphone.com/news/201704/NyHGnviIh1lMKUCX.html" target="_blank" rel="noopener">介绍文章</a>）</p><p>以后不要只看域名识别官网！！！</p><p>妈耶赶紧申请恢复啊我曹，盗号的效率怎么这么高，我没任何提示怎么移除了我的手机号和邮箱，还改了我的密码！！！</p><p>算了，先申诉恢复账号吧。</p><p><img src="http://pic.yanss.top/Snipaste_2019-02-26_22-53-50.jpg" alt="Snipaste_2019-02-26_22-53-50"></p><p>想起来假装外国人，客服的服务效率可能高一下，乱扯了一通英文，第二天催了一下。</p><p>嗯，有回复了，谢谢客服小姐姐。</p><p><img src="http://pic.yanss.top/Snipaste_2019-02-26_22-54-30.jpg" alt="Snipaste_2019-02-26_22-54-30"></p><p>这事还没完，我的steam邮箱和账号，和很多网站的账号密码都一样，只好花时间改了lastpass里的所有账号的密码。</p><p>lastpass是个好东西，可惜我错过了它的提示。</p><p><br></p><p id="div-border-top-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自一个程序员的心理自陈。&lt;br&gt;
    
    </summary>
    
    
      <category term="Steam" scheme="https://foreti.me/tags/Steam/"/>
    
  </entry>
  
  <entry>
    <title>Mac上非常方便的一些工具和命令</title>
    <link href="https://foreti.me/2019/02/25/easy-command-tool-mac/"/>
    <id>https://foreti.me/2019/02/25/easy-command-tool-mac/</id>
    <published>2019-02-25T14:51:35.000Z</published>
    <updated>2019-03-23T02:48:17.687Z</updated>
    
    <content type="html"><![CDATA[<p>这是我日常使用mac os的一些常用app和命令<br><a id="more"></a><br><img src="http://pic.yanss.top/2019/20190224235353.png" alt></p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>以下工具皆开源免费，盗版勿求。</p><h3 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><h3 id="使用Homebrew升级git版本"><a href="#使用Homebrew升级git版本" class="headerlink" title="使用Homebrew升级git版本"></a>使用Homebrew升级git版本</h3><p>Mac系统虽然预装git，但一般是较老的版本，如果希望更新到新的版本，最方便的是用Homebrew更新。</p><p>安装git：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure></p><p>替换系统预装git：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew link git</span><br></pre></td></tr></table></figure></p><p>以后更新git：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade git</span><br></pre></td></tr></table></figure></p><h3 id="窗口管理应用"><a href="#窗口管理应用" class="headerlink" title="窗口管理应用"></a>窗口管理应用</h3><p><a href="https://github.com/eczarny/spectacle" target="_blank" rel="noopener">Spectacle</a>，免费开源，关联的快捷键太多，可以取消一些窗口操作的keymap。<br>抛去价格不谈，Spectacle&gt;Moom，而slate太麻烦。</p><h3 id="Shadowsocks科学上网"><a href="#Shadowsocks科学上网" class="headerlink" title="Shadowsocks科学上网"></a>Shadowsocks科学上网</h3><p>服务端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class="line">chmod +x shadowsocks.sh</span><br><span class="line">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/shadowsocks/shadowsocks-windows" target="_blank" rel="noopener">Windows</a><br><a href="https://github.com/shadowsocks/ShadowsocksX-NG" target="_blank" rel="noopener">Mac</a><br><a href="https://github.com/shadowsocks/shadowsocks-android" target="_blank" rel="noopener">Android</a></p><h3 id="图床上传工具"><a href="#图床上传工具" class="headerlink" title="图床上传工具"></a>图床上传工具</h3><p><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">Picgo</a><br><a href="https://github.com/willnewii/qiniuClient" target="_blank" rel="noopener">云存储管理客户端</a></p><h3 id="菜单栏Menubar隐藏部分图标"><a href="#菜单栏Menubar隐藏部分图标" class="headerlink" title="菜单栏Menubar隐藏部分图标"></a>菜单栏Menubar隐藏部分图标</h3><p><a href="https://github.com/DozerMapper/dozer" target="_blank" rel="noopener">Dozer</a></p><h3 id="轻量日历工具"><a href="#轻量日历工具" class="headerlink" title="轻量日历工具"></a>轻量日历工具</h3><p><a href="https://github.com/sfsam/Itsycal" target="_blank" rel="noopener">Istycal</a></p><h3 id="剪贴板工具"><a href="#剪贴板工具" class="headerlink" title="剪贴板工具"></a>剪贴板工具</h3><p><a href="https://github.com/Clipy/Clipy" target="_blank" rel="noopener">Clipy</a></p><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><h3 id="调整Dock栏的隐藏速度"><a href="#调整Dock栏的隐藏速度" class="headerlink" title="调整Dock栏的隐藏速度"></a>调整Dock栏的隐藏速度</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.dock autohide-delay -int 0 <span class="comment">#时间设为最短</span></span><br><span class="line">defaults write com.apple.dock autohide-delay -int 0.5 <span class="comment">#时间设为 0.5s</span></span><br><span class="line">killall dock</span><br></pre></td></tr></table></figure><h3 id="安全与隐私，打开允许“任何来源”"><a href="#安全与隐私，打开允许“任何来源”" class="headerlink" title="安全与隐私，打开允许“任何来源”"></a>安全与隐私，打开允许“任何来源”</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sudo spctl --master-disable</span><br></pre></td></tr></table></figure><h3 id="设置Launchpad的列数和行数"><a href="#设置Launchpad的列数和行数" class="headerlink" title="设置Launchpad的列数和行数"></a>设置Launchpad的列数和行数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.dock springboard-columns -int 列数</span><br><span class="line">defaults write com.apple.dock springboard-rows -int 行数</span><br><span class="line">defaults write com.apple.dock ResetLaunchPad -bool TRUE</span><br><span class="line">killall Dock</span><br></pre></td></tr></table></figure><p><br></p><p id="div-border-top-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我日常使用mac os的一些常用app和命令&lt;br&gt;
    
    </summary>
    
    
      <category term="mac" scheme="https://foreti.me/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>chrome强制重定向到https的问题</title>
    <link href="https://foreti.me/2019/02/24/chrome-https/"/>
    <id>https://foreti.me/2019/02/24/chrome-https/</id>
    <published>2019-02-24T15:08:26.000Z</published>
    <updated>2019-03-23T02:48:17.687Z</updated>
    
    <content type="html"><![CDATA[<p>有些场景下，在chrome中打开的http网页会自动重定向到https<a id="more"></a>，这样可能会造成一些第三方的图片资源或脚本无法正常加载，如果不想这么做的话，可以在chrome地址栏输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome://net-internals/#hsts</span><br></pre></td></tr></table></figure></p><p><img src="http://pic.yanss.top/2019/20190224231418.png" alt><br>在红色区域中输入不想自动重定向到https的域名，点击delete即可。</p><p><br></p><p id="div-border-top-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有些场景下，在chrome中打开的http网页会自动重定向到https
    
    </summary>
    
    
      <category term="chrome" scheme="https://foreti.me/tags/chrome/"/>
    
      <category term="https" scheme="https://foreti.me/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>基于ZooKeeper的分布式锁实现</title>
    <link href="https://foreti.me/2019/02/24/zookeeper-distributed-locks/"/>
    <id>https://foreti.me/2019/02/24/zookeeper-distributed-locks/</id>
    <published>2019-02-24T07:46:58.000Z</published>
    <updated>2019-03-23T02:48:17.718Z</updated>
    
    <content type="html"><![CDATA[<p>201902W9 Share<br><a id="more"></a></p><p>分布式锁的实现方式有很多种，可以依赖数据库、Redis、ZooKeeper等实现，当然不同的方式各有其优缺点。本文仅探讨基于ZooKeeper实现分布式锁的方法。</p><blockquote><p>此部分分布式锁介绍摘自<a href="https://blog.didiyun.com/index.php/2018/11/20/zookeeper/" target="_blank" rel="noopener">https://blog.didiyun.com/index.php/2018/11/20/zookeeper/</a></p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>在单进程应用内，我们经常使用锁来保障多个线程并发访问同一资源的互斥性。在多进程、分布式场景下，如果多个系统或者单个系统的多个节点并发访问同一资源，为了保障对资源读写的互斥性，就需要用到分布式锁。</p><h2 id="为什么用Zookeeper来实现分布式锁？"><a href="#为什么用Zookeeper来实现分布式锁？" class="headerlink" title="为什么用Zookeeper来实现分布式锁？"></a>为什么用Zookeeper来实现分布式锁？</h2><p><code>Zookeeper</code> 能够保障分布式场景下数据的一致性、有序性、原子性及可靠性，它的所有写入动作会在 Leader 节点持久化，并在集群过半数节点写入成功才会返回；它也能够支持节点的崩溃恢复以及客户端的最终一致性视图。对于分布式锁场景来说，数据一致性的保障、以及锁服务的容灾保障至关重要。</p><p>另外，<code>Zookeeper</code> 还提供了三种在分布式锁场景下非常有用的特性（以下的<code>节点</code>指的是<code>Zookeeper</code>内部存储的<code>znode</code>节点）：</p><ol><li>临时节点<br>客户端可以指定 zk 创建一个临时节点，此节点将在这个客户端与服务端建立的 <a href="https://link.juejin.im/?target=https%3A%2F%2Fzookeeper.apache.org%2Fdoc%2Fr3.3.6%2FzookeeperProgrammers.html%23ch_zkSessions" target="_blank" rel="noopener">session</a> 到期时自动删除，这个特性可以保障客户端创建的分布式锁节点在客户端宕机或者网络通讯中断一段时间后自动释放该临时节点，从而避免分布式锁由于客户端或网络原因导致的死锁问题。</li><li>有序节点<br>客户端可以指定 zk 创建一个有序节点，此节点将自动在客户端指定的节点名后面添加一个单调递增序号来确保多个客户端同时创建相同的节点名时能够创建成功，并且保障越早创建的节点的序号越小。利用该特性可以实现锁的互斥性和公平性，即同一时刻只有一个客户端能够成功获取到锁（序号最小的一个获取到锁），获取锁失败的节点可以按照创建顺序进行锁等待。</li><li>watcher 机制<br>可以对一个节点的读操作注册一个 watcher监听器，当节点有变化时（例如节点被删除或更新）zk 服务端将主动通知注册了监听的客户端。这样对于正在等待锁的客户端可以及时得知锁被释放的事件从而重新进行抢锁动作。</li></ol><p>以上三种特性可以结合使用，比如创建一个临时 + 有序节点，再注册一个其它序号节点的watcher监听来感知其他节点的变化。我们可以利用 <code>Zookeeper</code> 原生提供的这些特性实现各种可靠、安全的分布式锁。</p><h2 id="常用的分布式锁类型"><a href="#常用的分布式锁类型" class="headerlink" title="常用的分布式锁类型"></a>常用的分布式锁类型</h2><ul><li>排它锁（MutexLock）<br>任意时刻只有一个线程能够获取到锁，其他线程等待持有这把锁的线程释放锁后才能尝试获取锁。</li><li>信号量（Semaphore）<br>允许多个线程持有一定数量的租约（Lease）。在当前租约数量小于最大租约数时，允许新的请求获取到租约，一旦当前租约数等于最大租约数，则新的请求将等待已获取到租约的线程释放租约后才能尝试获取。一般用来控制访问一个资源池的最大并发度。</li><li>读写锁（ReadWriteLock）<br>写锁作为排它锁，任意时刻只有一个线程能获取到写锁。读锁作为共享锁，当没有写锁被持有的前提下，允许有多个线程同时获取到读锁。</li><li>联锁（MultiLock）<br>保障多个不同资源的锁获取或释放的原子性的一种组合锁。多个锁资源被封装成一个联锁后，要么全部获取成功，要么全部获取失败，联锁保障不会出现部分获取成功的情况。</li></ul><p>注意：以上提到的”线程”可能属于同一进程内，也可能属于不同进程。<code>Zookeeper</code> 能够保障在跨进程场景下数据的一致性。</p><h2 id="分布式锁的通用特性"><a href="#分布式锁的通用特性" class="headerlink" title="分布式锁的通用特性"></a>分布式锁的通用特性</h2><p>除了 <code>Zookeeper</code> 提供的一致性保障之外，分布式锁一般还需要提供如下的通用特性：</p><ul><li>公平性<br>在多个客户端抢锁的过程中，需要保障获取锁的公平性，先到达 <code>Zookeeper</code> 抢锁的请求能够先获取到锁（可以基于 <code>Zookeeper</code> 的有序节点特性来实现）。</li><li>等待超时<br>为了避免死锁，一般在获取锁时都需要传递一个超时时间，超时请求则获取锁失败。</li><li>可重入性<br>在一个线程内，如果已经持有一把锁，则在这把锁被释放前可以多次重复获取锁，其获取次数和释放次数需要保障一致。</li></ul><h2 id="分布式锁的实现库"><a href="#分布式锁的实现库" class="headerlink" title="分布式锁的实现库"></a>分布式锁的实现库</h2><p>推荐使用 Apache Curator库来实现分布式锁，它不仅封装了分布式锁的所有实现细节，还提供友好易用的 API。以下是 <code>Curator</code> 已经实现的分布式锁相关功能：</p><ul><li>可重入锁：<code>InterProcessMutex</code> 实现了可重入的排它锁，支持锁等待超时、保证获取锁的公平性。</li><li>不可重入锁：<code>InterProcessSemaphoreMutex</code> 实现了不可重入的排它锁，支持锁等待超时、保证获取锁的公平性。可以在多个线程间传递和释放锁，从而满足异步调用场景下的锁需求。</li><li>信号量：<code>InterProcessSemaphoreV2</code> 实现了信号量，支持信号量等待超时、保证获取信号量的公平性。客户端每次获取信号量成功都会返回一个租约（Lease）对象，建议客户端在 finally 代码块 close 这个租约对象以释放租约。注意在线程重入时，每次获取信号量成功也会占用一个租约。另外，在多进程场景下，可以通过 <code>SharedCountReader</code> 来保障最大租约数的一致性，避免不同的进程设置不同的最大租约数。</li><li>读写锁：<code>InterProcessReadWriteLock</code> 实现了可重入读写锁，支持锁等待超时、保证获取锁的公平性。并且支持写锁降级（持有写锁的线程可以同时获取到读锁），不支持读锁升级（持有读锁的线程不能同时获取到写锁）。</li><li>联锁：<code>InterProcessMultiLock</code> 实现了联锁，它使用装饰器模式实现多把锁的组合，与可重入锁、不可重入锁实现相同的接口，使得可以像使用单锁一样使用联锁。联锁获取成功代表它拥有的所有内部锁都获取成功，联锁获取失败则会自动释放所有内部已经获取成功的部分锁，从而保证联锁的原子性语义。</li></ul></blockquote><h2 id="安装ZooKeeper环境"><a href="#安装ZooKeeper环境" class="headerlink" title="安装ZooKeeper环境"></a>安装ZooKeeper环境</h2><p>首先在本地安装ZooKeeper环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zookeeper</span><br></pre></td></tr></table></figure><p>安装完成后，启动服务，默认配置文件不用修改，即/usr/local/etc/zookeeper/zoo.cfg<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zkServer  -h</span><br><span class="line">zkServer  start</span><br><span class="line">zkServer  status</span><br></pre></td></tr></table></figure></p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><h3 id="maven导入curator"><a href="#maven导入curator" class="headerlink" title="maven导入curator"></a>maven导入curator</h3><p>curator是比ZooKeeper的源生API更好用的包，使用的人也较多。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ZKLock-java"><a href="#ZKLock-java" class="headerlink" title="ZKLock.java"></a>ZKLock.java</h3><p>ZKLock.java我自己对curator的接口的封装，将基本的方法封装便于调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yanss.zk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.curator.RetryPolicy;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFramework;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFrameworkFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.retry.ExponentialBackoffRetry;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = Logger.getLogger(ZKLock.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHILD_NODE_PATH = <span class="string">"temp"</span>;</span><br><span class="line">    <span class="keyword">private</span> String baseLockPath;</span><br><span class="line">    <span class="keyword">private</span> String finalLockId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> needInterrupt = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> connected = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> acquireLock = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String host = <span class="string">"127.0.0.1:2181"</span>;</span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zooKeeper;</span><br><span class="line">    <span class="keyword">private</span> FatherNodeWatcher fatherNodeWatcher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ZKLock</span><span class="params">(String lock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.baseLockPath = <span class="string">"/"</span> + lock;</span><br><span class="line">        <span class="keyword">this</span>.fatherNodeWatcher = <span class="keyword">new</span> FatherNodeWatcher(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZKLock <span class="title">create</span><span class="params">(String lock)</span> </span>&#123;</span><br><span class="line">        ZKLock zkLock = <span class="keyword">new</span> ZKLock(lock);</span><br><span class="line">        zkLock.connectZooKeeper();</span><br><span class="line">        <span class="keyword">return</span> zkLock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!connected) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!needInterrupt) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LOG.warn(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (acquireLock) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i++ &gt; <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">releaseLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (zooKeeper != <span class="keyword">null</span> &amp;&amp; connected) &#123;</span><br><span class="line">                zooKeeper.delete(finalLockId, -<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.warn(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> disconnectZooKeeper();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">disconnectZooKeeper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (zooKeeper == <span class="keyword">null</span> &amp;&amp; !connected) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connected = <span class="keyword">false</span>;</span><br><span class="line">            acquireLock = <span class="keyword">false</span>;</span><br><span class="line">            zooKeeper.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.warn(String.format(<span class="string">"ZK disconnect failed. [%s]"</span>, e.getMessage()), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">connectZooKeeper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>);</span><br><span class="line">            CuratorFramework client = CuratorFrameworkFactory.newClient(host, <span class="number">5000</span>, <span class="number">3000</span>, retryPolicy);</span><br><span class="line"></span><br><span class="line">            zooKeeper = <span class="keyword">new</span> ZooKeeper(host, <span class="number">60000</span>, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (event.getState() == Watcher.Event.KeeperState.AuthFailed) &#123;</span><br><span class="line">                        needInterrupt = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getState() == Watcher.Event.KeeperState.Disconnected) &#123;</span><br><span class="line">                        needInterrupt = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getState() == Watcher.Event.KeeperState.Expired) &#123;</span><br><span class="line">                        needInterrupt = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (event.getType() == Watcher.Event.EventType.None) &#123;</span><br><span class="line">                            connected = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (!connected) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">100</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Thread.sleep(<span class="number">300</span>);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (connected) &#123;</span><br><span class="line">                <span class="keyword">if</span> (zooKeeper.exists(baseLockPath, <span class="keyword">true</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    zooKeeper.create(baseLockPath, <span class="string">""</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                finalLockId = zooKeeper.create(baseLockPath + <span class="string">"/"</span> + CHILD_NODE_PATH, <span class="string">""</span>.getBytes(),</span><br><span class="line">                        ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line"></span><br><span class="line">                checkAcquire();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                needInterrupt = <span class="keyword">true</span>;</span><br><span class="line">                LOG.warn(<span class="string">"Connect zookeeper failed. Time consumes 30 s"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.warn(e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkAcquire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!connected) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;String&gt; childrenList = zooKeeper.getChildren(baseLockPath, fatherNodeWatcher);</span><br><span class="line">            <span class="keyword">if</span> (judgePathNumMin(childrenList)) &#123;</span><br><span class="line">                acquireLock = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.warn(e.getMessage(), e);</span><br><span class="line">            disconnectZooKeeper();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">judgePathNumMin</span><span class="params">(List&lt;String&gt; paths)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (paths.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (paths.size() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            Collections.sort(paths, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String str1, String str2)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> num1;</span><br><span class="line">                    <span class="keyword">int</span> num2;</span><br><span class="line">                    String string1 = str1.substring(CHILD_NODE_PATH.length(), str1.length());</span><br><span class="line">                    String string2 = str2.substring(CHILD_NODE_PATH.length(), str2.length());</span><br><span class="line">                    num1 = Integer.parseInt(string1);</span><br><span class="line">                    num2 = Integer.parseInt(string2);</span><br><span class="line">                    <span class="keyword">if</span> (num1 &gt; num2) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num1 &lt; num2) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String minId = paths.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> finalLockId.equals(baseLockPath + <span class="string">"/"</span> + minId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">FatherNodeWatcher</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> ZKLock context;</span><br><span class="line"></span><br><span class="line">        FatherNodeWatcher(ZKLock context) &#123;</span><br><span class="line">            <span class="keyword">this</span>.context = context;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (event.getState() == Watcher.Event.KeeperState.AuthFailed) &#123;</span><br><span class="line">                context.needInterrupt = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getState() == Watcher.Event.KeeperState.Disconnected) &#123;</span><br><span class="line">                context.needInterrupt = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getState() == Watcher.Event.KeeperState.Expired) &#123;</span><br><span class="line">                context.needInterrupt = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (event.getType() == Event.EventType.NodeChildrenChanged) &#123;</span><br><span class="line">                    context.checkAcquire();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TestZKLockThread-java"><a href="#TestZKLockThread-java" class="headerlink" title="TestZKLockThread.java"></a>TestZKLockThread.java</h3><p>为了测试ZooKeeper的分布式锁是非有用，在本地开启多线程，同时段去请求锁，然后查看锁的竞争情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yanss.zk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestZKLockThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = Logger.getLogger(TestZKLockThread.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lockPath;</span><br><span class="line">    <span class="keyword">private</span> String num;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> threadNum 线程编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestZKLockThread</span><span class="params">(String lockPath, String threadNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lockPath = lockPath;</span><br><span class="line">        <span class="keyword">this</span>.num = threadNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ZKLock zkLock = ZKLock.create(lockPath);</span><br><span class="line">        <span class="keyword">if</span> (zkLock.getLock()) &#123;</span><br><span class="line">            LOG.error(String.format(<span class="string">"线程:[%s]获取到任务锁,并开始执行任务"</span>, num));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            LOG.error(String.format(<span class="string">"线程:[%s]已完成任务"</span>, num));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LOG.error(String.format(<span class="string">"线程:[%s]没有获取到任务锁,放弃执行任务"</span>, num));</span><br><span class="line">        &#125;</span><br><span class="line">        zkLock.releaseLock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TestZKLockWithMultiThread-java"><a href="#TestZKLockWithMultiThread-java" class="headerlink" title="TestZKLockWithMultiThread.java"></a>TestZKLockWithMultiThread.java</h3><p>运行测试方法<code>TestZKLockWithMultiThread.java</code>，查看控制台输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yanss.zk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.BasicConfigurator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestZKLockWithMultiThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BasicConfigurator.configure();</span><br><span class="line">        <span class="keyword">int</span> threadCount = <span class="number">5</span>;</span><br><span class="line">        List&lt;TestZKLockThread&gt; testZKLockThreads = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">            testZKLockThreads.add(<span class="keyword">new</span> TestZKLockThread(<span class="string">"lockpath"</span>, <span class="string">"Thread"</span> + i ));</span><br><span class="line">        &#125;</span><br><span class="line">        testZKLockThreads.forEach(tmp -&gt; tmp.start());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><ol><li><p>设置每个线程获取锁的等待时间为无限长（或者较长的时间比如60s），在<code>ZKLock.java</code>的第58行可修改时间，将</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i++ &gt; <span class="number">5</span>) &#123;</span><br><span class="line">true<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释掉，每个线程取得锁权限后处理逻辑时间为2s，运行<code>TestZKLockWithMultiThread.java</code>，控制台输出（已删去ZooKeeper的输出日志）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0 [Thread-0] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread0]获取到任务锁,并开始执行任务</span><br><span class="line">2011 [Thread-0] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread0]已完成任务</span><br><span class="line">3018 [Thread-1] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread1]获取到任务锁,并开始执行任务</span><br><span class="line">5022 [Thread-1] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread1]已完成任务</span><br><span class="line">5027 [Thread-4] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread4]获取到任务锁,并开始执行任务</span><br><span class="line">7030 [Thread-4] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread4]已完成任务</span><br><span class="line">7035 [Thread-2] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread2]获取到任务锁,并开始执行任务</span><br><span class="line">9036 [Thread-2] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread2]已完成任务</span><br><span class="line">9041 [Thread-3] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread3]获取到任务锁,并开始执行任务</span><br><span class="line">11048 [Thread-3] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread3]已完成任务</span><br></pre></td></tr></table></figure></li><li><p>设置每个线程获取锁的时间为5s，将第一步中注释掉的代码还原，同时将<code>TestZKLockThread.java</code>中32行的<code>zkLock.releaseLock();</code>注释掉，即获取锁完成任务后不再释放锁，控制台输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0 [Thread-4] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread4]获取到任务锁,并开始执行任务</span><br><span class="line">2002 [Thread-4] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread4]已完成任务</span><br><span class="line">6024 [Thread-2] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread2]没有获取到任务锁,放弃执行任务</span><br><span class="line">6024 [Thread-3] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread3]没有获取到任务锁,放弃执行任务</span><br><span class="line">6024 [Thread-0] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread0]没有获取到任务锁,放弃执行任务</span><br><span class="line">6024 [Thread-1] INFO com.yanss.zk.TestZKLockThread  - 线程:[Thread1]没有获取到任务锁,放弃执行任务</span><br></pre></td></tr></table></figure></li></ol><p>通过这两个测试用例，可以发现我在我的Mac上安装的ZooKeeper服务启动后，通过用本地5个线程进行获取锁和释放锁的操作，在ZooKeeper服务的调度下，可以达到预期的分布式锁的效果。更详细的服务性能不好测试，留待未来实际应用中再记录。</p><p><br></p><p id="div-border-top-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;201902W9 Share&lt;br&gt;
    
    </summary>
    
    
      <category term="ARTS" scheme="https://foreti.me/tags/ARTS/"/>
    
      <category term="ZooKeeper" scheme="https://foreti.me/tags/ZooKeeper/"/>
    
      <category term="分布式锁" scheme="https://foreti.me/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Lombok让Java变得再次酷炫</title>
    <link href="https://foreti.me/2019/02/15/lombok-make-java-cool-again/"/>
    <id>https://foreti.me/2019/02/15/lombok-make-java-cool-again/</id>
    <published>2019-02-15T05:18:04.000Z</published>
    <updated>2019-03-23T02:48:17.703Z</updated>
    
    <content type="html"><![CDATA[<p>201902W5 Review, 这是一篇关于Spring开发插件Lombok的译文。<br><a id="more"></a></p><p><img src="http://pic.yanss.top/2019/20190202144529.png" alt></p><p><a href="https://bytes.grubhub.com/lombok-makes-java-cool-again-171102bdcc52" target="_blank" rel="noopener">原文</a></p><p>在Grauhub，我们在大多数后端编程中都是用Java。Java是一门经过20多年实战考验的语言，已经证明了它的速度和可靠性。虽然我们已经使用Java很多年了，最近，它开始展现了它的老旧的特性。</p><p>尽管Java是最受欢迎的JVM语言之一，但它不是唯一的。在过去几年里，它面临着一些挑战者，比如Scala，Clojure和Kotlin，它们提供了新的功能和高效的语言特性。简而言之，它们让你用更少的代码做更多的事。<br>是的·<br>JVM生态系统中的这一创新令人兴奋。更多的竞争意味着Java被迫改变以保持竞争力。从Java 8（Valhalla，Local-Variable Type Inference，Loom）以来，新的六个月发布计划和几个JEP（JDK 增强提议）证明了Java在未来几年将继续保持竞争力。</p><p>但是，Java语言的大小和规模意味着开发进度比我们想要的要慢，更不用说Java不惜一切代价保持向后兼容性的强烈意愿。通过任何软件工程工作，功能都需要优先考虑，因此如果完全使用Java的话，我们想要的功能可能需要很长时间。与此同时，现在Grubhub利用Lombok项目获得简化和改进的Java。Lombok是一个编译器插件，它为Java添加了新的“关键字”，并将注释转换为Java代码，减少了繁杂的工程工作，并提供了一些额外的功能。</p><h2 id="设置Lombok"><a href="#设置Lombok" class="headerlink" title="设置Lombok"></a>设置Lombok</h2><p>Grubhub一直在寻求改进我们的软件生命周期，但每个新工具和流程都需要在采用之前考虑成本。幸运的是，添加Lombok就像在gradle文件中添加几行一样简单。</p><p>Lombok是一个编译器插件，因为它在编译器处理它们之前将源代码中的注释转换为Java语句–在运行时不需要提供lombok依赖项，因此添加Lombok不会增加构建工件的大小。因此，您需要下载Lombok并将其添加到您的构建工具中。要<a href="https://projectlombok.org/setup/gradle" target="_blank" rel="noopener">使用Gradle设置Lombok</a>（它也适用于<a href="https://projectlombok.org/setup/maven" target="_blank" rel="noopener">Maven</a>），请将此块添加到build.gradle文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &amp;apos;io.franzbecker.gradle-lombok&amp;apos; version &amp;apos;1.14&amp;apos;</span><br><span class="line">    id &amp;apos;java&amp;apos;</span><br><span class="line">&#125;</span><br><span class="line">repositories &#123;</span><br><span class="line">    jcenter() // or Maven central, required for Lombok dependency</span><br><span class="line">&#125;</span><br><span class="line">lombok &#123;</span><br><span class="line">    version = &amp;apos;1.18.4&amp;apos;</span><br><span class="line">    sha256 = &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于Lombok是一个编译器插件，我们为它编写的源代码实际上并不是有效的Java。因此，您还需要为正在使用的IDE安装插件。幸运的是，Lombok支持所有主要的Java IDE。没有插件，IDE不知道如何解析代码。IDE集成是无缝的。诸如“show usages”和“go to implementation”等功能继续按预期工作，带您进入相关字段/类。</p><h2 id="Lombok使用"><a href="#Lombok使用" class="headerlink" title="Lombok使用"></a>Lombok使用</h2><p>了解Lombok的最佳方式是看它的使用方法。让我们深入研究一些如何将Lombok应用于Java应用程序的常见方面的示例。</p><h3 id="为POJO增添趣味"><a href="#为POJO增添趣味" class="headerlink" title="为POJO增添趣味"></a>为POJO增添趣味</h3><p>我们使用普通的旧Java对象（POJO）将数据与处理分开，使我们的代码更易于阅读并简化网络有效负载。一个简单的POJO有一些私有字段和相应的getter和setter。它们只在写了很多样板代码之后可以完成了工作。</p><p>Lombok有助于使POJO更有用，更灵活，更有结构，而无需编写更多其他代码。使用Lombok，我们可以使用@Data注释简化最基本的POJO ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> UUID userId;</span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该@Data注释实际上是包含多个Lombok注释的便利结合。</p><ul><li><p><a href="https://projectlombok.org/features/ToString" target="_blank" rel="noopener">@ToString</a>生成该toString()方法的实现，该实现由包含类名和每个字段及其值的对象的“漂亮打印”版本组成。</p></li><li><p><a href="https://projectlombok.org/features/EqualsAndHashCode" target="_blank" rel="noopener">@EqualsAndHashCode</a>生成equals和hashCode方法的实现，默认情况下，它们使用所有非静态，非transient字段，但是可配置。</p></li><li><p><a href="https://projectlombok.org/features/GetterSetter" target="_blank" rel="noopener">@Getter/@Setter</a>为私有字段生成getter和setter方法。</p></li><li><p><a href="https://projectlombok.org/features/constructor" target="_blank" rel="noopener">@RequiredArgsConstructor</a>生成带参数的构造函数，其中需要参数是常量字段和带@NonNull注释的字段（稍后将详细介绍）。</p></li></ul><p>这一个注释简单而优雅地涵盖了许多常见用例，但POJO并不总是足够的。一个注释@Data的类是完全可变的，它一旦被滥用，可能在应用程序增加复杂性和限制并发量，这两点都有害于应用程序的持久性。</p><p>Lombok刚刚修复。让我们重新审视我们的User类，使其不可变，并添加一些其他有用的Lombok注释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="meta">@Builder</span>(toBuilder = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="meta">@NonNull</span> </span><br><span class="line">  UUID userId;</span><br><span class="line">  <span class="meta">@NonNull</span> </span><br><span class="line">  String email;</span><br><span class="line">  <span class="meta">@Singular</span></span><br><span class="line">  Set&lt;String&gt; favoriteFoods;</span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@Builder</span>.Default</span><br><span class="line">  String avatar = “<span class="keyword">default</span>.png”;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所需要的只是@Value注释。@Value类似于@Data，除了所有字段都默认为private和final，并且不生成setter。这些特点使注释@Value的对象有效地不变。由于字段都是常量的，因此没有无参数构造函数。相反，Lombok用@AllArgsConstructor生成所有参数构造函数，这产生了一个功能完备，有效不可变的对象。</p><p>但是，如果只能使用all args构造函数创建对象，那么不可变是不太有用的。Joshua Bloch在《Effective Java》解释，当面临着许多构造函数参数时应该使用建造者。这就是Lombok的@Builder的作用，自动生成构建器内部类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User user = User.builder()</span><br><span class="line">  .userId(UUID.random())</span><br><span class="line">  .email(“grubhub<span class="meta">@grubhub</span>.com”)</span><br><span class="line">  .favoriteFood(“burritos”)</span><br><span class="line">  .favoriteFood(“dosas”)</span><br><span class="line">  .build()</span><br></pre></td></tr></table></figure><p>使用Lombok生成的构建器可以轻松创建具有多个参数的对象，并在将来添加新字段。静态构建器方法返回构建器实例以设置对象的所有属性。设置后，在构建器上调用build()方法返回实例。</p><p>该@NonNull注释可被用来在对象被实例化时，断言这些字段不为空，在空时抛出一个NullPointerException。请注意头像字段是如何注释@NonNull但未设置的。这是因为@Builder.Default注释表示默认使用“default.png”。（Grubhub是一个美国外卖公司，这里的头像指用户头像。）</p><p>还要注意构建器使用<code>favoriteFood</code>，即对象上属性的单数名称。当@Singular注释放在集合属性上时，Lombok会创建特殊的构建器方法来单独向该集合添加项目，而不是一次添加整个集合。这对于测试来说特别好，因为在Java中创建小型集合并不简洁。</p><p>最后，<code>toBuilder = true</code>设置添加了一个实例方法toBuilder()，该方法创建一个使用该实例的所有值填充的构建器对象。这样可以轻松创建一个预先填充原始实例中所有值的新实例，并仅更改所需的字段。这对于@Value类特别有用，因为字段是不可变的。</p><p>通过一些注释，你可以进一步配置专门的setter功能。@Wither为每个接受值的属性创建“withX”方法，并返回实例的克隆，并更新一个字段值。@Accessors允许您配置自动创建的setter。默认情况下，它允许将setter链接起来，就像构建器一样，返回而不是void。它还有一个参数，<code>fluent=true</code>，它删除了getter和setter上的“get”和“set”前缀约定。如果用例需要更多自定义，这对于@Builder可能是一个有用的替代品。</p><p>如果Lombok实现不适合您的用例（并且您已经查看了注释的修饰符），那么您始终可以手动编写自己的实现。例如，如果您有一个@Data类但是一个getter需要自定义逻辑，那么只需实现该getter。Lombok将看到已经提供了一个实现，并且不会使用自动生成的实现重写它。</p><p>只需几个简单的注释，最初的User POJO已经获得了许多丰富的功能，使其更易于使用，而不会给我们的工程师带来太多负担或增加开发的时间或成本。</p><h3 id="删除组件样板代码"><a href="#删除组件样板代码" class="headerlink" title="删除组件样板代码"></a>删除组件样板代码</h3><p>Lombok不仅在POJO中有用 - 它可以应用于应用程序的任何层。Lombok的以下用法在应用程序的组件类中特别有用，例如Controller，Service和DAO（数据访问对象）。</p><p>日志是每个软件的基准需求，作为关键的调查工具。任何正在做有意义的工作的类都应该记录日志信息。由于日志记录是一个贯穿各领域的问题，因此在每个类中声明一个<code>private static final logger</code>成为即时模板。Lombok将此样板简化为一个注释，该注释自动定义并实例化具有正确类名的记录器。根据您使用的日志记录框架，有一些不同的注释。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j <span class="comment">// also: @CommonsLog @Flogger @JBossLog @Log @Log4j @Log4j2 @XSlf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  <span class="comment">// created automatically</span></span><br><span class="line">  <span class="comment">// private static final org.slf4j.Logger log = </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在声明了logger之后，接下来让我们添加我们的依赖项：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@FieldDefaults</span>(makeFinal=<span class="keyword">true</span>, level=AccessLevel.PRIVATE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  <span class="meta">@NonNull</span> UserDao userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该@FieldDefaults注释增加了final和private修饰符的所有字段。在@RequiredArgsConstructor创建构造器接受并设置一个UserDao实例。该@NonNull注释在构造函数中增加了一个检查，如果UserDao实例为null抛出一个NullPointerException。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>有很多方法可以使用Lombok。以上两节主要针对特定用例，但Lombok可以在许多方面使开发更容易。以下是一些小例子，展示了如何更有效地利用Lombok。</p><p>尽管Java 9引入了var关键字，var仍可以重新分配。Lombok提供了一个val关键字，它可以在var不支持的地方生效，提供本地常量推断变量。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// final Map map = new HashMap&lt;Integer, String&gt;();</span></span><br><span class="line">val map = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br></pre></td></tr></table></figure></p><p>有些类只具有纯静态函数，而且从不打算初始化。声明抛出异常的私有构造函数是阻止它实例化的一种方法。Lombok在其@UtilityClass注释中编写了该模式，该注释创建了一个私有构造函数，它抛出异常，使类成为final，并使所有方法都是静态的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UtilityClass</span></span><br><span class="line"><span class="comment">// will be made final</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilityClass</span> </span>&#123;</span><br><span class="line">  <span class="comment">// will be made static</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> GRUBHUB = “ GRUBHUB”;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// autogenerated by Lombok</span></span><br><span class="line">  <span class="comment">// private UtilityClass() &#123;</span></span><br><span class="line">  <span class="comment">//   throw new java.lang.UnsupportedOperationException("This is a utility class and cannot be instantiated");</span></span><br><span class="line">  <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// will be made static</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">append</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> input + GRUBHUB;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对Java的常见批评是创建通过抛出已检查的异常的冗长。Lombok有一个注释，可以删除那些讨厌的关键词：@SneakyThrows。正如您所料，实现非常狡猾（sneaky）。它不会吞下甚至将异常包装成一个RuntimeException。相反，它依赖于以下事实：在运行时，JVM不会检查已检查异常的一致性。只有javac这样做。因此，Lombok使用字节码转换在编译时选择退出此检查。这导致代码顺利运行。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SneakyThrows</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sneakyThrow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="并排比较"><a href="#并排比较" class="headerlink" title="并排比较"></a>并排比较</h2><p>没什么能比做并排比较更清楚看到Lombok节省的代码。IDE插件提供了一个“de-lombok”函数，可将大多数Lombok注释转换为近似的本机Java代码（@NonNull注释不转换）。安装了Lombok插件的任何IDE都允许你将大多数注释转换为本机Java代码（并再次返回）。让我们从上面回到我们的User类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="meta">@Builder</span>(toBuilder = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="meta">@NonNull</span> </span><br><span class="line">  UUID userId;</span><br><span class="line">  <span class="meta">@NonNull</span> </span><br><span class="line">  String email;</span><br><span class="line">  <span class="meta">@Singular</span></span><br><span class="line">  Set&lt;String&gt; favoriteFoods;</span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@Builder</span>.Default</span><br><span class="line">  String avatar = “<span class="keyword">default</span>.png”;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Lombok类只有13条简单易读的描述性代码行。但是在运行de-lombok之后，这个课程变成了一百多行的样板，没有人愿意看到，但每个人都想要！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@NonNull</span></span><br><span class="line">   UUID userId;</span><br><span class="line">   <span class="meta">@NonNull</span></span><br><span class="line">   String email;</span><br><span class="line">   Set&lt;String&gt; favoriteFoods;</span><br><span class="line">   <span class="meta">@NonNull</span></span><br><span class="line">   <span class="meta">@Builder</span>.Default</span><br><span class="line">   String avatar = <span class="string">"default.png"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@java</span>.beans.ConstructorProperties(&#123;<span class="string">"userId"</span>, <span class="string">"email"</span>, <span class="string">"favoriteFoods"</span>, <span class="string">"avatar"</span>&#125;)</span><br><span class="line">   User(UUID userId, String email, Set&lt;String&gt; favoriteFoods, String avatar) &#123;</span><br><span class="line">       <span class="keyword">this</span>.userId = userId;</span><br><span class="line">       <span class="keyword">this</span>.email = email;</span><br><span class="line">       <span class="keyword">this</span>.favoriteFoods = favoriteFoods;</span><br><span class="line">       <span class="keyword">this</span>.avatar = avatar;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserBuilder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> UserBuilder();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@NonNull</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> UUID <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.userId;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@NonNull</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.email;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getFavoriteFoods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.favoriteFoods;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@NonNull</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getAvatar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.avatar;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (o == <span class="keyword">this</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> User)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">final</span> User other = (User) o;</span><br><span class="line">       <span class="keyword">final</span> Object <span class="keyword">this</span>$userId = <span class="keyword">this</span>.getUserId();</span><br><span class="line">       <span class="keyword">final</span> Object other$userId = other.getUserId();</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>$userId == <span class="keyword">null</span> ? other$userId != <span class="keyword">null</span> : !<span class="keyword">this</span>$userId.equals(other$userId)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">final</span> Object <span class="keyword">this</span>$email = <span class="keyword">this</span>.getEmail();</span><br><span class="line">       <span class="keyword">final</span> Object other$email = other.getEmail();</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>$email == <span class="keyword">null</span> ? other$email != <span class="keyword">null</span> : !<span class="keyword">this</span>$email.equals(other$email)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">final</span> Object <span class="keyword">this</span>$favoriteFoods = <span class="keyword">this</span>.getFavoriteFoods();</span><br><span class="line">       <span class="keyword">final</span> Object other$favoriteFoods = other.getFavoriteFoods();</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>$favoriteFoods == <span class="keyword">null</span> ? other$favoriteFoods != <span class="keyword">null</span> : !<span class="keyword">this</span>$favoriteFoods.equals(other$favoriteFoods))</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">final</span> Object <span class="keyword">this</span>$avatar = <span class="keyword">this</span>.getAvatar();</span><br><span class="line">       <span class="keyword">final</span> Object other$avatar = other.getAvatar();</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>$avatar == <span class="keyword">null</span> ? other$avatar != <span class="keyword">null</span> : !<span class="keyword">this</span>$avatar.equals(other$avatar)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">int</span> PRIME = <span class="number">59</span>;</span><br><span class="line">       <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">final</span> Object $userId = <span class="keyword">this</span>.getUserId();</span><br><span class="line">       result = result * PRIME + ($userId == <span class="keyword">null</span> ? <span class="number">43</span> : $userId.hashCode());</span><br><span class="line">       <span class="keyword">final</span> Object $email = <span class="keyword">this</span>.getEmail();</span><br><span class="line">       result = result * PRIME + ($email == <span class="keyword">null</span> ? <span class="number">43</span> : $email.hashCode());</span><br><span class="line">       <span class="keyword">final</span> Object $favoriteFoods = <span class="keyword">this</span>.getFavoriteFoods();</span><br><span class="line">       result = result * PRIME + ($favoriteFoods == <span class="keyword">null</span> ? <span class="number">43</span> : $favoriteFoods.hashCode());</span><br><span class="line">       <span class="keyword">final</span> Object $avatar = <span class="keyword">this</span>.getAvatar();</span><br><span class="line">       result = result * PRIME + ($avatar == <span class="keyword">null</span> ? <span class="number">43</span> : $avatar.hashCode());</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"User(userId="</span> + <span class="keyword">this</span>.getUserId() + <span class="string">", email="</span> + <span class="keyword">this</span>.getEmail() + <span class="string">", favoriteFoods="</span> + <span class="keyword">this</span>.getFavoriteFoods() + <span class="string">", avatar="</span> + <span class="keyword">this</span>.getAvatar() + <span class="string">")"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> UserBuilder <span class="title">toBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> UserBuilder().userId(<span class="keyword">this</span>.userId).email(<span class="keyword">this</span>.email).favoriteFoods(<span class="keyword">this</span>.favoriteFoods).avatar(<span class="keyword">this</span>.avatar);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBuilder</span> </span>&#123;</span><br><span class="line">       <span class="keyword">private</span> UUID userId;</span><br><span class="line">       <span class="keyword">private</span> String email;</span><br><span class="line">       <span class="keyword">private</span> ArrayList&lt;String&gt; favoriteFoods;</span><br><span class="line">       <span class="keyword">private</span> String avatar;</span><br><span class="line"></span><br><span class="line">       UserBuilder() &#123;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> User.<span class="function">UserBuilder <span class="title">userId</span><span class="params">(UUID userId)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.userId = userId;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> User.<span class="function">UserBuilder <span class="title">email</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.email = email;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> User.<span class="function">UserBuilder <span class="title">favoriteFood</span><span class="params">(String favoriteFood)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.favoriteFoods == <span class="keyword">null</span>) <span class="keyword">this</span>.favoriteFoods = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">           <span class="keyword">this</span>.favoriteFoods.add(favoriteFood);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> User.<span class="function">UserBuilder <span class="title">favoriteFoods</span><span class="params">(Collection&lt;? extends String&gt; favoriteFoods)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.favoriteFoods == <span class="keyword">null</span>) <span class="keyword">this</span>.favoriteFoods = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">           <span class="keyword">this</span>.favoriteFoods.addAll(favoriteFoods);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> User.<span class="function">UserBuilder <span class="title">clearFavoriteFoods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.favoriteFoods != <span class="keyword">null</span>)</span><br><span class="line">               <span class="keyword">this</span>.favoriteFoods.clear();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> User.<span class="function">UserBuilder <span class="title">avatar</span><span class="params">(String avatar)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.avatar = avatar;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> User <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           Set&lt;String&gt; favoriteFoods;</span><br><span class="line">           <span class="keyword">switch</span> (<span class="keyword">this</span>.favoriteFoods == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.favoriteFoods.size()) &#123;</span><br><span class="line">               <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                   favoriteFoods = java.util.Collections.emptySet();</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                   favoriteFoods = java.util.Collections.singleton(<span class="keyword">this</span>.favoriteFoods.get(<span class="number">0</span>));</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">default</span>:</span><br><span class="line">                   favoriteFoods = <span class="keyword">new</span> java.util.LinkedHashSet&lt;String&gt;(<span class="keyword">this</span>.favoriteFoods.size() &lt; <span class="number">1073741824</span> ? <span class="number">1</span> + <span class="keyword">this</span>.favoriteFoods.size() + (<span class="keyword">this</span>.favoriteFoods.size() - <span class="number">3</span>) / <span class="number">3</span> : Integer.MAX_VALUE);</span><br><span class="line">                   favoriteFoods.addAll(<span class="keyword">this</span>.favoriteFoods);</span><br><span class="line">                   favoriteFoods = java.util.Collections.unmodifiableSet(favoriteFoods);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> User(userId, email, favoriteFoods, avatar);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"User.UserBuilder(userId="</span> + <span class="keyword">this</span>.userId + <span class="string">", email="</span> + <span class="keyword">this</span>.email + <span class="string">", favoriteFoods="</span> + <span class="keyword">this</span>.favoriteFoods + <span class="string">", avatar="</span> + <span class="keyword">this</span>.avatar + <span class="string">")"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以从上面为UserService类做同样的事情。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@FieldDefaults</span>(makeFinal=<span class="keyword">true</span>, level=AccessLevel.PRIVATE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  <span class="meta">@NonNull</span> UserDao userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将导致大约这个Java代码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(UserService.class);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> UserDao userDao;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@java</span>.beans.ConstructorProperties(&#123;<span class="string">"userDao"</span>&#125;)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (userDao == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"userDao is marked @NonNull but is null"</span>)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h2 id="衡量影响"><a href="#衡量影响" class="headerlink" title="衡量影响"></a>衡量影响</h2><p>Grubhub有超过一百种服务来满足业务需求。我们采用了其中一种服务并运行了Lombok IntelliJ插件的“de-lombok”功能，以查看使用Lombok节省了多少行代码。结果是大约180个文件的更改，导致大约18,000个额外的代码行和800个Lombok使用的删除。这是18,000行自动生成，标准化和经过实战考验的代码行！平均而言，每行Lombok代码都节省了23行Java代码。有了这样的影响，很难想象没有Lombok就使用Java。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Lombok是一种很好的方式，可以激发工程师的新语言功能，而无需在整个组织内付出太多努力。将插件应用于项目当然比使用现有代码训练所有工程师使用新语言和端口更容易。Lombok可能没有一切，但它确实提供了足够的开箱即用，对工程经验产生了明显的影响。</p><p>Lombok的另一个好处是它使我们的代码库保持一致。凭借遍布全球的一百多种不同服务和分布式团队，使我们的代码库保持一致，可以更轻松地扩展团队并减少启动新项目时上下文切换的负担。自Java 6以来，Lombok与任何版本的Java都相关，因此我们可以指望它在所有项目中都可用。</p><p>Lombok对Grubhub的意义远远超过了闪亮的新功能。毕竟，Lombok做的任何事情都可以手工编写。如图所示，Lombok简化了代码库的无聊部分，而不会影响业务逻辑。这使我们专注于为Grubhub提供最大价值的工作，并且是我们工程师最感兴趣的工作。编写者，审阅者和维护者让代码库的这么大部分成为单调的样板代码是浪费时间。此外，由于此代码不再手动编写，因此它消除了所有类型的拼写错误。自动生成的好处与强大的功能相结合，@NonNull减少了漏洞的可能性，并使我们的工程工作专注于为您提供食物！</p><p><br></p><p id="div-border-top-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;201902W5 Review, 这是一篇关于Spring开发插件Lombok的译文。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://foreti.me/tags/Java/"/>
    
      <category term="Lombok" scheme="https://foreti.me/tags/Lombok/"/>
    
      <category term="ARTS" scheme="https://foreti.me/tags/ARTS/"/>
    
  </entry>
  
  <entry>
    <title>ThoughtWorks笔试题</title>
    <link href="https://foreti.me/2018/10/30/thoughtworks-exam/"/>
    <id>https://foreti.me/2018/10/30/thoughtworks-exam/</id>
    <published>2018-10-30T15:11:03.000Z</published>
    <updated>2019-03-23T02:48:17.703Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下2017-2018年的三次ThoughtWorks笔试的题目和我的解法。<br><a id="more"></a></p><h1 id="2018-Q3-校招（软件开发工程师）"><a href="#2018-Q3-校招（软件开发工程师）" class="headerlink" title="2018_Q3_校招（软件开发工程师）"></a>2018_Q3_校招（软件开发工程师）</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="http://pic.yanss.top/2019/20190216182913.png" target="_blank" rel="noopener">下载</a></p><h2 id="复试题目"><a href="#复试题目" class="headerlink" title="复试题目"></a>复试题目</h2><p><img src="http://pic.yanss.top/2019/第二部分题目1.png" alt></p><p><img src="http://pic.yanss.top/2019/第二部分题目2.png" alt></p><p><img src="http://pic.yanss.top/2019/第二部分题目3.png" alt></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><a href="http://pic.yanss.top/Maze.zip" target="_blank" rel="noopener">全部代码</a>，包括复试题的答案。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>抽象问题内容, 发现要做的事就是读取命令输入和构建迷宫矩阵</p><p>细致分析一下, 有以下步骤</p><ul><li>读取从第一行输入的命令, 先用 <code>MazeFactory</code> 的 <code>checkFirstLineInput()</code> 方法检测输入, 得到的结果可以构建初始的迷宫矩阵, 即这种, 共有九个 <code>[R]</code>, 在代码中是 <code>MazeFactory</code> 的 <code>init()</code> 方法.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[W] [W] [W] [W] [W] [W] [W]</span><br><span class="line">[W] [R] [W] [R] [W] [R] [W]</span><br><span class="line">[W] [W] [W] [W] [W] [W] [W]</span><br><span class="line">[W] [R] [W] [R] [W] [R] [W]</span><br><span class="line">[W] [W] [W] [W] [W] [W] [W]</span><br><span class="line">[W] [R] [W] [R] [W] [R] [W]</span><br><span class="line">[W] [W] [W] [W] [W] [W] [W]</span><br></pre></td></tr></table></figure><ul><li><p>然后读取第二行命令, 提取出一组组的Road, 如 <code>(0,1) (0,2)</code>, 由于这是在 cell 中的下标, 我们将它转变为 maze 矩阵的下标, 即<code>(1,3) (1,5)</code>, 这样就是可以连通的两个Road节点, 并且得到需要被转变为Road 的 Wall 节点<code>(1,4)</code>. </p><p>重复这样的操作, 可以得到一组需要被转变为Road 的 Wall节点的List, 在代码中是 <code>MazeFactory</code> 的 <code>checkSecondLineInput()</code> 方法, 此方法同时处理了对第二行命令输入的检测.</p><p>然后将它们的节点信息<code>[W]</code>变为<code>[R]</code>, 即 <code>connectRoad()</code></p></li><li><p>最后, 对 maze 矩阵信息进行打印输入, 即 `maze.render()</p></li></ul><h1 id="2018-SPRING-DEV"><a href="#2018-SPRING-DEV" class="headerlink" title="2018_SPRING_DEV"></a>2018_SPRING_DEV</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p><a href="http://pic.yanss.top/2018_SPRING_DEV.pdf" target="_blank" rel="noopener">下载</a></p><p><img src="http://pic.yanss.top/ThoughtWorks2018Spring.png" alt="ThoughtWorks2018Spring"></p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><ul><li>首先需要一个逐行读取文件内容的方法， 构造文件输入流，再构造Scanner类输入即可。然后将读取的逐行信息切分为一个数组，保存到ArrayList1中；再以ArrayList2嵌套ArrayList1即可</li><li>在main方法中获取键盘输入信息作为消息序号id，然后遍历从第0条到第id条消息，得出第id条消息的输出</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>新建一个<code>input.txt</code>文件记录无人机活动信号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plane1 1 1 1</span><br><span class="line">plane1 1 1 1 1 2 3</span><br><span class="line">plane1 2 3 4 1 1 1</span><br><span class="line">plane1 3 4 5</span><br><span class="line">plane1 1 1 1 1 2 3</span><br></pre></td></tr></table></figure><ul><li>新建一个<code>PositionOfPlane.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Auther: 桂晨</span></span><br><span class="line"><span class="comment"> * Date: 2018年1月23日00:14:33</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PositionOfPlane</span> </span>&#123;</span><br><span class="line">true<span class="keyword">public</span> <span class="keyword">static</span> String PLANEID; <span class="comment">//无人机编号</span></span><br><span class="line">true<span class="keyword">public</span> <span class="keyword">static</span> String PATH = <span class="string">"input.txt"</span>; <span class="comment">//记录无人机活动信号的文本文件路径</span></span><br><span class="line"></span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">truetrueList&lt;List&lt;Integer&gt;&gt; plane;</span><br><span class="line">truetrue<span class="keyword">try</span> &#123;</span><br><span class="line">truetruetrueplane = ReadFile(PATH);</span><br><span class="line">truetruetrueSystem.out.println(<span class="string">"请输入消息序号(自然数):"</span>);</span><br><span class="line">truetruetrueScanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">truetruetrue<span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">truetruetrueString _id = <span class="string">""</span>;</span><br><span class="line">truetruetrue<span class="keyword">int</span> id;</span><br><span class="line">truetruetrue<span class="comment">//判断输入是不是自然数</span></span><br><span class="line">truetruetrue<span class="keyword">while</span>(flag) &#123;</span><br><span class="line">truetruetruetrue_id = sc.next();</span><br><span class="line">truetruetruetruePattern pattern = Pattern.compile(<span class="string">"[0-9]*"</span>);</span><br><span class="line">truetruetruetrue<span class="keyword">if</span>(pattern.matcher(_id).matches())&#123;</span><br><span class="line">truetruetruetruetrueflag = <span class="keyword">false</span>;</span><br><span class="line">truetruetruetrue&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">truetruetruetruetrueSystem.out.println(<span class="string">"请重新输入"</span>);</span><br><span class="line">truetruetruetrue&#125;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetruetrueid = Integer.valueOf(_id);</span><br><span class="line">truetruetrue<span class="comment">//将输入消息序号id分为三种情况，0，超出数据集，和在数据集中(不为0)</span></span><br><span class="line">truetruetrue<span class="keyword">if</span> (id == <span class="number">0</span>) &#123;</span><br><span class="line">truetruetruetrueSystem.out.println(PLANEID + <span class="string">" "</span> + id + <span class="string">" "</span> + plane.get(<span class="number">0</span>).get(<span class="number">0</span>) + <span class="string">" "</span> + plane.get(<span class="number">0</span>).get(<span class="number">1</span>) + <span class="string">" "</span> + plane.get(<span class="number">0</span>).get(<span class="number">2</span>));</span><br><span class="line">truetruetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span> (id &gt; plane.size() - <span class="number">1</span>) &#123;</span><br><span class="line">truetruetruetrueSystem.out.println(<span class="string">"Cannot find "</span> + id);</span><br><span class="line">truetruetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruetruePrint(id, plane);</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">truetruetrue<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">truetruetruee.printStackTrace();</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">true<span class="comment">//输入消息序号id和信号数据plane，打印结果</span></span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">int</span> id, List&lt;List&lt;Integer&gt;&gt; plane)</span> </span>&#123;</span><br><span class="line">truetrue<span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">truetrue<span class="keyword">int</span> x, y, z, offsetx, offsety, offsetz;</span><br><span class="line">truetruex = plane.get(<span class="number">0</span>).get(<span class="number">0</span>);</span><br><span class="line">truetruey = plane.get(<span class="number">0</span>).get(<span class="number">1</span>);</span><br><span class="line">truetruez = plane.get(<span class="number">0</span>).get(<span class="number">2</span>);</span><br><span class="line">truetrue<span class="keyword">while</span> (num &lt;= id) &#123;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (plane.get(num).size() != <span class="number">6</span></span><br><span class="line">truetruetruetruetrue|| x != plane.get(num).get(<span class="number">0</span>) || y != plane.get(num).get(<span class="number">1</span>) || z != plane.get(num).get(<span class="number">2</span>)) &#123;</span><br><span class="line">truetruetruetrueSystem.out.println(<span class="string">"Error: "</span> + id);</span><br><span class="line">truetruetruetrue<span class="keyword">return</span>;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetruetrueoffsetx = plane.get(num).get(<span class="number">3</span>);</span><br><span class="line">truetruetrueoffsety = plane.get(num).get(<span class="number">4</span>);</span><br><span class="line">truetruetrueoffsetz = plane.get(num).get(<span class="number">5</span>);</span><br><span class="line">truetruetruex += offsetx;</span><br><span class="line">truetruetruey += offsety;</span><br><span class="line">truetruetruez += offsetz;</span><br><span class="line">truetruetruenum++;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrueSystem.out.println(PLANEID + <span class="string">" "</span> + id + <span class="string">" "</span> + x + <span class="string">" "</span> + y + <span class="string">" "</span> + z);</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">true<span class="comment">//使用Scanner类nextLine()方法，读取文件每一行的数据，并将每个数据切分，保存到List&lt;List&lt;&gt;&gt;的嵌套集合(动态二维数组)中</span></span><br><span class="line">true<span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; ReadFile(String path) <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(fis);</span><br><span class="line">        String[] str;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; plane = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            List&lt;Integer&gt; col = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">            str = scanner.nextLine().split(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">                col.add(Integer.parseInt(str[i]));</span><br><span class="line">            &#125;</span><br><span class="line">            PLANEID = str[<span class="number">0</span>];</span><br><span class="line">            plane.add(col);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">        <span class="keyword">return</span> plane;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>先编译生成字节码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -encoding utf-8 PositionOfPlane.java</span><br></pre></td></tr></table></figure><p>然后运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java PositionOfPlane</span><br></pre></td></tr></table></figure><p>然后输入ID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2（或其他数字）</span><br></pre></td></tr></table></figure><h1 id="2017秋季武汉招聘"><a href="#2017秋季武汉招聘" class="headerlink" title="2017秋季武汉招聘"></a>2017秋季武汉招聘</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><p><a href="http://otzlyqzo6.bkt.clouddn.com/作业题_武汉_AOUJYEHN.pdf" target="_blank" rel="noopener">PDF download</a><br><img src="http://pic.yanss.top/tw0001.jpg" alt><br><img src="http://pic.yanss.top/tw0002.jpg" alt><br><img src="http://pic.yanss.top/tw0003.jpg" alt><br><img src="http://pic.yanss.top/tw0004.jpg" alt><br><img src="http://pic.yanss.top/tw0005.jpg" alt></p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>主要是对字符串的切分处理。其中为了调试方便，将控制台输入数据转为json数据，然后再io流和gson包读取</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>下载全部<a href="http://pic.yanss.top/badmintonCourt.zip" target="_blank" rel="noopener">eclipse项目文件</a></p><p>代码ReadJson.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.yanss.badmintonCourt.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadJson</span> </span>&#123;</span><br><span class="line">true<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传入json文件名，解析json数据，将需要的信息保存到一个一维数组str中</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> str</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">true<span class="keyword">public</span> String[] Read(String fileName) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">truetrue<span class="comment">// 创建json解析器</span></span><br><span class="line">truetrueJsonParser parser = <span class="keyword">new</span> JsonParser();</span><br><span class="line">truetrueString[] str;</span><br><span class="line">truetrueJsonObject object = (JsonObject) parser.parse(<span class="keyword">new</span> FileReader(<span class="string">"resource/"</span> + fileName + <span class="string">".json"</span>));</span><br><span class="line">truetrueJsonArray scanIn = object.getAsJsonArray(<span class="string">"scanIn"</span>);</span><br><span class="line">truetruestr = <span class="keyword">new</span> String[scanIn.size()];</span><br><span class="line">truetrue<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; scanIn.size(); i++) &#123;</span><br><span class="line">truetruetrueJsonObject _scanIn = scanIn.get(i).getAsJsonObject();</span><br><span class="line">truetruetruestr[i] = _scanIn.get(<span class="string">"str"</span>).toString().replaceAll(<span class="string">"\""</span>, <span class="string">""</span>);</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="keyword">return</span> str;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码DataUtils.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.yanss.badmintonCourt.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtils</span> </span>&#123;</span><br><span class="line">true<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断日期格式是否合法，合法返回true</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> convertSuccess</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidDate</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">truetrue<span class="keyword">boolean</span> convertSuccess = <span class="keyword">true</span>;</span><br><span class="line">truetrue<span class="comment">// 指定日期格式为四位年/两位月份/两位日期，注意yyyy-MM-dd区分大小写</span></span><br><span class="line">truetrueSimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">truetrue<span class="keyword">try</span> &#123;</span><br><span class="line">truetruetrue<span class="comment">// 设置lenient为false.</span></span><br><span class="line">truetruetrue<span class="comment">// 否则SimpleDateFormat会比较宽松地验证日期，比如2007/02/29会被接受，并转换成2007/03/01</span></span><br><span class="line">truetruetrueformat.setLenient(<span class="keyword">false</span>);</span><br><span class="line">truetruetrueformat.parse(str);</span><br><span class="line">truetrue&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">truetruetrue<span class="comment">// e.printStackTrace();</span></span><br><span class="line">truetruetrue<span class="comment">// 如果throw java.text.ParseException或者NullPointerException，就说明格式不对</span></span><br><span class="line">truetruetrueconvertSuccess = <span class="keyword">false</span>;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="keyword">return</span> convertSuccess;</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">true<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断预订时间是否合法，合法返回相应数据，1表示验证时间通过，2表示时间输入不合法，3表示预订时间和之前预订过的有冲突，4表示取消的订单不存在</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment"> *            预订时间段，如19:00~22:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> convertSuccess</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">isValidTime</span><span class="params">(String[][] str, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">truetrue<span class="keyword">int</span> convertSuccess = <span class="number">1</span>;</span><br><span class="line">truetrueString[] time = str[num][<span class="number">2</span>].split(<span class="string">"~"</span>);</span><br><span class="line">truetrue<span class="keyword">if</span> (Integer.parseInt(time[<span class="number">0</span>].split(<span class="string">":"</span>)[<span class="number">0</span>]) &gt;= Integer.parseInt(time[<span class="number">1</span>].split(<span class="string">":"</span>)[<span class="number">0</span>])) &#123;</span><br><span class="line">truetruetrueconvertSuccess = <span class="number">2</span>;</span><br><span class="line">truetruetruestr[num][<span class="number">5</span>] = <span class="string">"0"</span>;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="keyword">if</span> (!(time[<span class="number">0</span>].split(<span class="string">":"</span>)[<span class="number">1</span>].equals(<span class="string">"00"</span>) &amp;&amp; time[<span class="number">1</span>].split(<span class="string">":"</span>)[<span class="number">1</span>].equals(<span class="string">"00"</span>))) &#123;</span><br><span class="line">truetruetrueconvertSuccess = <span class="number">2</span>;</span><br><span class="line">truetruetruestr[num][<span class="number">5</span>] = <span class="string">"0"</span>;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="keyword">if</span> (str[num][<span class="number">4</span>].equals(<span class="string">" "</span>)) &#123;</span><br><span class="line">truetruetrue<span class="comment">// 输入信息是下订单</span></span><br><span class="line">truetruetrue<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">truetruetruetrue<span class="keyword">if</span> (str[i][<span class="number">1</span>].equals(str[num][<span class="number">1</span>]) &amp;&amp; str[i][<span class="number">3</span>].equals(str[num][<span class="number">3</span>]) &amp;&amp; str[i][<span class="number">4</span>].equals(<span class="string">" "</span>)</span><br><span class="line">truetruetruetruetruetrue&amp;&amp; str[i][<span class="number">5</span>].equals(<span class="string">"1"</span>)) &#123;</span><br><span class="line">truetruetruetruetrue<span class="comment">// 如果预订时间段的起始时间小于之前预订信息的结束时间，或者预订时间段的结束时间大于之前预订信息的起始时间，则冲突</span></span><br><span class="line">truetruetruetruetrue<span class="keyword">if</span> (Integer.parseInt(str[num][<span class="number">2</span>].split(<span class="string">"~"</span>)[<span class="number">0</span>].split(<span class="string">":"</span>)[<span class="number">0</span>]) &lt; Integer</span><br><span class="line">truetruetruetruetruetruetrue.parseInt(str[i][<span class="number">2</span>].split(<span class="string">"~"</span>)[<span class="number">1</span>].split(<span class="string">":"</span>)[<span class="number">0</span>])) &#123;</span><br><span class="line">truetruetruetruetruetrueconvertSuccess = <span class="number">3</span>;</span><br><span class="line">truetruetruetruetruetruestr[num][<span class="number">5</span>] = <span class="string">"0"</span>;</span><br><span class="line"></span><br><span class="line">truetruetruetruetrue&#125;</span><br><span class="line">truetruetruetruetrue<span class="keyword">if</span> (Integer.parseInt(str[num][<span class="number">2</span>].split(<span class="string">"~"</span>)[<span class="number">1</span>].split(<span class="string">":"</span>)[<span class="number">0</span>]) &gt; Integer</span><br><span class="line">truetruetruetruetruetruetrue.parseInt(str[i][<span class="number">2</span>].split(<span class="string">"~"</span>)[<span class="number">0</span>].split(<span class="string">":"</span>)[<span class="number">0</span>])) &#123;</span><br><span class="line">truetruetruetruetruetrueconvertSuccess = <span class="number">3</span>;</span><br><span class="line">truetruetruetruetruetruestr[num][<span class="number">5</span>] = <span class="string">"0"</span>;</span><br><span class="line">truetruetruetruetrue&#125;</span><br><span class="line">truetruetruetrue&#125;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetrue<span class="comment">// 输入信息是取消订单</span></span><br><span class="line">truetruetrue<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">truetruetruetrue<span class="keyword">if</span> (str[i][<span class="number">1</span>].equals(str[num][<span class="number">1</span>]) &amp;&amp; str[i][<span class="number">2</span>].equals(str[num][<span class="number">2</span>]) &amp;&amp; str[i][<span class="number">3</span>].equals(str[num][<span class="number">3</span>])</span><br><span class="line">truetruetruetruetruetrue&amp;&amp; str[i][<span class="number">4</span>].equals(<span class="string">" "</span>) &amp;&amp; str[i][<span class="number">5</span>].equals(<span class="string">"1"</span>)) &#123;</span><br><span class="line">truetruetruetruetrueconvertSuccess = <span class="number">1</span>;</span><br><span class="line">truetruetruetruetruestr[i][<span class="number">5</span>] = <span class="string">"0"</span>;</span><br><span class="line">truetruetruetruetruestr[i][<span class="number">6</span>] = <span class="string">"1"</span>;</span><br><span class="line">truetruetruetruetruestr[num][<span class="number">5</span>] = <span class="string">"0"</span>;</span><br><span class="line">truetruetruetruetrue<span class="keyword">break</span>;</span><br><span class="line">truetruetruetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruetruetruestr[num][<span class="number">5</span>] = <span class="string">"0"</span>;</span><br><span class="line">truetruetruetruetrueconvertSuccess = <span class="number">4</span>;</span><br><span class="line">truetruetruetrue&#125;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="keyword">return</span> convertSuccess;</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">true<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断当前日期是星期几</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pTime 要判断的时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> dayForWeek 判断结果</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Exception</span> 发生异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dayForWeek</span><span class="params">(String pTime)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">truetrueSimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">truetrueCalendar c = Calendar.getInstance();</span><br><span class="line">truetruec.setTime(format.parse(pTime));</span><br><span class="line">truetrue<span class="keyword">int</span> dayForWeek = <span class="number">0</span>;</span><br><span class="line">truetrue<span class="keyword">if</span> (c.get(Calendar.DAY_OF_WEEK) == <span class="number">1</span>) &#123;</span><br><span class="line">truetruetruedayForWeek = <span class="number">7</span>;</span><br><span class="line">truetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruedayForWeek = c.get(Calendar.DAY_OF_WEEK) - <span class="number">1</span>;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="keyword">return</span> dayForWeek;</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码PringBill.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.yanss.badmintonCourt.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintBill</span> </span>&#123;</span><br><span class="line">true<span class="keyword">static</span> <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">true<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印输出账单信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment"> *            保存输入信息的字符串数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> txt</span></span><br><span class="line"><span class="comment"> *            保存输出信息的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> txt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">true<span class="function"><span class="keyword">public</span> String <span class="title">Print</span><span class="params">(String[][] str, String txt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">truetrueSystem.out.println();</span><br><span class="line">truetruetxt += <span class="string">"\r\n"</span>;</span><br><span class="line">truetrueSystem.out.println(<span class="string">"&gt; 收入汇总"</span>);</span><br><span class="line">truetruetxt += <span class="string">"&gt; 收入汇总"</span> + <span class="string">"\r\n"</span>;</span><br><span class="line">truetrueSystem.out.println(<span class="string">"&gt; ---"</span>);</span><br><span class="line">truetruetxt += <span class="string">"&gt; ---"</span> + <span class="string">"\r\n"</span>;</span><br><span class="line">truetrueSystem.out.println(<span class="string">"&gt; 场地:A"</span>);</span><br><span class="line">truetruetxt += <span class="string">"&gt; 场地:A"</span> + <span class="string">"\r\n"</span>;</span><br><span class="line">truetruetxt = Court(<span class="string">"A"</span>, str, txt);</span><br><span class="line">truetrueSystem.out.println(<span class="string">"&gt;"</span>);</span><br><span class="line">truetruetxt += <span class="string">"&gt;"</span> + <span class="string">"\r\n"</span>;</span><br><span class="line">truetrueSystem.out.println(<span class="string">"&gt; 场地:B"</span>);</span><br><span class="line">truetruetxt += <span class="string">"&gt; 场地:B"</span> + <span class="string">"\r\n"</span>;</span><br><span class="line">truetruetxt = Court(<span class="string">"B"</span>, str, txt);</span><br><span class="line">truetrueSystem.out.println(<span class="string">"&gt;"</span>);</span><br><span class="line">truetruetxt += <span class="string">"&gt;"</span> + <span class="string">"\r\n"</span>;</span><br><span class="line">truetrueSystem.out.println(<span class="string">"&gt; 场地:C"</span>);</span><br><span class="line">truetruetxt += <span class="string">"&gt; 场地:C"</span> + <span class="string">"\r\n"</span>;</span><br><span class="line">truetruetxt = Court(<span class="string">"C"</span>, str, txt);</span><br><span class="line">truetrueSystem.out.println(<span class="string">"&gt;"</span>);</span><br><span class="line">truetruetxt += <span class="string">"&gt;"</span> + <span class="string">"\r\n"</span>;</span><br><span class="line">truetrueSystem.out.println(<span class="string">"&gt; 场地:D"</span>);</span><br><span class="line">truetruetxt += <span class="string">"&gt; 场地:D"</span> + <span class="string">"\r\n"</span>;</span><br><span class="line">truetruetxt = Court(<span class="string">"D"</span>, str, txt);</span><br><span class="line">truetrueSystem.out.println(<span class="string">"&gt; ---"</span>);</span><br><span class="line">truetruetxt += <span class="string">"&gt; ---"</span> + <span class="string">"\r\n"</span>;</span><br><span class="line">truetrueSystem.out.println(<span class="string">"&gt; 总计: "</span> + total + <span class="string">" 元"</span>);</span><br><span class="line">truetruetxt += <span class="string">"&gt; 总计: "</span> + total + <span class="string">" 元"</span> + <span class="string">"\r\n"</span>;</span><br><span class="line">truetrue<span class="keyword">return</span> txt;</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">true<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据羽毛球场地输出账单信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment"> *            羽毛球场地，可以为A,B,C,D</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment"> *            保存输入信息的字符串数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> txt</span></span><br><span class="line"><span class="comment"> *            保存输出信息的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> txt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">true<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">Court</span><span class="params">(String type, String[][] str, String txt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">truetrueDateUtils dateUtils = <span class="keyword">new</span> DateUtils();</span><br><span class="line">truetrue<span class="keyword">int</span> money = <span class="number">0</span>;</span><br><span class="line">truetrue<span class="keyword">int</span> subtotal = <span class="number">0</span>;</span><br><span class="line">truetrue<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (str[i][<span class="number">3</span>].equals(type)) &#123;</span><br><span class="line">truetruetruetrue<span class="keyword">int</span> m = Integer.parseInt(str[i][<span class="number">2</span>].split(<span class="string">"~"</span>)[<span class="number">0</span>].split(<span class="string">":"</span>)[<span class="number">0</span>]);</span><br><span class="line">truetruetruetrue<span class="keyword">int</span> n = Integer.parseInt(str[i][<span class="number">2</span>].split(<span class="string">"~"</span>)[<span class="number">1</span>].split(<span class="string">":"</span>)[<span class="number">0</span>]);</span><br><span class="line">truetruetruetrue<span class="keyword">if</span> (str[i][<span class="number">5</span>].equals(<span class="string">"1"</span>)) &#123;</span><br><span class="line">truetruetruetruetruemoney = Bill(dateUtils.dayForWeek(str[i][<span class="number">1</span>]), m, n);</span><br><span class="line">truetruetruetruetruesubtotal += money;</span><br><span class="line">truetruetruetruetruetotal += subtotal;</span><br><span class="line">truetruetruetruetrueSystem.out.println(<span class="string">"&gt; "</span> + str[i][<span class="number">1</span>] + <span class="string">" "</span> + str[i][<span class="number">2</span>] + <span class="string">" "</span> + money + <span class="string">" 元"</span>);</span><br><span class="line">truetruetruetruetruetxt += <span class="string">"&gt; "</span> + str[i][<span class="number">1</span>] + <span class="string">" "</span> + str[i][<span class="number">2</span>] + <span class="string">" "</span> + money + <span class="string">" 元"</span> + <span class="string">"\r\n"</span>;</span><br><span class="line"></span><br><span class="line">truetruetruetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i][<span class="number">5</span>].equals(<span class="string">"0"</span>) &amp;&amp; str[i][<span class="number">6</span>].equals(<span class="string">"1"</span>)) &#123;</span><br><span class="line">truetruetruetruetruemoney = Bill(dateUtils.dayForWeek(str[i][<span class="number">1</span>]), m, n) / <span class="number">2</span>;</span><br><span class="line">truetruetruetruetruesubtotal += money;</span><br><span class="line">truetruetruetruetrueSystem.out.println(<span class="string">"&gt; "</span> + str[i][<span class="number">1</span>] + <span class="string">" "</span> + str[i][<span class="number">2</span>] + <span class="string">" 违约金 "</span> + money + <span class="string">" 元"</span>);</span><br><span class="line">truetruetruetruetruetxt += <span class="string">"&gt; "</span> + str[i][<span class="number">1</span>] + <span class="string">" "</span> + str[i][<span class="number">2</span>] + <span class="string">" 违约金 "</span> + money + <span class="string">" 元"</span> + <span class="string">"\r\n"</span>;</span><br><span class="line">truetruetruetrue&#125;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrueSystem.out.println(<span class="string">"&gt; 小计: "</span> + subtotal + <span class="string">" 元"</span>);</span><br><span class="line">truetruetxt += <span class="string">"&gt; 小计: "</span> + subtotal + <span class="string">" 元"</span> + <span class="string">"\r\n"</span>;</span><br><span class="line">truetrue<span class="keyword">return</span> txt;</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">true<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据预订时间，求出消费金额。 首先判断星期几，再对开始时间进行划分，然后对结束时间进行划分，最后根据单位时长金额和时长求出消费金额</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> day</span></span><br><span class="line"><span class="comment"> *            日期对应的星期几</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> timeBegin</span></span><br><span class="line"><span class="comment"> *            预订时间的起始时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> timeOver</span></span><br><span class="line"><span class="comment"> *            预订时间的结束时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> money 消费金额</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">true<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Bill</span><span class="params">(<span class="keyword">int</span> day, <span class="keyword">int</span> timeBegin, <span class="keyword">int</span> timeOver)</span> </span>&#123;</span><br><span class="line">truetrue<span class="keyword">int</span> money = <span class="number">0</span>;</span><br><span class="line">truetrue<span class="keyword">if</span> (day &gt;= <span class="number">1</span> &amp;&amp; day &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (timeBegin &lt; <span class="number">12</span>) &#123;</span><br><span class="line">truetruetruetrue<span class="keyword">if</span> (timeOver &lt; <span class="number">12</span>) &#123;</span><br><span class="line">truetruetruetruetruemoney = <span class="number">30</span> * (timeOver - timeBegin);</span><br><span class="line">truetruetruetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeOver &gt;= <span class="number">12</span> &amp;&amp; timeOver &lt; <span class="number">18</span>) &#123;</span><br><span class="line">truetruetruetruetruemoney = <span class="number">30</span> * (<span class="number">12</span> - timeBegin) + <span class="number">50</span> * (timeOver - <span class="number">12</span>);</span><br><span class="line">truetruetruetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeOver &gt;= <span class="number">18</span> &amp;&amp; timeOver &lt; <span class="number">20</span>) &#123;</span><br><span class="line">truetruetruetruetruemoney = <span class="number">30</span> * (<span class="number">12</span> - timeBegin) + <span class="number">50</span> * (<span class="number">18</span> - <span class="number">12</span>) + <span class="number">80</span> * (timeOver - <span class="number">18</span>);</span><br><span class="line">truetruetruetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruetruetruemoney = <span class="number">30</span> * (<span class="number">12</span> - timeBegin) + <span class="number">50</span> * (<span class="number">18</span> - <span class="number">12</span>) + <span class="number">80</span> * (<span class="number">20</span> - <span class="number">18</span>) + <span class="number">60</span> * (timeOver - <span class="number">20</span>);</span><br><span class="line">truetruetruetrue&#125;</span><br><span class="line">truetruetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeBegin &gt;= <span class="number">12</span> &amp;&amp; timeBegin &lt; <span class="number">18</span>) &#123;</span><br><span class="line">truetruetruetrue<span class="keyword">if</span> (timeOver &lt; <span class="number">18</span>) &#123;</span><br><span class="line">truetruetruetruetruemoney = <span class="number">50</span> * (timeOver - timeBegin);</span><br><span class="line">truetruetruetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeOver &gt;= <span class="number">18</span> &amp;&amp; timeOver &lt; <span class="number">20</span>) &#123;</span><br><span class="line">truetruetruetruetruemoney = <span class="number">50</span> * (<span class="number">18</span> - timeBegin) + <span class="number">80</span> * (timeOver - <span class="number">18</span>);</span><br><span class="line">truetruetruetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruetruetruemoney = <span class="number">50</span> * (<span class="number">18</span> - timeBegin) + <span class="number">80</span> * (<span class="number">20</span> - <span class="number">18</span>) + <span class="number">60</span> * (timeOver - <span class="number">20</span>);</span><br><span class="line">truetruetruetrue&#125;</span><br><span class="line">truetruetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeBegin &gt;= <span class="number">18</span> &amp;&amp; timeBegin &lt; <span class="number">20</span>) &#123;</span><br><span class="line">truetruetruetrue<span class="keyword">if</span> (timeOver &lt;= <span class="number">20</span>) &#123;</span><br><span class="line">truetruetruetruetruemoney = <span class="number">80</span> * (timeOver - timeBegin);</span><br><span class="line">truetruetruetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruetruetruemoney = <span class="number">80</span> * (<span class="number">20</span> - timeBegin) + <span class="number">60</span> * (timeOver - <span class="number">20</span>);</span><br><span class="line">truetruetruetrue&#125;</span><br><span class="line">truetruetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruetruemoney = <span class="number">60</span> * (timeOver - timeBegin);</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (timeBegin &lt; <span class="number">12</span>) &#123;</span><br><span class="line">truetruetruetrue<span class="keyword">if</span> (timeOver &lt; <span class="number">12</span>) &#123;</span><br><span class="line">truetruetruetruetruemoney = <span class="number">40</span> * (timeOver - timeBegin);</span><br><span class="line">truetruetruetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeOver &gt;= <span class="number">12</span> &amp;&amp; timeOver &lt; <span class="number">18</span>) &#123;</span><br><span class="line">truetruetruetruetruemoney = <span class="number">40</span> * (<span class="number">12</span> - timeBegin) + <span class="number">50</span> * (timeOver - <span class="number">12</span>);</span><br><span class="line">truetruetruetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruetruetruemoney = <span class="number">40</span> * (<span class="number">12</span> - timeBegin) + <span class="number">50</span> * (<span class="number">18</span> - <span class="number">12</span>) + <span class="number">60</span> * (timeOver - <span class="number">18</span>);</span><br><span class="line">truetruetruetrue&#125;</span><br><span class="line">truetruetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeBegin &gt;= <span class="number">12</span> &amp;&amp; timeBegin &lt; <span class="number">18</span>) &#123;</span><br><span class="line">truetruetruetrue<span class="keyword">if</span> (timeOver &lt; <span class="number">18</span>) &#123;</span><br><span class="line">truetruetruetruetruemoney = <span class="number">50</span> * (timeOver - timeBegin);</span><br><span class="line">truetruetruetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruetruetruemoney = <span class="number">50</span> * (<span class="number">18</span> - timeBegin) + <span class="number">60</span> * (timeOver - <span class="number">18</span>);</span><br><span class="line">truetruetruetrue&#125;</span><br><span class="line">truetruetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruetruemoney = <span class="number">60</span> * (timeOver - timeBegin);</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="keyword">return</span> money;</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码TextToFile.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.yanss.badmintonCourt.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextToFile</span> </span>&#123;</span><br><span class="line">true<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传入文件名以及字符串, 将字符串信息保存到文件中</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> strFilename</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> strBuffer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toFile</span><span class="params">(<span class="keyword">final</span> String strFilename, <span class="keyword">final</span> String strBuffer)</span> </span>&#123;</span><br><span class="line">truetrue<span class="keyword">try</span> &#123;</span><br><span class="line">truetruetrue<span class="comment">// 创建文件对象</span></span><br><span class="line">truetruetrueFile fileText = <span class="keyword">new</span> File(strFilename);</span><br><span class="line">truetruetrue<span class="comment">// 向文件写入对象写入信息</span></span><br><span class="line">truetruetrueFileWriter fileWriter = <span class="keyword">new</span> FileWriter(fileText);</span><br><span class="line"></span><br><span class="line">truetruetrue<span class="comment">// 写文件</span></span><br><span class="line">truetruetruefileWriter.write(strBuffer);</span><br><span class="line">truetruetrue<span class="comment">// 关闭</span></span><br><span class="line">truetruetruefileWriter.close();</span><br><span class="line">truetrue&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">truetruetrue<span class="comment">//</span></span><br><span class="line">truetruetruee.printStackTrace();</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码ChargeSolution.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.yanss.badmintonCourt.charge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pers.yanss.badmintonCourt.utils.DateUtils;</span><br><span class="line"><span class="keyword">import</span> pers.yanss.badmintonCourt.utils.PrintBill;</span><br><span class="line"><span class="keyword">import</span> pers.yanss.badmintonCourt.utils.ReadJson;</span><br><span class="line"><span class="keyword">import</span> pers.yanss.badmintonCourt.utils.TextToFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChargeSolution</span> </span>&#123;</span><br><span class="line">true<span class="keyword">static</span> String FILE = <span class="string">"data2"</span>;<span class="comment">// 输入信息储存到了json文件中，这里只需改变json文件名即可改变输入信息</span></span><br><span class="line">true<span class="keyword">static</span> String txt = <span class="string">""</span>;<span class="comment">// 输出信息保存到字符串txt中，最后将txt字符串信息写保存到一个文本文件中</span></span><br><span class="line"></span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">truetrueReadJson json = <span class="keyword">new</span> ReadJson();</span><br><span class="line">truetrueString[] data = json.Read(FILE);</span><br><span class="line">truetrueString[][] str = <span class="keyword">new</span> String[data.length][<span class="number">7</span>];<span class="comment">// data每个元素以"</span></span><br><span class="line">truetruetruetruetruetruetruetruetruetruetruetruetrue<span class="comment">// "切分后最大长度为5，加上星期几和两个标志位后长度为7</span></span><br><span class="line">truetrueDateUtils date = <span class="keyword">new</span> DateUtils();</span><br><span class="line">truetruestr = transArray(str, data);</span><br><span class="line">truetrue<span class="comment">// System.out.println(date.dayForWeek("2017-09-10"));</span></span><br><span class="line">truetrue<span class="comment">// System.out.println(str[2].split(" ")[0]);</span></span><br><span class="line">truetrue<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">truetruetrueSystem.out.println(data[i]);</span><br><span class="line">truetruetruetxt += data[i] + <span class="string">"\r\n"</span>;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (str[i][<span class="number">0</span>].startsWith(<span class="string">"U"</span>)) &#123;</span><br><span class="line">truetruetruetrue<span class="keyword">if</span> (date.isValidDate(str[i][<span class="number">1</span>])) &#123;</span><br><span class="line">truetruetruetruetrue<span class="keyword">if</span> (date.isValidTime(str, i) == <span class="number">1</span>) &#123;</span><br><span class="line">truetruetruetruetruetrue<span class="keyword">if</span> (str[i][<span class="number">3</span>].equals(<span class="string">"A"</span>) || str[i][<span class="number">3</span>].equals(<span class="string">"B"</span>) || str[i][<span class="number">3</span>].equals(<span class="string">"C"</span>)</span><br><span class="line">truetruetruetruetruetruetruetrue|| str[i][<span class="number">3</span>].equals(<span class="string">"D"</span>)) &#123;</span><br><span class="line">truetruetruetruetruetruetrue<span class="keyword">if</span> (str[i][<span class="number">4</span>].equals(<span class="string">"C"</span>) || str[i][<span class="number">4</span>].equals(<span class="string">" "</span>)) &#123;</span><br><span class="line">truetruetruetruetruetruetruetrueSystem.out.println(<span class="string">"&gt; Success: the booking is accepted!"</span>);</span><br><span class="line">truetruetruetruetruetruetruetruetxt += <span class="string">"&gt; Success: the booking is accepted!"</span> + <span class="string">"\r\n"</span>;</span><br><span class="line">truetruetruetruetruetruetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruetruetruetruetruetrueprintInvalid();</span><br><span class="line">truetruetruetruetruetruetrue&#125;</span><br><span class="line">truetruetruetruetruetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruetruetruetruetrueprintInvalid();</span><br><span class="line">truetruetruetruetruetrue&#125;</span><br><span class="line">truetruetruetruetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span> (date.isValidTime(str, i) == <span class="number">2</span>) &#123;</span><br><span class="line">truetruetruetruetruetrueprintInvalid();</span><br><span class="line">truetruetruetruetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span> (date.isValidTime(str, i) == <span class="number">3</span>) &#123;</span><br><span class="line">truetruetruetruetruetrueSystem.out.println(<span class="string">"&gt; Error: the booking conflicts with existing bookings!"</span>);</span><br><span class="line">truetruetruetruetruetruetxt += <span class="string">"&gt; Error: the booking conflicts with existing bookings!"</span> + <span class="string">"\r\n"</span>;</span><br><span class="line">truetruetruetruetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruetruetruetrueSystem.out.println(<span class="string">"&gt; Error: the booking being cancelled does not exist!"</span>);</span><br><span class="line">truetruetruetruetruetruetxt += <span class="string">"&gt; Error: the booking being cancelled does not exist!"</span> + <span class="string">"\r\n"</span>;</span><br><span class="line">truetruetruetruetrue&#125;</span><br><span class="line">truetruetruetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruetruetruestr[i][<span class="number">5</span>] = <span class="string">"0"</span>;</span><br><span class="line">truetruetruetruetrueprintInvalid();</span><br><span class="line">truetruetruetrue&#125;</span><br><span class="line">truetruetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruetruestr[i][<span class="number">5</span>] = <span class="string">"0"</span>;</span><br><span class="line">truetruetruetrueprintInvalid();</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetruePrintBill printBill = <span class="keyword">new</span> PrintBill();</span><br><span class="line">truetruetxt = printBill.Print(str, txt);</span><br><span class="line">truetrueTextToFile textToFile = <span class="keyword">new</span> TextToFile();</span><br><span class="line">truetruetextToFile.toFile(<span class="string">"bill.txt"</span>, txt);</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">true<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印不合法的输出语句</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">true<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printInvalid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">truetrueSystem.out.println(<span class="string">"&gt; Error: the booking is invalid!"</span>);</span><br><span class="line">truetruetxt += <span class="string">"&gt; Error: the booking is invalid!"</span> + <span class="string">"\r\n"</span>;</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">true<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将一维数组每个元素以" "切分，转化为二维数组,并在每行后面加上两个标志位 第一个标志位，1表示成功预订，0表示预订失败或取消预订</span></span><br><span class="line"><span class="comment"> * 第二个标志位，1表示取消订单成功，0表示没有取消订单</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment"> *            二维数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment"> *            一维数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> str 转化后的二维数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">true<span class="keyword">private</span> <span class="keyword">static</span> String[][] transArray(String[][] str, String[] data) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">truetrue<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">truetruetrue<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; str[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">truetruetruetrue<span class="keyword">if</span> (data[i].split(<span class="string">" "</span>).length &gt; j) &#123;</span><br><span class="line">truetruetruetruetruestr[i][j] = data[i].split(<span class="string">" "</span>)[j];</span><br><span class="line">truetruetruetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">4</span>) &#123;</span><br><span class="line">truetruetruetruetruestr[i][j] = <span class="string">" "</span>;</span><br><span class="line">truetruetruetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">5</span>) &#123;</span><br><span class="line">truetruetruetruetruestr[i][j] = <span class="string">"1"</span>;</span><br><span class="line">truetruetruetrue&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetruetruetruetruestr[i][j] = <span class="string">"0"</span>;</span><br><span class="line">truetruetruetrue&#125;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="keyword">return</span> str;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br></p><p id="div-border-top-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下2017-2018年的三次ThoughtWorks笔试的题目和我的解法。&lt;br&gt;
    
    </summary>
    
    
      <category term="offer" scheme="https://foreti.me/tags/offer/"/>
    
  </entry>
  
  <entry>
    <title>MacOS tomcat启动80端口</title>
    <link href="https://foreti.me/2018/07/18/macos-tomcat-80/"/>
    <id>https://foreti.me/2018/07/18/macos-tomcat-80/</id>
    <published>2018-07-18T12:16:02.000Z</published>
    <updated>2019-03-23T02:48:17.703Z</updated>
    
    <content type="html"><![CDATA[<p>Mac OS上非root用户是不允许启动小于1024的端口，所以在mac上使用IDE开发，比如在Eclipse或者Intellij中，启动服务用80端口，会报错Permission Denied。<br><a id="more"></a><br>可以通过修改Tomcat的用户为root来解决，但是更简单的是设置一个端口监听转发，将其他端口比如8080转发到80，这样在浏览器中输入地址就不用写端口号了。</p><p>命令：</p><ol><li><code>sudo vim /etc/pf.conf</code></li><li>在<code>rdr-anchor &quot;com.apple/*&quot;</code>这一行后面添加<code>rdr on lo0 inet proto tcp from any to 127.0.0.1 port 80 -&gt; 127.0.0.1 port 8080</code>，保存退出</li><li><code>sudo pfctl -f /etc/pf.conf</code></li><li><code>sudo pfctl -e</code></li></ol><p>这样就完成了，如果想关闭转发，输入<code>sudo pfctl -d</code>。</p><p>重启后转发需要重新开启生效，即输入3，4命令</p><p>如果要重启后自动生效，首先关闭系统完整性保护机制，需重启到安全模式在终端中执行下述命令关闭文件系统保护<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csrutil enable --without fs</span><br></pre></td></tr></table></figure></p><p>然后<code>sudo vim /System/Library/LaunchDaemons/com.apple.pfctl.plist</code>, 添加一行 <code>&lt;string&gt;-e&lt;/string&gt;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;string&gt;pfctl&lt;/string&gt;</span><br><span class="line">&lt;string&gt;-e&lt;/string&gt;</span><br><span class="line">&lt;string&gt;-f&lt;/string&gt;</span><br><span class="line">&lt;string&gt;/etc/pf.conf&lt;/string&gt;</span><br></pre></td></tr></table></figure></p><p>保存退出。</p><p><br></p><p id="div-border-top-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac OS上非root用户是不允许启动小于1024的端口，所以在mac上使用IDE开发，比如在Eclipse或者Intellij中，启动服务用80端口，会报错Permission Denied。&lt;br&gt;
    
    </summary>
    
    
      <category term="mac" scheme="https://foreti.me/tags/mac/"/>
    
      <category term="tomcat" scheme="https://foreti.me/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>spring自动注入静态属性</title>
    <link href="https://foreti.me/2018/07/17/spring-autowired-static/"/>
    <id>https://foreti.me/2018/07/17/spring-autowired-static/</id>
    <published>2018-07-17T11:59:35.000Z</published>
    <updated>2019-03-23T02:48:17.703Z</updated>
    
    <content type="html"><![CDATA[<p>stackoverflow问题<a href="https://stackoverflow.com/questions/1018797/can-you-use-autowired-with-static-fields" target="_blank" rel="noopener">Can you use @Autowired with static fields?</a><br><a id="more"></a></p><p>Spring中有时需要在静态方法中使用自动注入的属性，例如Service或者Mapper，而@autiwored是不能注解静态属性的，这是因为静态属性是类的属性，而spring注入是对象层面的依赖注入，所以spring是不支持注入静态属性的，这时候如果非得用，就要曲线救国了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Component(&quot;NewClass&quot;)</span><br><span class="line">public class NewClass&#123;</span><br><span class="line">    private static SomeThing someThing;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    public void setSomeThing(SomeThing someThing)&#123;</span><br><span class="line">        NewClass.someThing = someThing;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br></p><p id="div-border-top-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;stackoverflow问题&lt;a href=&quot;https://stackoverflow.com/questions/1018797/can-you-use-autowired-with-static-fields&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Can you use @Autowired with static fields?&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="spring" scheme="https://foreti.me/tags/spring/"/>
    
      <category term="autowired" scheme="https://foreti.me/tags/autowired/"/>
    
  </entry>
  
  <entry>
    <title>centos搭建Jupyter Notebook</title>
    <link href="https://foreti.me/2018/07/06/centos-jupyter-notebook/"/>
    <id>https://foreti.me/2018/07/06/centos-jupyter-notebook/</id>
    <published>2018-07-06T12:56:58.000Z</published>
    <updated>2019-03-23T02:48:17.687Z</updated>
    
    <content type="html"><![CDATA[<p>centos搭建Jupyter Notebook, 添加多语言支持(R,Ruby,Octave,JS,Java,C++).</p><a id="more"></a><p><img src="http://pic.yanss.top/centos-jn-overview.png" alt></p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>主要熟悉常用命令，<br><code>wget [url]</code>下载，</p><p><code>tar -xvf</code>解压<code>.tar.gz</code>，</p><p>使用yum包管理工具<code>yum search xx</code>搜索, <code>yum install xx</code>下载。</p><p><code>whereis</code>，<code>which</code>查找文件， <code>find [path] -name xxx</code>查找指定目录下的文件</p><p><code>ps -ef | grep jupyter</code> 查看jupyter运行的pid</p><h1 id="安装jupyter"><a href="#安装jupyter" class="headerlink" title="安装jupyter"></a>安装jupyter</h1><ol><li><p>下载Anaconda最新版本，省事。在官网找到下载链接，python3.6版本，然后</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.anaconda.com/archive/Anaconda3-5.2.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p> 然后运行脚本</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash Anaconda3-3-5.2.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p> 中间需要确定时确定即可，等待安装完成，会自动写入环境变量。</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda --version</span><br><span class="line">jupyter --version</span><br></pre></td></tr></table></figure></li><li><p>然后按照官网步骤，设置config</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br><span class="line"><span class="comment"># 会生成config文件为 .jupyter/jupyter_notebook_config.py</span></span><br></pre></td></tr></table></figure><p> 设置密码</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from notebook.auth import passwd</span><br><span class="line">passwd()</span><br><span class="line"># 会生成类似 sha1:xxxxxxxxxxxxxxxxxxx， 需要记一下</span><br></pre></td></tr></table></figure><p> 然后编辑 config文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure><p> 修改这些行，去掉注释，填相应值。其他选项也可以自己设置</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.password = &apos;sha1:xxxxxxxxxxxxxxxxxxx&apos;</span><br><span class="line">c.NotebookApp.ip = &apos;*&apos;</span><br><span class="line">c.NotebookApp.open_browser = False</span><br><span class="line">c.NotebookApp.port = 8888</span><br></pre></td></tr></table></figure></li><li><p>开放和重启防火墙<br> centos7：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8888/tcp --permanent # 永久开放8888端口</span><br><span class="line">firewall-cmd --reload # 重启firewall</span><br><span class="line">firewall-cmd --list-ports # 查看开放端口</span><br></pre></td></tr></table></figure><p> centos6：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport 8888 -j ACCEPT # 开放8888端口</span><br><span class="line">/etc/rc.d/init.d/iptables save # 保存</span><br><span class="line">service iptables status # 查看防火墙状态</span><br></pre></td></tr></table></figure></li><li><p>启动server，<code>jupyter notebook</code>。如果需要后台启动，运行<br><code>nohup jupyter notebook &gt; jupyter.log 2&gt;&amp;1 &amp;</code></p></li></ol><h1 id="安装其他kernel"><a href="#安装其他kernel" class="headerlink" title="安装其他kernel"></a>安装其他kernel</h1><p>主要根据 [Jupyter kernels wiki](<a href="https://github.com/jupyter/jupyter/wiki/Jupyter-kernels）" target="_blank" rel="noopener">https://github.com/jupyter/jupyter/wiki/Jupyter-kernels）</a></p><h2 id="py2-7"><a href="#py2-7" class="headerlink" title="py2.7"></a>py2.7</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n ipykernel_py2 python=2 ipykernel</span><br><span class="line">source activate ipykernel_py2</span><br><span class="line">python -m ipykernel install --user</span><br></pre></td></tr></table></figure><h2 id="ruby"><a href="#ruby" class="headerlink" title="ruby"></a>ruby</h2><p><a href="https://github.com/SciRuby/iruby" target="_blank" rel="noopener">iruby</a>, ruby需要版本大于2.1</p><ol><li><p>准备工作，安装环境。<br>yum 下载的可能不是最新的ruby，所以用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y git-core ruby-devel ruby zlib zlib-devel gcc-c++ patch readline readline-devel libyaml-devel libffi-devel openssl-devel make</span><br></pre></td></tr></table></figure></li><li><p>ruby kernel需要ZeroMQ</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install zeromq-devel zeromq czmq</span><br><span class="line">gem install cztop rbczmq ffi_rzmq</span><br></pre></td></tr></table></figure></li><li><p>安装iruby kernel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gem install cztop iruby</span><br><span class="line">iruby register --force</span><br></pre></td></tr></table></figure></li></ol><h2 id="R"><a href="#R" class="headerlink" title="R"></a>R</h2><p>按照<a href="https://irkernel.github.io/" target="_blank" rel="noopener">irkernel</a>的安装步骤，<br>或者直接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c r r-essentials</span><br></pre></td></tr></table></figure></p><h2 id="octave"><a href="#octave" class="headerlink" title="octave"></a>octave</h2><p>pip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install octave_kernel</span><br></pre></td></tr></table></figure><p>或者conda</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels conda-forge</span><br><span class="line">conda install octave_kernel</span><br></pre></td></tr></table></figure><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><p>首先安装nodejs和npm，然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g ijavascript</span><br><span class="line">ijsinstall</span><br></pre></td></tr></table></figure><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><p><a href="https://github.com/SpencerPark/IJava" target="_blank" rel="noopener">IJava</a> ,需要安装java 9或10，设置好环境变量，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk-10.0.1/</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/SpencerPark/IJava.git --depth 1</span><br><span class="line">cd IJava/</span><br><span class="line">chmod u+x gradlew</span><br><span class="line">./gradlew installKernel</span><br></pre></td></tr></table></figure><h2 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h2><p><a href="https://github.com/QuantStack/xeus-cling" target="_blank" rel="noopener">xues-cling</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n cling</span><br><span class="line">source activate cling</span><br><span class="line">conda install xeus-cling notebook -c QuantStack -c conda-forge</span><br></pre></td></tr></table></figure><p>有个问题是需要切换到cling环境启动jupyter才会有c++的kernel，找了一下cling 的kernel文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find anaconda3/envs/cling -name kernels</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">anaconda3/envs/cling/lib/python3.6/site-packages/notebook/services/kernels</span><br><span class="line">anaconda3/envs/cling/lib/python3.6/site-packages/notebook/static/services/kernels</span><br><span class="line">anaconda3/envs/cling/share/jupyter/kernels</span><br></pre></td></tr></table></figure><p>进入到<code>/share/jupyter/kernels</code>，发现了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd anaconda3/envs/cling/share/jupyter/kernels</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">total 16</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jul  5 14:48 python3</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jul  5 14:48 xeus-cling-cpp11</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jul  5 14:48 xeus-cling-cpp14</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jul  5 14:48 xeus-cling-cpp17</span><br></pre></td></tr></table></figure><p>现在，看一下jupyter kernel的文件目录在哪</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter kernelspec list</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Available kernels:</span><br><span class="line">  java                /root/.ipython/kernels/java</span><br><span class="line">  ruby                /root/.ipython/kernels/ruby</span><br><span class="line">  ir                  /root/.local/share/jupyter/kernels/ir</span><br><span class="line">  javascript          /root/.local/share/jupyter/kernels/javascript</span><br><span class="line">  python2             /root/.local/share/jupyter/kernels/python2</span><br><span class="line">  python3             /root/.local/share/jupyter/kernels/python3</span><br><span class="line">  octave              /root/anaconda3/share/jupyter/kernels/octave</span><br><span class="line">  bash                /usr/local/share/jupyter/kernels/bash</span><br></pre></td></tr></table></figure><p>确定是<code>.ipython/kernels/</code>的这一个。</p><p>将<code>xeus-cling-cpp11  xeus-cling-cpp14  xeus-cling-cpp17</code>这三个文件夹复制到<code>.ipython/kernels/</code>下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp xeus-cling-cpp11 .ipython/kernels/</span><br><span class="line">cp xeus-cling-cpp14 .ipython/kernels/</span><br><span class="line">cp xeus-cling-cpp17 .ipython/kernels/</span><br></pre></td></tr></table></figure><p>完成。</p><p><br></p><p id="div-border-top-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;centos搭建Jupyter Notebook, 添加多语言支持(R,Ruby,Octave,JS,Java,C++).&lt;/p&gt;
    
    </summary>
    
    
      <category term="jupyter" scheme="https://foreti.me/tags/jupyter/"/>
    
  </entry>
  
  <entry>
    <title>Java主线程等待子线程的几种方法</title>
    <link href="https://foreti.me/2018/04/04/java-concurrent-join/"/>
    <id>https://foreti.me/2018/04/04/java-concurrent-join/</id>
    <published>2018-04-04T01:47:35.000Z</published>
    <updated>2019-03-23T02:48:17.703Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇关于Java中的多线程下，让主线程等待子线程执行的几种方法。</p><a id="more"></a><p>在很多时候, 都需要在主线程中等待所有线程执行完毕, 再进行其他的操作. 在这种情况下, 显然如下的写法是不行的.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.getName() + <span class="string">" start"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.getName() + <span class="string">" end"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"runtime: "</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这时候的输出是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">runtime: 0</span><br><span class="line">Thread-0 start</span><br><span class="line">Thread-0 end</span><br></pre></td></tr></table></figure></p><p>这时候需要阻塞主线程, 让其等待子线程执行完毕, 方法有几种, 下面开始介绍.</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>先创建一个类实现Runnable接口.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" start"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" end"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Thread-join"><a href="#Thread-join" class="headerlink" title="Thread.join()"></a>Thread.join()</h2><h3 id="等待一个子线程"><a href="#等待一个子线程" class="headerlink" title="等待一个子线程"></a>等待一个子线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        MyRunnable runnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable, <span class="string">"thread-0"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            thread.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"runtime: "</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="等待多个子线程"><a href="#等待多个子线程" class="headerlink" title="等待多个子线程"></a>等待多个子线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            MyRunnable runnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(runnable, <span class="string">"thread-"</span> + i);</span><br><span class="line">            thread.start();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                thread.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"runtime: "</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出, 显然是串行执行的5个线程.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">thread-0 start</span><br><span class="line">thread-0 end</span><br><span class="line">thread-1 start</span><br><span class="line">thread-1 end</span><br><span class="line">thread-2 start</span><br><span class="line">thread-2 end</span><br><span class="line">thread-3 start</span><br><span class="line">thread-3 end</span><br><span class="line">thread-4 start</span><br><span class="line">thread-4 end</span><br><span class="line">runtime: 25004</span><br></pre></td></tr></table></figure></p><p>如果想异步并发执行多个子线程, 可在循环体外join<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        List&lt;Thread&gt; list = <span class="keyword">new</span> ArrayList&lt;Thread&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            MyRunnable runnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(runnable, <span class="string">"thread-"</span> + i);</span><br><span class="line">            thread.start();</span><br><span class="line">            list.add(thread);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(Thread thread : list) &#123;</span><br><span class="line">                thread.join();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"runtime: "</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">thread-1 start</span><br><span class="line">thread-3 start</span><br><span class="line">thread-4 start</span><br><span class="line">thread-0 start</span><br><span class="line">thread-2 start</span><br><span class="line">thread-1 end</span><br><span class="line">thread-3 end</span><br><span class="line">thread-4 end</span><br><span class="line">thread-2 end</span><br><span class="line">thread-0 end</span><br><span class="line">runtime: 5004</span><br></pre></td></tr></table></figure></p><p>由于每个线程都会抢占cpu执行, 执行的顺序是随机的, 所以每次输出都会不同.</p><h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>CountDownLatch是java.util.concurrent下的一个类, 作用是允许一个或多个线程等待其他线程执行完毕.</p><blockquote><p>A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes.</p></blockquote><p>CountDownLatch源码如下.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Synchronization control For CountDownLatch. The details are not </span></span><br><span class="line"><span class="comment">    * writted. please read the official docs.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructs a CountDownLatch initialized with the given count.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CountDownLatch</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"count &lt; 0"</span>);</span><br><span class="line">        <span class="keyword">this</span>.sync = <span class="keyword">new</span> Sync(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Causes the current thread to wait until the latch has counted down to</span></span><br><span class="line"><span class="comment">     * zero, unless the thread is interrupted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Causes the current thread to wait until the latch has counted down to</span></span><br><span class="line"><span class="comment">     * zero, unless the thread is interrupted, or the specified waiting time </span></span><br><span class="line"><span class="comment">     * elapses.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">await</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireSharedNanos(<span class="number">1</span>, unit.toNanos(timeout));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Decrements the count of the latch, releasing all waiting threads if the</span></span><br><span class="line"><span class="comment">     * count reaches zero.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.releaseShared(<span class="number">1</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getCount(); <span class="comment">//Returns the current count.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString() + <span class="string">"[Count = "</span> + sync.getCount() + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有一个构造器和几个方法, 构造时传参用于定义CountDownLatch大小, 且不可修改. 具体应用时, 每次执行一个线程后, 就countdown()一次. 在所有线程开始执行后, 立即await()等待, 直到所有线程执行完, 再执行await()后的代码段.</p><p>使用CountDownLatch实现主线程等待子线程如下.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" start"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        latch.countDown();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" end"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; .start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            latch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"runtime: "</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Thread-<span class="number">2</span> start</span><br><span class="line">Thread-<span class="number">3</span> start</span><br><span class="line">Thread-<span class="number">0</span> start</span><br><span class="line">Thread-<span class="number">1</span> start</span><br><span class="line">Thread-<span class="number">4</span> start</span><br><span class="line">Thread-<span class="number">2</span> end</span><br><span class="line">Thread-<span class="number">3</span> end</span><br><span class="line">Thread-<span class="number">0</span> end</span><br><span class="line">Thread-<span class="number">1</span> end</span><br><span class="line">Thread-<span class="number">4</span> end</span><br><span class="line">runtime: <span class="number">5004</span></span><br></pre></td></tr></table></figure></p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>java.util.concurrent.ExecutorService是java线程池的一个接口, 通过ExecutorService实现主线程等待子线程的方法很多, 比如submit()的返回Future对象判断提交的任务是否执行完, 或者在线程池中使用CountDownLatch, 或者用isTerminated()或awiatTermination(long, TimeUnit)判断线程池shutdown后所有任务是否完成. 具体可以查一下ExecutorService的文档</p><p>这里, 讲一个最简单的isTerminated().<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            MyRunnable runnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">            pool.execute(runnable);</span><br><span class="line">        &#125;</span><br><span class="line">        pool.shutdown();</span><br><span class="line">        <span class="keyword">while</span>(!pool.isTerminated());</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"runtime: "</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pool-1-thread-4 start</span><br><span class="line">pool-1-thread-2 start</span><br><span class="line">pool-1-thread-3 start</span><br><span class="line">pool-1-thread-5 start</span><br><span class="line">pool-1-thread-1 start</span><br><span class="line">pool-1-thread-5 end</span><br><span class="line">pool-1-thread-4 end</span><br><span class="line">pool-1-thread-2 end</span><br><span class="line">pool-1-thread-1 end</span><br><span class="line">pool-1-thread-3 end</span><br><span class="line">runtime: 5003</span><br></pre></td></tr></table></figure></p><p>或者用awaitTermination(long, TimeUnit)更好, long传一个长整型, TimeUnit传时间单位, 常用的有MILLISECONDS, SECONDS, MINUTES等等, long和TimeUnit组合表示超时时间. 当线程池所有任务执行完,返回true. 未执行完前超时返回false. 如下.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            MyRunnable runnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">            pool.execute(runnable);</span><br><span class="line">        &#125;</span><br><span class="line">        pool.shutdown();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//可以让while循环每2s执行一次, 而不是一直循环消耗性能</span></span><br><span class="line">            <span class="keyword">while</span>(!pool.awaitTermination(<span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"runtime: "</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pool-1-thread-2 start</span><br><span class="line">pool-1-thread-5 start</span><br><span class="line">pool-1-thread-1 start</span><br><span class="line">pool-1-thread-4 start</span><br><span class="line">pool-1-thread-3 start</span><br><span class="line">pool-1-thread-2 end</span><br><span class="line">pool-1-thread-5 end</span><br><span class="line">pool-1-thread-1 end</span><br><span class="line">pool-1-thread-3 end</span><br><span class="line">pool-1-thread-4 end</span><br><span class="line">runtime: 5003</span><br></pre></td></tr></table></figure></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>CountDownLatch相对于join()来说, 在复杂场景下更能体现出优势. 比如需要主线程在其他线程执行一半或执行到某个阶段时开始, 这种情况是join()没法做到的.</p><p><br></p><p id="div-border-top-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇关于Java中的多线程下，让主线程等待子线程执行的几种方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="concurrent" scheme="https://foreti.me/tags/concurrent/"/>
    
  </entry>
  
  <entry>
    <title>springboot的Mapper与数据库表字段映射</title>
    <link href="https://foreti.me/2018/03/13/springboot-mapper/"/>
    <id>https://foreti.me/2018/03/13/springboot-mapper/</id>
    <published>2018-03-13T01:35:32.000Z</published>
    <updated>2019-03-23T02:48:17.703Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲述Spring Boot如何通过mybatis-spring-boot-starter集成Mybatis，并且在Mapper中如何映射Model属性和表的字段。</p><a id="more"></a><p>下面给出一个简单的示例。</p><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p>首先要引入mybatis的依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="table-user"><a href="#table-user" class="headerlink" title="table_user"></a>table_user</h2><p>数据库建表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`tb_user`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`created_by`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> ( <span class="string">`id`</span> )</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure></p><h2 id="User"><a href="#User" class="headerlink" title="User"></a>User</h2><p>实体类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String createdBy;</span><br><span class="line">    <span class="comment">//省略了setters &amp; getters</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="UserMapper"><a href="#UserMapper" class="headerlink" title="UserMapper"></a>UserMapper</h2><p>Mapper接口中可以通过注解的形式直接写sql，比将sql分离到xml中的方式更方便<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from tb_user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">selectById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from tb_user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into tb_user(id, name, created_by) values(#&#123;id&#125;, #&#123;name&#125;, #&#123;createdBy&#125;)"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(id = <span class="string">"user"</span>, </span><br><span class="line">             value = &#123;</span><br><span class="line">                        <span class="meta">@Result</span>(column = <span class="string">"id"</span>,property = <span class="string">"id"</span>),</span><br><span class="line">                        <span class="meta">@Result</span>(column = <span class="string">"name"</span>,property = <span class="string">"name"</span>),</span><br><span class="line">                        <span class="meta">@Result</span>(column = <span class="string">"created_by"</span>,property = <span class="string">"createdBy"</span>)</span><br><span class="line">             &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">//@Options(useGeneratedKeys = true, keyProperty = "id", keyColumn = "id")</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update tb_user set id = #&#123;id&#125;, name = #&#123;name&#125;, created_by = #&#123;createdBy&#125;"</span>)</span><br><span class="line">    <span class="meta">@ResultMap</span>(value = <span class="string">"user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from tb_user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>@Select, @Insert, @Update, @Delete显然就是sql语句的注解了.</li><li>@Param是根据别名取参数的.</li><li>@Results和@Result配合使用, 就可以将实体类属性和表字段进行一一映射.<ul><li>@Results的参数id表示这个映射的别名, 可以配合@ResultMap使用.</li><li>@Result的参数column表示表字段名, property表示实体属性名.</li></ul></li><li>@Options可以在插入时返回主键值, 在这里没什么用. 一般用于在主键id自增的情况下, 插入操作不定义id, 可以在插入数据库表后返回该条插入信息的主键id.</li></ul><h2 id="UserService"><a href="#UserService" class="headerlink" title="UserService"></a>UserService</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScriptService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        User user = userMapper.selectById(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userMapper.selectAll();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userMapper.insertUser(user);</span><br><span class="line">        retyrn user.getId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id = user.getId();</span><br><span class="line">        user check = userMapper.selectById(id);</span><br><span class="line">        <span class="keyword">if</span> (check == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        userMapper.updateUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        user check = userMapper.selectById(id);</span><br><span class="line">        <span class="keyword">if</span> (check == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        userMapper.deleteById(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a>UserController</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/selectById/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  userService.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/selectAll"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  userService.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/insertUser"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.insertUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/updateUser"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/deleteById/&#123;id&#125;"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p id="div-border-top-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲述Spring Boot如何通过mybatis-spring-boot-starter集成Mybatis，并且在Mapper中如何映射Model属性和表的字段。&lt;/p&gt;
    
    </summary>
    
    
      <category term="springboot" scheme="https://foreti.me/tags/springboot/"/>
    
      <category term="ResultMap" scheme="https://foreti.me/tags/ResultMap/"/>
    
  </entry>
  
  <entry>
    <title>Thymeleaf的简单使用</title>
    <link href="https://foreti.me/2018/03/12/thymeleaf-start/"/>
    <id>https://foreti.me/2018/03/12/thymeleaf-start/</id>
    <published>2018-03-12T12:09:44.000Z</published>
    <updated>2019-03-23T02:48:17.718Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.thymeleaf.org/" target="_blank" rel="noopener">Thymeleaf</a>是一款用于渲染XML/XHTML/HTML5内容的Java模板引擎库，可以通过HTML的标签属性渲染标签内容。<br><a id="more"></a></p><p>举个例子，<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;home.welcome&#125;"</span>&gt;</span>Welcome to our grocery store!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里的<code>th:text</code>的内容就是需要后台渲染的，假如没有后台渲染，html会将无法识别的部分直接过滤掉，那么输出就是<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> &gt;</span>Welcome to our grocery store!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>假如后台传过来的<code>home.welcome</code>的值是<code>Welcome, Yanss!</code>，那么输出就是<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> &gt;</span>Welcome, Yanss!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这就是Thymeleaf的用法和作用了，其他的地方也差不多。</p><p>记录几个常用的语法。</p><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;http://www.thymeleaf.org&#125;"</span>&gt;</span>Thymeleaf<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果需要传参<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;http://www.thymeleaf.org(id=$&#123;id&#125;)&#125;"</span>&gt;</span>Thymeleaf<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;http://www.thymeleaf.org(id=$&#123;id&#125;,name=$&#123;name&#125;)&#125;"</span>&gt;</span>Thymeleaf<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"'Welcome to our application, ' + $&#123;user.name&#125; + '!'"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="条件选择式"><a href="#条件选择式" class="headerlink" title="条件选择式"></a>条件选择式</h2><p>类似于java的三元表达式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"true?'真':'假'"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="循环loop"><a href="#循环loop" class="headerlink" title="循环loop"></a>循环loop</h2><ul><li><p>创建表格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>NAME<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>PRICE<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>IN STOCK<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"prod : $&#123;prods&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.name&#125;"</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.price&#125;"</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建下拉框</p><ul><li><p>在项目启动访问index页面的时候，把要需要的列表集合存到session作用域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"index"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">    List&lt;Classes&gt; list = userService.findAllClasses();</span><br><span class="line">    session.setAttribute(<span class="string">"list"</span>,list);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>前台取值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"className"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>请选择班级<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:each</span>=<span class="string">"list:$&#123;session.list&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$$&#123;list.cid&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;list.cname&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>遍历Map和List</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">th:each</span>=<span class="string">"entry : $&#123;map&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;entry.key&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">th:each</span>=<span class="string">"entry : $&#123;map&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;entry.value&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span> &gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:each</span>=<span class="string">"ele : $&#123;list&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;ele&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>遍历List<map></map></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">th:each</span>=<span class="string">"lm : $&#123;listmap&#125;"</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">"entry : $&#123;lm&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;entry.key&#125;"</span> &gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">"entry : $&#123;lm&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;entry.value&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="if-unless-switch-case"><a href="#if-unless-switch-case" class="headerlink" title="if/unless, switch/case"></a>if/unless, switch/case</h2><p>下面<code>&lt;a&gt;</code>标签只有在<code>th:if</code>中条件成立时才显示，<code>th:unless</code>只有不成立时才显示<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">th:if</span>=<span class="string">$&#123;session.user</span> != <span class="string">null&#125;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>switch/case也很好理解，默认属性default可以用*表示<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;user.role&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>User is an administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"#&#123;roles.manager&#125;"</span>&gt;</span>User is a manager<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>User is some other thing<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h2><p>举个例子, 当我想在一个两层的标签中同时渲染外层和内层的属性, 可能会出现下面这种错误.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;Hello.world&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">"$&#123;user == 'yanss'&#125;"</span>&gt;</span>yanss<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这种写法等同于<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;Hello.world&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>因为外层的th:text会将内层的覆盖掉, 如果要同时渲染, 可以使用inline属性, 也可以将内外层隔离开.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:inline</span>=<span class="string">"text"</span>&gt;</span>[[$&#123;Hello.world&#125;]]<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">"$&#123;user == 'yanss'&#125;"</span>&gt;</span>yanss<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- or --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;Hello.world&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">"$&#123;user == 'yanss'&#125;"</span>&gt;</span>yanss<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><br></p><p id="div-border-top-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.thymeleaf.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Thymeleaf&lt;/a&gt;是一款用于渲染XML/XHTML/HTML5内容的Java模板引擎库，可以通过HTML的标签属性渲染标签内容。&lt;br&gt;
    
    </summary>
    
    
      <category term="thymeleaf" scheme="https://foreti.me/tags/thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>Win10推荐软件</title>
    <link href="https://foreti.me/2018/02/25/win10-tool/"/>
    <id>https://foreti.me/2018/02/25/win10-tool/</id>
    <published>2018-02-25T04:44:05.000Z</published>
    <updated>2019-03-23T02:48:17.718Z</updated>
    
    <content type="html"><![CDATA[<p>这是我在日常使用windows 10的一些常用软件。<a id="more"></a><br><img src="http://pic.yanss.top/2019/20190310185152.png" alt></p><ul><li><p><del><a href="http://1218.io/" target="_blank" rel="noopener">Seer</a> 空格预览</del> <a href="https://pooi.moe/QuickLook/" target="_blank" rel="noopener">QuickLook</a>更好用</p></li><li><p><del><a href="http://www.listary.com/download" target="_blank" rel="noopener">Listary</a> 类Spotlight</del></p><ul><li>设置页，先激活</li><li>关键字Web<br><img src="http://pic.yanss.top/listary1.png" alt="listary1"><ul><li>百度：<code>http://www.baidu.com/s?wd={query}</code></li><li>淘宝：<code>https://s.taobao.com/search?q={query}</code></li><li>京东：<code>https://search.jd.com/Search?keyword={query}&amp;enc=utf-8&amp;qrst=1&amp;rt=1&amp;stop=1&amp;vt=2&amp;wq={query}&amp;psort=3&amp;wtype=1&amp;stock=1&amp;click=2</code></li><li>必应词典：<code>http://cn.bing.com/dict/search?q={query}</code></li></ul></li><li>关键字自定义<ul><li>run：<img src="http://pic.yanss.top/listary3.png" alt="listary3"></li><li>新建文件：<img src="http://pic.yanss.top/listary4.png" alt="listary4"></li><li>GoldenDict：<img src="http://pic.yanss.top/listary2.png" alt="listary2"></li></ul></li></ul></li><li><p>发现<a href="http://www.wox.one/" target="_blank" rel="noopener">Wox</a>更好用，配置更少更方便，搭配Everything也是一样的快</p></li><li><p><a href="http://ditto-cp.sourceforge.net/" target="_blank" rel="noopener">Ditto</a> 剪贴板工具</p></li><li><p><a href="https://www.bandisoft.com/bandizip/cn/" target="_blank" rel="noopener">Bandizip</a> 比7Zzip好</p></li><li><p><a href="https://www.bandisoft.com/honeyview/cn/" target="_blank" rel="noopener">Honeyview</a> 看图超快</p></li><li><p><a href="https://potplayer.daum.net/" target="_blank" rel="noopener">potplayer</a> 视频播放器</p><ul><li>加皮肤Zune<img src="http://pic.yanss.top/potplayer+zune.png" alt="potplayer+zune"></li></ul></li><li><p><a href="http://goldendict.org/" target="_blank" rel="noopener">GoldenDict</a> 词典，配合Listary</p></li><li><p><a href="https://pc.qq.com/detail/0/detail_12860.html" target="_blank" rel="noopener">迅雷极速版</a> 另一<a href="https://www.zhihu.com/question/52853014" target="_blank" rel="noopener">地址</a></p></li><li><p><a href="https://www.freedownloadmanager.org/" target="_blank" rel="noopener">FDM</a> 下载工具</p></li><li><p><a href="https://www.sumatrapdfreader.org/" target="_blank" rel="noopener">SumatraPDF</a></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">//高级设置</span><br><span class="line"># For documentation, see http://www.sumatrapdfreader.org/settings3.2.html</span><br><span class="line"></span><br><span class="line">MainWindowBackground = #80fff200</span><br><span class="line">EscToExit = false</span><br><span class="line">ReuseInstance = false</span><br><span class="line">UseSysColors = false</span><br><span class="line">RestoreSession = true</span><br><span class="line"></span><br><span class="line">FixedPageUI [</span><br><span class="line">trueTextColor = #000000</span><br><span class="line">trueBackgroundColor = #ffffff</span><br><span class="line">trueSelectionColor = #f5fc0c</span><br><span class="line">trueWindowMargin = 2 4 2 4</span><br><span class="line">truePageSpacing = 4 4</span><br><span class="line">]</span><br><span class="line">EbookUI [</span><br><span class="line">trueFontName = 微软雅黑</span><br><span class="line">trueFontSize = 12.5</span><br><span class="line">trueTextColor = #5f4b32</span><br><span class="line">trueBackgroundColor = #fbf0d9</span><br><span class="line">trueUseFixedPageUI = false</span><br><span class="line">trueGradientColors = #7aa1d2 #dbd4b4 #cc95c0</span><br><span class="line">]</span><br><span class="line">ComicBookUI [</span><br><span class="line">trueWindowMargin = 0 0 0 0</span><br><span class="line">truePageSpacing = 4 4</span><br><span class="line">trueCbxMangaMode = false</span><br><span class="line">]</span><br><span class="line">ChmUI [</span><br><span class="line">trueUseFixedPageUI = false</span><br><span class="line">]</span><br><span class="line">ExternalViewers [</span><br><span class="line">]</span><br><span class="line">ShowMenubar = true</span><br><span class="line">ReloadModifiedDocuments = true</span><br><span class="line">FullPathInTitle = false</span><br><span class="line">ZoomLevels = 8.33 12.5 18 25 33.33 50 66.67 75 100 125 150 200 300 400 600 800 1000 1200 1600 2000 2400 3200 4800 6400</span><br><span class="line">ZoomIncrement = 0</span><br><span class="line"></span><br><span class="line">PrinterDefaults [</span><br><span class="line">truePrintScale = shrink</span><br><span class="line">]</span><br><span class="line">ForwardSearch [</span><br><span class="line">trueHighlightOffset = 0</span><br><span class="line">trueHighlightWidth = 15</span><br><span class="line">trueHighlightColor = #6581ff</span><br><span class="line">trueHighlightPermanent = false</span><br><span class="line">]</span><br><span class="line">CustomScreenDPI = 0</span><br><span class="line"></span><br><span class="line">RememberStatePerDocument = true</span><br><span class="line">UiLanguage = cn</span><br><span class="line">ShowToolbar = true</span><br><span class="line">ShowFavorites = false</span><br><span class="line">AssociateSilently = false</span><br><span class="line">CheckForUpdates = true</span><br><span class="line">RememberOpenedFiles = true</span><br><span class="line">EnableTeXEnhancements = false</span><br><span class="line">DefaultDisplayMode = single page</span><br><span class="line">DefaultZoom = fit page</span><br><span class="line">WindowState = 1</span><br><span class="line">WindowPos = 695 80 970 1010</span><br><span class="line">ShowToc = true</span><br><span class="line">SidebarDx = 196</span><br><span class="line">TocDy = 0</span><br><span class="line">ShowStartPage = true</span><br><span class="line">UseTabs = true</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.iobit.com/en/products.php" target="_blank" rel="noopener">IObit</a> 卸载工具</p></li><li><p><a href="https://www.ccleaner.com/ccleaner" target="_blank" rel="noopener">CCleaner</a> 清理工具</p></li><li><p><a href="https://anaconda.org/" target="_blank" rel="noopener">Anaconda</a> python包管理</p></li><li><p><a href="https://www.sublimetext.com/" target="_blank" rel="noopener">Sublime</a> 插件<a href="http://pic.yanss.top/Sublime插件.7z" target="_blank" rel="noopener">下载</a></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//OmniMarkupPreviewer快捷键设置</span><br><span class="line">[</span><br><span class="line">true&#123;</span><br><span class="line">        &quot;keys&quot;: [&quot;alt+p&quot;], &quot;command&quot;: &quot;omni_markup_preview&quot;,</span><br><span class="line">        &quot;context&quot;: [&#123;&quot;key&quot;: &quot;omnimarkup_is_enabled&quot;, &quot;operator&quot;: &quot;equal&quot;, &quot;operand&quot;: &quot;&quot;&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p><del>ShadowsocksR 下载<a href="https://dl.onetive.com/" target="_blank" rel="noopener">地址一</a> <a href="http://shiyu.pro/archives/ssr-apk.html" target="_blank" rel="noopener">地址二</a> <a href="https://github.com/shadowsocksrr/shadowsocksr" target="_blank" rel="noopener">github</a></del></p></li><li><p>ShadowSocks, github开源，可以找到各平台的应用</p></li><li><p>自己搭建vps <a href="http://shiyu.pro/archives/shadowsocks.html" target="_blank" rel="noopener">方案</a></p></li></ul><p><br></p><p id="div-border-top-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我在日常使用windows 10的一些常用软件。
    
    </summary>
    
    
      <category term="win10" scheme="https://foreti.me/tags/win10/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop入门</title>
    <link href="https://foreti.me/2018/02/10/hadoop-start/"/>
    <id>https://foreti.me/2018/02/10/hadoop-start/</id>
    <published>2018-02-10T07:18:05.000Z</published>
    <updated>2019-03-23T02:48:17.703Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇初学Hadoop时应该浏览的博客，受18年实习时的mentor推荐，我读了Understanding Hadoop Clusters and the Network一文，并在这里翻译一遍。<br><a id="more"></a></p><h1 id="Understanding-Hadoop-Clusters-and-the-Network"><a href="#Understanding-Hadoop-Clusters-and-the-Network" class="headerlink" title="Understanding Hadoop Clusters and the Network"></a>Understanding Hadoop Clusters and the Network</h1><p>Author: Brad Hedlund<br><br>Link: <a href="http://bradhedlund.com/2011/09/10/understanding-hadoop-clusters-and-the-network/" target="_blank" rel="noopener">original text</a><br><br>Translator: Yanss</p><p>This article is Part 1 in series that will take a closer look at the architecture and methods of a Hadoop cluster, and how it relates to the network and server infrastructure. The content presented here is largely based on academic work and conversations I’ve had with customers running real production clusters. If you run production Hadoop clusters in your data center, I’m hoping you’ll provide your valuable insight in the comments below. Subsequent articles to this will cover the server and network architecture options in closer detail. Before we do that though, lets start by learning some of the basics about how a Hadoop cluster works. OK, let’s get started!</p><p>本文是系列的第1部分，将带你详细了解Hadoop集群的架构和方法，以及它如何将网络和服务器基础设施相关联。这里介绍的内容主要是基于学术研究和我与在实际产品中运行集群的客户的交流。如果你在你的数据中心中运行Hadoop集群生产，我期待你在下面的评论中提供有价值的见解。接下来的文章将会包含服务器和网络结构的详细细节。然而在此之前，让我了解一些Hadoop集群工作的基础。<br><img src="http://pic.yanss.top/Hadoop-Server-Roles.png" alt="Hadoop-Server-Roles"></p><p>The three major categories of machine roles in a Hadoop deployment are Client machines, Masters nodes, and Slave nodes. The Master nodes oversee the two key functional pieces that make up Hadoop: storing lots of data (HDFS), and running parallel computations on all that data (Map Reduce). The Name Node oversees and coordinates the data storage function (HDFS), while the Job Tracker oversees and coordinates the parallel processing of data using Map Reduce. Slave Nodes make up the vast majority of machines and do all the dirty work of storing the data and running the computations. Each slave runs both a Data Node and Task Tracker daemon that communicate with and receive instructions from their master nodes. The Task Tracker daemon is a slave to the Job Tracker, the Data Node daemon a slave to the Name Node.</p><p>Hadoop部署的三个主要分类分别是Client machines、Masters nodes和Slave nodes。主节点监督两个重要的功能块形成Hadoop：存储大量数据(HDFS)，在所有数据上并行计算(Map Reduce)。Name Node监督协调数据存储功能(HDFS)，同时Job Tracker监督协调使用Map Reduce进行数据的并行处理。Slave Nodes形成大多数的机构，做着所有的存储数据和运行计算的脏活。每个slave同时运行着Data Node和Task Tracker的后台程序——用以传递和接收来自他们的master nodes的命令。Task Tracker后台程序是Job Tracker的slave，Data node后台程序是Name Node的slave。</p><p>Client machines have Hadoop installed with all the cluster settings, but are neither a Master or a Slave. Instead, the role of the Client machine is to load data into the cluster, submit Map Reduce jobs describing how that data should be processed, and then retrieve or view the results of the job when its finished. In smaller clusters (~40 nodes) you may have a single physical server playing multiple roles, such as both Job Tracker and Name Node. With medium to large clusters you will often have each role operating on a single server machine.</p><p>Client machines的Hadoop安装了所有的集群设置，但不包含Master或Slave。相应的，Client machine的作用是加载数据到集群，提交Map Reduce工作，描述数据应该怎么处理，然后在公众完成时取回或查看结果。在小一些的集群（约40个节点）中，你可能只有一个实体服务器运行多任务，例如Job Tracker和Name Node一样。在中大型集群你可能会在单个服务器中进行单个任务运转。</p><p>In real production clusters there is no server virtualization, no hypervisor layer. That would only amount to unnecessary overhead impeding performance. Hadoop runs best on Linux machines, working directly with the underlying hardware. That said, Hadoop does work in a virtual machine. That’s a great way to learn and get Hadoop up and running fast and cheap. I have a 6-node cluster up and running in VMware Workstation on my Windows 7 laptop.</p><p>在实际生产集群中没有服务器虚拟化，没有虚拟机监视器。那只会产生大量不必要的性能开支。Hadoop在Linux机器上运行得最好，直接在底层硬件上工作。也就是说，Hadoop在虚拟机上工作。那是了解和搭建Hadoop的好办法，并且运行的又快又便宜。我有一个6节点的集群，运行在我的Windows 7笔记本的VMware工作台上。</p><hr><p><img src="http://pic.yanss.top/Hadoop-Cluster.png" alt="Hadoop-Cluster"></p><p>This is the typical architecture of a Hadoop cluster. You will have rack servers (not blades) populated in racks connected to a top of rack switch usually with 1 or 2 GE boned links. 10GE nodes are uncommon but gaining interest as machines continue to get more dense with CPU cores and disk drives. The rack switch has uplinks connected to another tier of switches connecting all the other racks with uniform bandwidth, forming the cluster. The majority of the servers will be Slave nodes with lots of local disk storage and moderate amounts of CPU and DRAM. Some of the machines will be Master nodes that might have a slightly different configuration favoring more DRAM and CPU, less local storage. In this post, we are not going to discuss various detailed network design options. Let’s save that for another discussion (stay tuned). First, lets understand how this application works…</p><p>这是一个Hadoop集群的典型结构。你将使用机架服务器(不是刀锋服务器)，搭建在机架中，连接一个顶部机架开关，通常使用1或2 GE(Gigabit Ethernet千兆以太网)。10 GE节点是不常有的，但当机器使用CPU核心和磁盘驱动获取更大的密度时收益更多。机架开关上行传输被连接到连接所有其他相同带宽机架的另一层开关，构成集群。大多数服务器是Slave nodes，使用大量的本地磁盘存储和中量的CPU和DRAM。一些机器是Master nodes，可能有轻微不同的配置，使用更多的DRAM和CPU，较少的本地存储。在这片文章中，我们不讨论许多详细的网络设计选择，让我们将它保留到另一个讨论(在调试中)中。首先，让我们理解这个应用怎么工作的。</p><hr><p><img src="http://pic.yanss.top/Workflow.png" alt="Workflow"></p><p>Why did Hadoop come to exist? What problem does it solve? Simply put, businesses and governments have a tremendous amount of data that needs to be analyzed and processed very quickly. If I can chop that huge chunk of data into small chunks and spread it out over many machines, and have all those machines processes their portion of the data in parallel – I can get answers extremely fast – and that, in a nutshell, is what Hadoop does. In our simple example, we’ll have a huge data file containing emails sent to the customer service department. I want a quick snapshot to see how many times the word “Refund” was typed by my customers. This might help me to anticipate the demand on our returns and exchanges department, and staff it appropriately. It’s a simple word count exercise. The Client will load the data into the cluster (File.txt), submit a job describing how to analyze that data (word count), the cluster will store the results in a new file (Results.txt), and the Client will read the results file.</p><p>Hadoop为何诞生？它解决了什么问题？简言之，商业和政府有一个极大量的数据需要非常快地分析和处理。如果我可以分离这个巨大的数据到很多小的部分，铺开到大量的机器中，让这些机器并行处理它们各自的那一部分——我就可以极快的获取结果——这就是Hadoop做的事情。在我们的简单例子中，我们将用一个巨大的数据文件，它包含了发送到客户服务部门的邮件。我想要一个数据快照，来查看单词“Refund”被客户输入了多少次。这将有助于我预测退还和交换部门的需求，并且合理地安排职员。这是一个简单的词条计数训练。Clients将会加载数据到集群(File.txt)，提交一个工作描述，如何分析数据(单词计数)，集群会存储结果到一个新的文件(Results.txt)，然后Clients会读取结果文件。</p><hr><p><img src="http://pic.yanss.top/Writing-Files-to-HDFS.png" alt="Writing-Files-to-HDFS"></p><p>Your Hadoop cluster is useless until it has data, so we’ll begin by loading our huge File.txt into the cluster for processing. The goal here is fast parallel processing of lots of data. To accomplish that I need as many machines as possible working on this data all at once. To that end, the Client is going to break the data file into smaller “Blocks”, and place those blocks on different machines throughout the cluster. The more blocks I have, the more machines that will be able to work on this data in parallel. At the same time, these machines may be prone to failure, so I want to insure that every block of data is on multiple machines at once to avoid data loss. So each block will be replicated in the cluster as its loaded. The standard setting for Hadoop is to have (3) copies of each block in the cluster. This can be configured with the <strong>dfs.replication</strong> parameter in the file <strong>hdfs-site.xml</strong>.</p><p>你的Hadoop集群直到有数据才有用，所以我们开始于加载超大的File.txt到集群中处理。这里的目标是快速并行处理大量数据。为此我需要尽可能多的机器同时处理这些数据。在那结束后，Client将会打断这个数据文件为许多小的块，将这些块放到遍及集群的不同的机器上。分成的块越多，能并行工作的机器就越多。在同一时间，这些机器可能容易失败，所以为了避免数据丢失，我会确信每个数据块在多台机器上存在。所以每个块会在加载到集群时复制。Hadoop的标准设置是集群中每个块有3个复制。这个可以在hdfs-site.xml文件的dfs.replication参数中设置。</p><p>The Client breaks File.txt into (3) Blocks. For each block, the Client consults the Name Node (usually TCP 9000) and receives a list of (3) Data Nodes that should have a copy of this block. The Client then writes the block directly to the Data Node (usually TCP 50010). The receiving Data Node replicates the block to other Data Nodes, and the cycle repeats for the remaining blocks. The Name Node is not in the data path. The Name Node only provides the map of where data is and where data should go in the cluster (file system metadata).</p><p>Client将File.txt拆分为3个块。对每个块，Client查看Name Node(通常用TCP 9000)并接收一个3个Data Nodes的list，每个Data Node都是一个块的复制。Client将块直接写入到Data Node(通常用TCP 50010)。收到的Data Node将块复制到其他Data Nodes，剩下的块也循环这个重复过程。Name Node不是数据路径。在集群中(文件系统云数据)Name Node只提供数据的位置和数据应该去哪。</p><hr><p><img src="http://pic.yanss.top/Hadoop-Rack-Awareness.png" alt="Hadoop-Rack-Awareness"></p><p>Hadoop has the concept of “Rack Awareness”. As the Hadoop administrator you can <strong>manually</strong> define the rack number of each slave Data Node in your cluster. Why would you go through the trouble of doing this? There are two key reasons for this: Data loss prevention, and network performance. Remember that each block of data will be replicated to multiple machines to prevent the failure of one machine from losing all copies of data. Wouldn’t it be unfortunate if all copies of data happened to be located on machines in the same rack, and that rack experiences a failure? Such as a switch failure or power failure. That would be a mess. So to avoid this, somebody needs to know where Data Nodes are located in the network topology and use that information to make an intelligent decision about where data replicas should exist in the cluster. That “somebody” is the Name Node.</p><p>Hadoop有“机架感知”的概念。作为Hadoop管理员，你可以手动定义集群中每个slave Data Noded的机架数量。为什么你要做这个麻烦的事情呢？有两个关键原因：防止数据丢失和网络性能。记住每个块的数据需要复制到多个机器以防止一个机器失败是丢失所有的数据。如果所有的数据复制碰巧位于同意机架的机器上，并且机架发生失败，会发生这样的事情吗？比如一个开关失败或者是供电问题。那将会一团糟。所以为了避免这样，“某物”需要知道网络拓扑中Data Nodes在哪，以此做一个关于数据复制品应该存放在集群何处的智能的决定。这个“某物”是Name Node。</p><p>There is also an assumption that two machines in the same rack have more bandwidth and lower latency between each other than two machines in two different racks. This is true most of the time. The rack switch uplink bandwidth is usually (but not always) less than its downlink bandwidth. Furthermore, in-rack latency is usually lower than cross-rack latency (but not always). If at least one of those two basic assumptions are true, wouldn’t it be cool if Hadoop can use the same Rack Awareness that protects data to also optimally place work streams in the cluster, improving network performance? Well, it does! Cool, right?</p><p>有一个假设关于在同一机架的两个机器之间比起不同机架的两个机器有更多的带宽和更低的等待时间。大多是时候这是正确的。机架开关的上行带宽通常(不总是)比下行带宽小。而且，在机架内的等待时间通常比机架见的等待时间低(不总是)。如果这两个基础假设中至少一个是对的，如果Hadoop能用同一个机架感知，保护数据到工作流也就是集群中最适宜的位置，提高网络性能，不会更好吗？当然会。</p><p>What is <strong>NOT</strong> cool about Rack Awareness at this point is the <a href="http://developer.yahoo.com/hadoop/tutorial/module2.html#rack" target="_blank" rel="noopener">manual work required to define it the first time</a>, continually update it, and keep the information accurate. If the rack switch could auto-magically provide the Name Node with the list of Data Nodes it has, that would be cool. Or vice versa, if the Data Nodes could auto-magically tell the Name Node what switch they’re connected to, that would be cool too.</p><p>在这一点关于机架感知不好的地方是，<a href="http://developer.yahoo.com/hadoop/tutorial/module2.html#rack" target="_blank" rel="noopener">manual work required to define it the first time</a>，持续的更新它，保持信息准确。如果机架可以自动提供Data Nodes list的Name Node，那将会很好。反过来也是，如果Data Nodes可以自动告诉Name Node它们连接的什么开关，也会很好。</p><p>Even more interesting would be a <a href="http://www.bradhedlund.com/2011/04/21/data-center-scale-openflow-sdn/" target="_blank" rel="noopener">OpenFlow network</a>, where the Name Node could query the OpenFlow controller about a Node’s location in the topology.</p><p>甚至更有趣的是一个<a href="http://www.bradhedlund.com/2011/04/21/data-center-scale-openflow-sdn/" target="_blank" rel="noopener">OpenFlow network</a>，Name Node可以在哪查询OpenFlow控制器关于一个Node的拓扑位置。</p><hr><p><img src="http://pic.yanss.top/Preparing-HDFS-Writes.png" alt="Preparing-HDFS-Writes"></p><p>The Client is ready to load File.txt into the cluster and breaks it up into blocks, starting with Block A. The Client consults the Name Node that it wants to write File.txt, gets permission from the Name Node, and receives a list of (3) Data Nodes for each block, a unique list for each block. The Name Node used its Rack Awareness data to influence the decision of which Data Nodes to provide in these lists. The key rule is that <strong>for every block of data, two copies will exist in one rack, another copy in a different rack.</strong> So the list provided to the Client will follow this rule.</p><p>Client准备好加载文件到集群中，将它打断到不同的块，开始块A。Client查询Name Node，想写入File.txt，从Name Node获取许可，接收一个包含每个块的Data Node的list，一个包含每个块独有的list。Name Node用它的机架感知数据去影响这些list中提供哪个Data Nodes的决定。重要规则是<strong>对数据的每个块，两个复制存在一个机架中，另一个复制在其他机架中</strong>。所以这个list提供Client将遵循这个规则。</p><p>Before the Client writes “Block A” of File.txt to the cluster it wants to know that all Data Nodes which are expected to have a copy of this block are ready to receive it. It picks the first Data Node in the list for Block A (Data Node 1), opens a TCP 50010 connection and says, “Hey, get ready to receive a block, and here’s a list of (2) Data Nodes, Data Node 5 and Data Node 6. Go make sure they’re ready to receive this block too.” Data Node 1 then opens a TCP connection to Data Node 5 and says, “Hey, get ready to receive a block, and go make sure Data Node 6 is ready is receive this block too.” Data Node 5 will then ask Data Node 6, “Hey, are you ready to receive a block?”</p><p>在Client写入块到File.txt之前，它想知道所有的Data Nodes哪个期望准备接收一个这个块的复制。它在list中为块A挑选第一个Data Node(Data Node 1)，打开TCP 50010连接，然后说，“嘿，准备好接收一个块，这是两个Data Node的list，Data Node 5和Data Node 6。去确信它们也准备好接收这个块。”然后Data Node 1打开一个TCP连接到Data Node 5然后说，“嘿，准备好接收一个块，去确信Data Node 6也准备好接收这个块。”Data Node 5将问Data Node 6，“嘿，你准备好接收一个块了吗？”</p><p>The acknowledgments of readiness come back on the same TCP pipeline, until the initial Data Node 1 sends a “Ready” message back to the Client. At this point the Client is ready to begin writing block data into the cluster.</p><p>准备就绪的确认通知在同一TCP管道返回，直到初始的Data Node 1发送一个“Ready”信息给Client。这样，Client就准备好开始写入块数据到集群中。</p><hr><p><img src="http://pic.yanss.top/HDFS-Pipeline-Write.png" alt="HDFS-Pipeline-Write"></p><p>As data for each block is written into the cluster a replication pipeline is created between the (3) Data Nodes (or however many you have configured in dfs.replication). This means that as a Data Node is receiving block data it will at the same time push a copy of that data to the next Node in the pipeline.</p><p>当每个块的数据被写入集群时, 三个Data Nodes之间(或者无论多少个你在dfs.replication中设置的)会创建一个复制管道. 这意味着, 当一个Data Node接收数据块时, 它会同时推送一个数据的复制到管道中的下一个Node.</p><p>Here too is a primary example of leveraging the Rack Awareness data in the Name Node to improve cluster performance. Notice that the second and third Data Nodes in the pipeline are in the same rack, and therefore the final leg of the pipeline does not need to traverse between racks and instead benefits from in-rack bandwidth and low latency. The next block will not be begin until this block is successfully written to all three nodes.</p><p>这也是一个借助机架系统的简单例子, Name Node中的数据提升集群性能. 注意管道中的第二个和第三个Data Node位于同一个机架中, 因此管道的最后一步不用穿过机架, 这会带来机架内的带宽和低延迟收益. 下一个数据块会在这一块成功写入到三个Nodes后开始.</p><hr><p><img src="http://pic.yanss.top/HDFS-Pipeline-Write-Success.png" alt="HDFS-Pipeline-Write-Success"></p><p>When all three Nodes have successfully received the block they will send a “Block Received” report to the Name Node. They will also send “Success” messages back up the pipeline and close down the TCP sessions. The Client receives a success message and tells the Name Node the block was successfully written. The Name Node updates it metadata info with the Node locations of Block A in File.txt. The Client is ready to start the pipeline process again for the next block of data.</p><p>当所有的三个Node都成功接收了这个块, 它们会发送一个”Block Received”报告给Name Node. 它们也会给管道返回一个”Success”消息并关闭TCP协议. Client接收了一个Success消息, 通知Name Node块已经成功写入. Name Node更新File.txt中块A的Node位置的元数据信息. Client准备好开始下一个数据块的管道处理.</p><hr><p><img src="http://pic.yanss.top/Multi-block-Replication-Pipeline.png" alt="Multi-block-Replication-Pipeline"></p><p>As the subsequent blocks of File.txt are written, the initial node in the pipeline will vary for each block, spreading around the hot spots of in-rack and cross-rack traffic for replication.</p><p>当File.txt中随后的块都被写入, 管道中初始的node会为每一个块做相应的变化, 在机架内的热点间传播, 在机架间复制. </p><p>Hadoop uses a lot of network bandwidth and storage. We are typically dealing with very big files, Terabytes in size. And each file will be replicated onto the network and disk (3) times. If you have a 1TB file it will consume 3TB of network traffic to successfully load the file, and 3TB disk space to hold the file.</p><p>Hadoop使用大量的网络带宽和存储空间. 特别是当我们处理非常大的文件时, TB量级的. 每个文件将3倍地复制到网络和磁盘上. 如果你有一个1TB的文件, 它将消耗3TB的网络来成功地加载文件, 以及3TB的磁盘空间来保存这个文件.</p><hr><p><img src="http://pic.yanss.top/Client-Writes-Span-Cluster.png" alt="Client-Writes-Span-Cluster"></p><p>After the replication pipeline of each block is complete the file is successfully written to the cluster. As intended the file is spread in blocks across the cluster of machines, each machine having a relatively small part of the data. The more blocks that make up a file, the more machines the data can potentially spread. The more CPU cores and disk drives that have a piece of my data mean more parallel processing power and faster results. This is the motivation behind building large, wide clusters. To process more data, faster. When the machine count goes up and the cluster goes <strong>wide</strong>, our network needs to scale appropriately.</p><p>在每个块的复制管道都完成后, 文件就成功地写入集群了. 为了文件在集群机器的块之间传播, 每个机器有相对小的一部分数据. 文件分割的块越多, 数据可能传播的机器就越多. 一块数据有更多的CPU核心和磁盘驱动意味着更好的并行处理能力和更快的获得结果. 这是建立更大更宽的集群的背后的动机. 为了更快处理更多的数据. 当机器数增长, 集群变宽, 我们的网络需要合适的规模.</p><p>Another approach to scaling the cluster is to go <strong>deep</strong>. This is where you scale up the machines with more disk drives and more CPU cores. Instead of increasing the number of machines you begin to look at increasing the density of each machine. In scaling deep, you put yourself on a trajectory where more network I/O requirements may be demanded of fewer machines. In this model, <a href="http://www.bradhedlund.com/2012/03/26/considering-10ge-hadoop-clusters-and-the-network/" target="_blank" rel="noopener">how your Hadoop cluster makes the transition to 10GE nodes</a> becomes an important consideration.</p><p>纵向发展是规模化集群的另一种方法. 这即是你用更多的磁盘驱动和更多的CPU核数纵向扩展机器. 相对增加机器数量, 取而代之的是增加每个机器的密度. 在纵向化时, 你将趋向于更多的网络I/O需求使用更少的机器. 在这种模式下, 你的Hasoop集群怎样变迁到10GE nodes成为一个重点.</p><hr><p><img src="http://pic.yanss.top/Name-Node.png" alt="Name-Node"></p><p>The Name Node holds all the file system metadata for the cluster and oversees the health of Data Nodes and coordinates access to data. The Name Node is the central controller of HDFS. It does not hold any cluster data itself. The Name Node only knows what blocks make up a file and where those blocks are located in the cluster. The Name Node points Clients to the Data Nodes they need to talk to and keeps track of the cluster’s storage capacity, the health of each Data Node, and making sure each block of data is meeting the minimum defined replica policy.</p><p>Name Node控制集群的所有的文件系统元数据, 监督Data Nodes的健康和协调数据入口. Name Node时HDFS的控制中心. 它自己不控制任何集群数据. Name Node只知道文件由什么块组成, 和那些块在集群中的位置. Name Node从Client指向Data Nodes, 它们需要交流来保持集群存储能力和每个Data Node健康的轨迹, 并且确认每个数据的块保证最低限度的复制.</p><p>Data Nodes send heartbeats to the Name Node every 3 seconds via a TCP handshake, using the same port number defined for the Name Node daemon, usually TCP 9000. Every tenth heartbeat is a Block Report, where the Data Node tells the Name Node about all the blocks it has. The block reports allow the Name Node build its metadata and insure (3) copies of the block exist on different nodes, in different racks.</p><p>Data Node通过TCP握手每3秒发送心跳给Name Node, 为Name Node使用同一个确定的端口号, 通常是TCP 9000. 每第10个心跳是一个块报告, 关于Data Node告诉Name Node所有它有的块. 块报告允许Name Node建立它的元数据和确认块的3个复制存在于不同机架的不同的node上.</p><p>The Name Node is a critical component of the Hadoop Distributed File System (HDFS). Without it, Clients would not be able to write or read files from HDFS, and it would be impossible to schedule and execute Map Reduce jobs. Because of this, it’s a good idea to equip the Name Node with a highly redundant enterprise class server configuration; dual power supplies, hot swappable fans, redundant NIC connections, etc.</p><p>Name Node是Hadoop分布式文件系统的一个关键的组件. 没有它, Clients将不能从HDFS写和读文件, 而且也不能规划和执行Map Reduce工作. 归功于它, 用高冗余企业类服务器配置安装Name Node是一个好主意. 双重支持, 热交换, 冗余NIC连接, 等.</p><hr><p><img src="http://pic.yanss.top/Re-replicating-Missing-Replicas2.png" alt="Re-replicating-Missing-Replicas2"></p><p>If the Name Node stops receiving heartbeats from a Data Node it presumes it to be dead and any data it had to be gone as well. Based on the block reports it had been receiving from the dead node, the Name Node knows which copies of blocks died along with the node and can make the decision to re-replicate those blocks to other Data Nodes. It will also consult the Rack Awareness data in order to maintain the <strong>two copies in one rack, one copy in another rack</strong> replica rule when deciding which Data Node should receive a new copy of the blocks.</p><p>Consider the scenario where an entire rack of servers falls off the network, perhaps because of a rack switch failure, or power failure. The Name Node would begin instructing the remaining nodes in the cluster to re-replicate all of the data blocks lost in that rack. If each server in that rack had a modest 12TB of data, this could be hundreds of terabytes of data that needs to begin traversing the network.</p><hr><p><img src="http://pic.yanss.top/Secondary-Name-Node.png" alt="Secondary-Name-Node"></p><p>Hadoop has server role called the Secondary Name Node. A common misconception is that this role provides a high availability backup for the Name Node. This is not the case.</p><p>The Secondary Name Node occasionally connects to the Name Node (by default, ever hour) and grabs a copy of the Name Node’s in-memory metadata and files used to store metadata (both of which may be out of sync). The Secondary Name Node combines this information in a fresh set of files and delivers them back to the Name Node, while keeping a copy for itself.</p><p>Should the Name Node die, the files retained by the Secondary Name Node can be used to recover the Name Node. In a busy cluster, the administrator may configure the Secondary Name Node to provide this housekeeping service much more frequently than the default setting of one hour. Maybe every minute.</p><hr><p><img src="http://pic.yanss.top/Client-Read-from-HDFS.png" alt="Client-Read-from-HDFS"></p><p>When a Client wants to retrieve a file from HDFS, perhaps the output of a job, it again consults the Name Node and asks for the block locations of the file. The Name Node returns a list of each Data Node holding a block, for each block. The Client picks a Data Node from each block list and reads one block at a time with TCP on port 50010, the default port number for the Data Node daemon. It does not progress to the next block until the previous block completes.</p><hr><p><img src="http://pic.yanss.top/Data-Node-Read-from-HDFS.png" alt="Data-Node-Read-from-HDFS"></p><p>There are some cases in which a Data Node daemon itself will need to read a block of data from HDFS. One such case is where the Data Node has been asked to process data that it does not have locally, and therefore it must retrieve the data from another Data Node over the network before it can begin processing.</p><p>This is another key example of the Name Node’s Rack Awareness knowledge providing optimal network behavior. When the Data Node asks the Name Node for location of block data, the Name Node will check if another Data Node in the same rack has the data. If so, the Name Node provides the in-rack location from which to retrieve the data. The flow does not need to traverse two more switches and congested links find the data in another rack. With the data retrieved quicker in-rack, the data processing can begin sooner, and the job completes that much faster.</p><hr><p><img src="http://pic.yanss.top/Map-Task.png" alt="Map-Task"></p><p>Now that File.txt is spread in small blocks across my cluster of machines I have the opportunity to provide extremely fast and efficient parallel processing of that data. The parallel processing framework included with Hadoop is called Map Reduce, named after two important steps in the model; <strong>Map</strong>, and <strong>Reduce</strong>.</p><p>The first step is the Map process. This is where we simultaneously ask our machines to run a computation on their local block of data. In this case we are asking our machines to count the number of occurrences of the word “Refund” in the data blocks of File.txt.</p><p>To start this process the Client machine submits the Map Reduce job to the Job Tracker, asking “How many times does Refund occur in File.txt” (paraphrasing Java code). The Job Tracker consults the Name Node to learn which Data Nodes have blocks of File.txt. The Job Tracker then provides the Task Tracker running on those nodes with the Java code required to execute the Map computation on their local data. The Task Tracker starts a Map task and monitors the tasks progress. The Task Tracker provides heartbeats and task status back to the Job Tracker.</p><p>As each Map task completes, each node stores the result of its local computation in temporary local storage. This is called the “intermediate data”. The next step will be to send this intermediate data over the network to a Node running a Reduce task for final computation.</p><hr><p><img src="http://pic.yanss.top/What-if-Map-Task-data-isnt-local.png" alt="What-if-Map-Task-data-isnt-local"></p><p>While the Job Tracker will always try to pick nodes with local data for a Map task, it may not always be able to do so. One reason for this might be that all of the nodes with local data already have too many other tasks running and cannot accept anymore. In this case, the Job Tracker will consult the Name Node whose Rack Awareness knowledge can suggest other nodes in the same rack. The Job Tracker will assign the task to a node in the same rack, and when that node goes to find the data it needs the Name Node will instruct it to grab the data from another node in its rack, leveraging the presumed single hop and high bandwidth of in-rack switching.</p><hr><p><img src="http://pic.yanss.top/Reduce-Task.png" alt="Reduce-Task"></p><p>The second phase of the Map Reduce framework is called, you guess it, <strong>Reduce</strong>. The Map task on the machines have completed and generated their intermediate data. Now we need to gather all of this intermediate data to combine and distill it for further processing such that we have one final result.</p><p>The Job Tracker starts a Reduce task on any one of the nodes in the cluster and instructs the Reduce task to go grab the intermediate data from all of the completed Map tasks. The Map tasks may respond to the Reducer almost simultaneously, resulting in a situation where you have a number of nodes sending TCP data to a single node, all at once. This traffic condition is often referred to as <a href="http://www.bradhedlund.com/2011/05/01/tcp-incast-and-cloud-application-performance/" target="_blank" rel="noopener">TCP Incast</a> or “fan-in”. For networks handling lots of Incast conditions, it’s important the network switches have well-engineered internal traffic management capabilities, and adequate buffers (not too big, not too small). Throwing gobs of buffers at a switch may end up causing unwanted collateral damage to other traffic. But that’s a topic for another day.</p><p>The Reducer task has now collected all of the intermediate data from the Map tasks and can begin the final computation phase. In this case, we are simply adding up the sum total occurrences of the word “Refund” and writing the result to a file called Results.txt</p><p>The output from the job is a file called Results.txt that is written to HDFS following all of the processes we have covered already; splitting the file up into blocks, pipeline replication of those blocks, etc. When complete, the Client machine can read the Results.txt file from HDFS, and the job is considered complete.</p><p>Our simple word count job did not result in a lot of intermediate data to transfer over the network. Other jobs however may produce a lot of intermediate data – such as sorting a terabyte of data. Where the output of the Map Reduce job is a new set of data equal to the size of data you started with. How much traffic you see on the network in the Map Reduce process is entirely dependent on the type job you are running at that given time.</p><p>If you’re a studious network administrator, you would learn more about Map Reduce and the types of jobs your cluster will be running, and how the type of job affects the traffic flows on your network. If you’re a Hadoop networking rock star, you might even be able to suggest ways to better code the Map Reduce jobs so as to optimize the performance of the network, resulting in faster job completion times.</p><hr><p><img src="http://pic.yanss.top/Unbalanced-Hadoop-Cluster.png" alt="Unbalanced-Hadoop-Cluster"></p><p>Hadoop may start to be a real success in your organization, providing a lot of previously untapped business value from all that data sitting around. When business folks find out about this you can bet that you’ll quickly have more money to buy more racks of servers and network for your Hadoop cluster.</p><p>When you add new racks full of servers and network to an existing Hadoop cluster you can end up in a situation where your cluster is unbalanced. In this case, Racks 1 &amp; 2 were my existing racks containing File.txt and running my Map Reduce jobs on that data. When I added two new racks to the cluster, my File.txt data doesn’t auto-magically start spreading over to the new racks. All the data stays where it is.</p><p>The new servers are sitting idle with no data, until I start loading new data into the cluster. Furthermore, if the servers in Racks 1 &amp; 2 are really busy, the Job Tracker may have no other choice but to assign Map tasks on File.txt to the new servers which have no local data. The new servers need to go grab the data over the network. As as result you may see more network traffic and slower job completion times.</p><hr><p><img src="http://pic.yanss.top/Hadoop-Cluster-Balancer.png" alt="Hadoop-Cluster-Balancer"></p><p>To fix the unbalanced cluster situation, Hadoop includes a nifty utility called, you guessed it, <strong>balancer</strong>.</p><p>Balancer looks at the difference in available storage between nodes and attempts to provide balance to a certain threshold. New nodes with lots of free disk space will be detected and balancer can begin copying block data off nodes with less available space to the new nodes. Balancer isn’t running until someone types the command at a terminal, and it stops when the terminal is canceled or closed.</p><p>The amount of network traffic balancer can use is very low, with a default setting of 1MB/s. This setting can be changed with the <strong>dfs.balance.bandwidthPerSec</strong> parameter in the file <strong>hdfs-site.xml</strong></p><p>The Balancer is good housekeeping for your cluster. It should definitely be used any time new machines are added, and perhaps even run once a week for good measure. Given the balancers low default bandwidth setting it can take a long time to finish its work, perhaps days or weeks. Wouldn’t it be cool if cluster balancing was a core part of Hadoop, and not just a utility? I think so.</p><hr><p>This material is based on studies, <a href="http://www.cloudera.com/hadoop-training/" target="_blank" rel="noopener">training from Cloudera</a>, and observations from my own virtual Hadoop lab of six nodes. Everything discussed here is based on the <a href="https://ccp.cloudera.com/display/SUPPORT/Downloads" target="_blank" rel="noopener">latest stable release of Cloudera’s CDH3 distribution of Hadoop</a>. There are new and interesting technologies coming to Hadoop such as <a href="http://hadoop.apache.org/common/docs/r0.21.0/hod_scheduler.html#Introduction" target="_blank" rel="noopener">Hadoop on Demand (HOD)</a> and <a href="http://www.hortonworks.com/an-introduction-to-hdfs-federation/" target="_blank" rel="noopener">HDFS Federations</a>, not discussed here, but worth investigating on your own if so inclined.</p><p><strong>Download:</strong> <a href="http://pic.yanss.top/Understanding_Hadoop_Clusters_and_the_Network-bradhedlund_com.pdf" target="_blank" rel="noopener">Slides - PDF</a> <a href="http://pic.yanss.top/Understanding_Hadoop_Clusters_and_the_Network-slides_and_text_bradhedlund_com.pdf" target="_blank" rel="noopener">Slides and Text - PDF</a></p><p>Cheers, Brad</p><p><br></p><p id="div-border-top-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇初学Hadoop时应该浏览的博客，受18年实习时的mentor推荐，我读了Understanding Hadoop Clusters and the Network一文，并在这里翻译一遍。&lt;br&gt;
    
    </summary>
    
    
      <category term="hadoop" scheme="https://foreti.me/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Coding的动态pages部署WordPress</title>
    <link href="https://foreti.me/2018/02/09/codingnet-wordpress/"/>
    <id>https://foreti.me/2018/02/09/codingnet-wordpress/</id>
    <published>2018-02-09T06:28:46.000Z</published>
    <updated>2019-03-23T02:48:17.687Z</updated>
    
    <content type="html"><![CDATA[<p>什么都别说了，先上图 </p><a id="more"></a><p><img src="http://pic.yanss.top/coding-pages.png" alt="coding-pages"></p><p>部署好的wordpress效果（我主要是做一个相册集）<br><img src="http://pic.yanss.top/wp.yanss.top_.png" alt="wp"></p><p>总体效果还不错吧，毕竟动态博客还是可操作性强多了。</p><p>好了，进入正题。</p><p>做这个其实就是前几天在coding的pages服务菜单中发现还有静态和动态两个选项卡，当时就懵逼了，pages服务还能动态？</p><p>然后看了说明，动态是可以，但是限制还是蛮多的。</p><blockquote><p>动态 Pages 是一个动态网页托管和演示服务，支持使用 PHP 语言和 MySQL 数据库，可用于部署开源博客、CMS 等动态应用。</p></blockquote><p>只能使用php语言，然后数据库其实是coding自己的服务器提供的，然后整个服务器后台也是coding提供，所以自己是不可能做什么修改的。当然做一个wordpress博客还是绰绰有余，下面就是我的wordpress仓库文件。</p><p><img src="http://pic.yanss.top/coding-pages1.png" alt="coding-pages1"></p><p>搭建过程也非常简单，就是coding新建一个仓库，然后去<a href="https://cn.wordpress.org/" target="_blank" rel="noopener">wordpress官网</a>上下载最新的wordpress压缩包，解压之后push到coding仓库中。</p><p>然后在Pages服务中开启动态Pages，选择部署来源为master分支，稍等一下就自动部署完成了。</p><p>打开动态pages运行的url，然后就是5分钟流程了。</p><p>所有的连接信息(共5个)都在这里，只有前4个用得上</p><p><img src="http://pic.yanss.top/coding-pages2.png" alt="coding-pages2"></p><p><strong>存在的问题：</strong></p><ul><li>使用过程中在wordpress管理后台中下载好了主题和插件，但是在coding仓库中却没有对应的文件增加。所以在偶尔出现数据库连接错误或其他问题需要重新部署时，原本设置好的插件和主题就没有了</li><li>由于动态pages使用的是coding自己的服务器，所以个人没法修改服务器的一些设置，比如上传文件的大小限制，图片的分辨率等，所以上传的大图需要自己压缩一下再传。</li></ul><p><strong>最后建议：</strong></p><ul><li>把连接信息保存到一个文件<code>wp-config.php</code>，放到根目录下。</li><li>所有的主题和插件去源网页下载文件，保存到<code>wp-content</code>下的对应文件夹下，然后提交到coding</li></ul><p><br></p><p id="div-border-top-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么都别说了，先上图 &lt;/p&gt;
    
    </summary>
    
    
      <category term="WordPress" scheme="https://foreti.me/tags/WordPress/"/>
    
      <category term="Coding-pages" scheme="https://foreti.me/tags/Coding-pages/"/>
    
  </entry>
  
  <entry>
    <title>GitBook源文件发布到gh-pages</title>
    <link href="https://foreti.me/2018/02/04/gitbook-to-gh-pages/"/>
    <id>https://foreti.me/2018/02/04/gitbook-to-gh-pages/</id>
    <published>2018-02-04T12:56:52.000Z</published>
    <updated>2019-03-23T02:48:17.687Z</updated>
    
    <content type="html"><![CDATA[<p>GitBook的渲染真的很慢，我找到了它编译生成的html文件，并将它上传到了gh-page上。<br><a id="more"></a></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>这段时间在读一本英文书，读的很慢，可以说是逐词翻译了。</p><p>然而读的时候总是会忘了前面的生词是什么意思，也没有纸质打印版，所以想到边读边做笔记，主要就是生词注释一下。</p><p>于是想到了GitBook。</p><p>首先我在GitBook上创建一本书，书名是<code>Hadoop-The Definitive Guide 4th Edition</code>。</p><p>然后打开就可以直接编辑。</p><p><img src="http://pic.yanss.top/hadoopbook1.png" alt="hadoopbook1"></p><p>但是gitbook的编辑器很难用啊，好像原来是直接写markdown的，现在改了编辑模式？特别是插入连接的时候，没法像<code>[]()</code>这么方便啊。</p><p>而且重要的是gitbook服务器加载速度不稳定，慢的时候都打不开了，所以想着直接把gitbook的Markdown文件内容编译成静态页面，发布到github仓库中，利用gh-pages直接访问，速度快多了。</p><h1 id="连接github仓库"><a href="#连接github仓库" class="headerlink" title="连接github仓库"></a>连接github仓库</h1><p>现在说说怎么部署到gh-pages。</p><p>首先在github创建一个仓库，<code>Hadoop-The-Definitive-Guide-4th</code>，并初始化。</p><p>然后到gitbook的书籍<code>Hadoop-The Definitive Guide 4th Edition</code>的设置里找到<code>Github</code>，添加对应<code>Hadoop-The-Definitive-Guide-4th</code>仓库并同步内容</p><p><img src="http://pic.yanss.top/hadoopbook2.png" alt="hadoopbook2"></p><p>之后可以在github仓库中看到一些文件</p><p><img src="http://pic.yanss.top/hadoopbook3.png" alt="hadoopbook3"></p><p>这些都是gitbook书的markdown文件。这一步完成后，就可以在gitbook或github任意一端编译文档，提交后都会在两端生成的相应书籍。这相当于书籍在两端都有备份了。</p><p>如果不用gh-pages生成页面的话，上述的操作就已经够了。</p><h1 id="提交gh-pages分支"><a href="#提交gh-pages分支" class="headerlink" title="提交gh-pages分支"></a>提交gh-pages分支</h1><p>接下来介绍如何提交静态页面到gh-pages。<br><br></p><p>由于要生成静态页面的文件，需要在本地安装gitbook的npm包(推荐使用cnpm安装)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gitbook-cli -g</span><br></pre></td></tr></table></figure></p><p>然后把github仓库clone到本地<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:fakeYanss/Hadoop-The-Definitive-Guide-4th.git</span><br></pre></td></tr></table></figure></p><p>进入到<code>Hadoop-The-Definitive-Guide-4th</code>文件夹，生成静态页面文件，输出目录在<code>_book</code>中。如果目录文件<code>SUMMARY.md</code>有变化，需要先<code>gitbook init</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook build</span><br></pre></td></tr></table></figure></p><p>然后在本地创建一个<code>gh-pages</code>分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --orphan gh-pages</span><br></pre></td></tr></table></figure></p><p>然后清空一下分支下的文件（如果有的话）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf *</span><br></pre></td></tr></table></figure></p><p>然后将<code>master</code>分支下的<code>_book</code>静态页面文件内容全部复制到<code>gh-pages</code>分支下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master -- _book</span><br></pre></td></tr></table></figure></p><p>将<code>_book</code>中的子文件全部移到外层，并删除<code>_book</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv _book/* ./</span><br><span class="line">rm -rf _book</span><br></pre></td></tr></table></figure></p><p>这时候<code>gh-pages</code>分支下就是全部的静态页面文件了，接下来就是提交到远程<code>gh-pages</code>分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &apos;publish gh-pages&apos;</span><br><span class="line">git push origin gh-pages</span><br></pre></td></tr></table></figure></p><p>提交完成后到github仓库的设置中看一下，gh-pages服务是否自动开启，如果没有的话在<code>Source</code>中选择<code>gh-pages branch</code>，保存刷新，等待几分钟就好了。</p><p><img src="http://pic.yanss.top/hadoopbook5.png" alt="hadoopbook5"></p><p>全部操作已经完成，接下来每次在本地更新书籍内容后，先生成静态页面，然后提交master分支，再提交gh-pages分支就可以了。</p><p>之后每次查看线上gitbook书籍，可以直接输入url <code>https://name.github.io/书籍仓库名</code>查看。</p><hr><p>最后，为了每次的提交操作不用手打一遍，我写了一个bash脚本<a href="https://github.com/fakeYanss/Hadoop-The-Definitive-Guide-4th/blob/master/publish.sh" target="_blank" rel="noopener">publish.sh</a>，<a href="http://pic.yanss.top/publish.sh" target="_blank" rel="noopener">点击下载</a>，自行更改第一行的文件夹地址即可。windows系统安装过git环境的可以直接双击运行，要查看日志的话可以在git bash中输入<code>./publish.sh</code>运行。</p><p><strong>注意：使用时不能将脚本放在仓库里，不然在切换分支时会出错，</strong>最好与仓库文件夹同级。</p><p><img src="http://pic.yanss.top/hadoopbook4.png" alt="hadoopbook4"></p><p><br></p><p id="div-border-top-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GitBook的渲染真的很慢，我找到了它编译生成的html文件，并将它上传到了gh-page上。&lt;br&gt;
    
    </summary>
    
    
      <category term="gitbook" scheme="https://foreti.me/tags/gitbook/"/>
    
      <category term="gh-pages" scheme="https://foreti.me/tags/gh-pages/"/>
    
  </entry>
  
  <entry>
    <title>Java不用for循环打印数组</title>
    <link href="https://foreti.me/2018/01/27/java-print-array/"/>
    <id>https://foreti.me/2018/01/27/java-print-array/</id>
    <published>2018-01-27T09:31:47.000Z</published>
    <updated>2019-03-23T02:48:17.703Z</updated>
    
    <content type="html"><![CDATA[<p>Java中打印数组时不想用for遍历数组，可以试试下面几种方法<br><a id="more"></a></p><h1 id="ArrayList直接打印"><a href="#ArrayList直接打印" class="headerlink" title="ArrayList直接打印"></a>ArrayList直接打印</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">list.add(<span class="number">4</span>);</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4]</span><br></pre></td></tr></table></figure></p><h1 id="Arrays类打印数组"><a href="#Arrays类打印数组" class="headerlink" title="Arrays类打印数组"></a>Arrays类打印数组</h1><p>java.util.Arrays的toString()方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.toString(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;));</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4]</span><br></pre></td></tr></table></figure></p><h1 id="Arrays类打印二维数组"><a href="#Arrays类打印二维数组" class="headerlink" title="Arrays类打印二维数组"></a>Arrays类打印二维数组</h1><p>java.util.Arrays的deeptoString()方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.deepToString(<span class="keyword">new</span> <span class="keyword">int</span>[][] &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;));</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[1, 2], [3, 4]]</span><br></pre></td></tr></table></figure></p><p><br></p><p id="div-border-top-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java中打印数组时不想用for遍历数组，可以试试下面几种方法&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>初识机器学习</title>
    <link href="https://foreti.me/2018/01/12/machine-learning-view/"/>
    <id>https://foreti.me/2018/01/12/machine-learning-view/</id>
    <published>2018-01-12T07:01:20.000Z</published>
    <updated>2019-03-23T02:48:17.703Z</updated>
    
    <content type="html"><![CDATA[<p>关于机器学习，这是我学的第一节课。<a id="more"></a></p><p><img src="http://pic.yanss.top/ml1.jpg"></p><h2 id="Machine-learning"><a href="#Machine-learning" class="headerlink" title="Machine learning"></a>Machine learning</h2><p><strong>Machine learning definition:</strong></p><ul><li><p>Arthur Samuel (1959) . 在没有明确设置的前提下，使机器具有学习能力的研究领域。</p></li><li><p>Tom Mitchell (1998) . 一个适当的学习问题定义如下：计算机程序从经验E中学习，解决某一任务T，进行某一性能度量P，通过P测试在T上的表现因经验E而提高。</p><p>对于跳棋游戏（Samuel设计的一个小游戏，通过数万次跳棋对战学习，获得比Samuel的跳棋水平还高的能力），经验E就是程序与自己下几万次跳棋，任务T就是玩跳棋，性能度量P就是与新对手玩跳棋时赢的概率。</p></li></ul><p><strong>Machine learning algorithms:</strong></p><p>目前学习算法主要的两类是监督学习(supervised learning)和无监督学习(unsupervised learning)。</p><p>简单来说，监督学习就是我们教计算机做某件事情；在无监督学习中，我们让计算机自己学习。</p><p><strong>Others:</strong></p><p>强化学习(Reinforcement learning), 推荐系统(recommender systems)</p><h2 id="Supervised-Learning"><a href="#Supervised-Learning" class="headerlink" title="Supervised Learning"></a>Supervised Learning</h2><p><strong>监督学习</strong>：我们给算法一个数据集，其中包含了正确答案，算法的目的就是给出更多的正确答案。</p><p><strong>回归(Regression)</strong>：预测连续的数值输出。</p><p><strong>分类(Classification)</strong>：预测一个离散值输出。</p><p>示例：房子的价格与房子面积的关系(回归问题)；肿瘤是恶性或良性与肿瘤大小，患者年龄，肿瘤块厚度等的关系(分类问题)。</p><p><br></p><p>下面一个问题。problem1将要卖的货物数量看成一个连续的值，属于回归问题；problem2输出的值可能为0或1，分别表示两种不同的结果，属于分类问题。</p><p><img src="http://pic.yanss.top/ML1.PNG" alt="ML1"></p><h2 id="Unsupervised-Learning"><a href="#Unsupervised-Learning" class="headerlink" title="Unsupervised Learning"></a>Unsupervised Learning</h2><p><strong>无监督学习</strong>：对于数据集中的每一个样本，都具有相同标签或都没有标签，我们不知道要拿数据做什么，也不知道每个数据点究竟是什么，只能在数据集种找到某种结构(簇)，它们具有类似的性质。<strong>聚类(clustering)</strong>是无监督学习的一种 。</p><p><strong>Cocktail party problem 鸡尾酒会问题</strong></p><p>编程环境Octave或Matlab</p><p>解决代码$$[W,s,v]=svd((repmat(sum(x.^*x,1),size(x,1),1).^*x)^*x’)$$</p><p>\(svd\)是奇异值分解的缩写，在Octave中作为一个内置函数。</p><p><br></p><p>下面一个问题，哪些选项要使用无监督学习算法？</p><p><img src="http://pic.yanss.top/ML2.PNG" alt="ML2"></p><p><br></p><p id="div-border-top-red"><i>Lastly, welcome to follow me on <a href="https://github.com/fakeYanss" target="_blank" rel="noopener">github</a></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于机器学习，这是我学的第一节课。
    
    </summary>
    
    
      <category term="supervised learning" scheme="https://foreti.me/tags/supervised-learning/"/>
    
      <category term="unsupervised learning" scheme="https://foreti.me/tags/unsupervised-learning/"/>
    
  </entry>
  
</feed>
